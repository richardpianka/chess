package com.richardpianka.chess.network;

option java_package = "com.richardpianka.chess.network";
option java_outer_classname = "Contracts";

/**
 * The protocol version is defined in the Version message
 */

/**
 * =======================================
 * Transport layer
 * =======================================
 */
//The message type and name must be identical
message Envelope {
    optional HandshakeRequest HandshakeRequest                  = 1;
    optional HandshakeResponse HandshakeResponse                = 2;
    optional IdentifyRequest IdentifyRequest                    = 3;
    optional IdentifyResponse IdentifyResponse                  = 4;
    optional CreateAccountRequest CreateAccountRequest          = 5;
    optional CreateAccountResponse CreateAccountResponse        = 6;
    optional ChangePasswordRequest ChangePasswordRequest        = 7;
    optional ChangePasswordResponse ChangePasswordResponse      = 8;
    optional JoinChatRequest JoinChatRequest                    = 9;
    optional JoinChatResponse JoinChatResponse                  = 10;
    optional RoomListRequest RoomListRequest                    = 11;
    optional RoomListResponse RoomListResponse                  = 12;
    optional JoinRoomRequest JoinRoomRequest                    = 13;
    optional JoinRoomResponse JoinRoomResponse                  = 14;
    optional SpeakRequest SpeakRequest                          = 15;
    optional OperatorRequest OperatorRequest                    = 16;
    optional OperatorResponse OperatorResponse                  = 17;
    optional ChatRoomEvent ChatRoomEvent                        = 18;
    optional ChatUserEvent ChatUserEvent                        = 19;
    optional ChatSpeakEvent ChatSpeakEvent                      = 20;
    optional GameListRequest GameListRequest                    = 21;
    optional GameListResponse GameListResponse                  = 22;
    optional CreateGameRequest CreateGameRequest                = 23;
    optional CreateGameResponse CreateGameResponse              = 24;
    optional JoinGameRequest JoinGameRequest                    = 25;
    optional JoinGameResponse JoinGameResponse                  = 26;
    optional LeaveGameRequest LeaveGameRequest                  = 27;
    optional StartGameRequest StartGameRequest                  = 28;
    optional StartGameResponse StartGameResponse                = 29;
    optional GameStartedEvent GameStartedEvent                  = 30;
    optional MovePieceRequest MovePieceRequest                  = 31;
    optional MovePieceResponse MovePieceResponse                = 32;
    optional MovePieceEvent MovePieceEvent                      = 33;
    optional SpecialMovePieceRequest SpecialMovePieceRequest    = 34;
    optional SpecialMovePieceResponse SpecialMovePieceResponse  = 35;
    optional SpecialMovePieceEvent SpecialMovePieceEvent        = 36;
    optional GameStatusEvent GameStatusEvent                    = 37;
    optional TimeLeftEvent TimeLeftEvent                        = 38;
}

/**
 * =======================================
 * Game objects & enums
 * =======================================
 */
enum Color {
    White = 0;
    Black = 1;
}

enum Figurine {
    King = 0;
    Queen = 1;
    Bishop = 2;
    Knight = 3;
    Rook = 4;
    Pawn = 5;
}

enum Rank {
    _1 = 0;
    _2 = 1;
    _3 = 2;
    _4 = 3;
    _5 = 4;
    _6 = 5;
    _7 = 6;
    _8 = 7;
}

enum File {
    _A = 0;
    _B = 1;
    _C = 2;
    _D = 3;
    _E = 4;
    _F = 5;
    _G = 6;
    _H = 7;
}

message Coordinate {
    required File File = 1;
    required Rank Rank = 2;
}

message Piece {
    required Color Color = 1;
    required Figurine Figurine = 2;
    required uint32 Number = 3;
}

message Move {
    required Piece Piece = 1;
    required Coordinate Start = 2;
    required Coordinate End = 3;
}

message SpecialMove {
    optional Castle Castle = 1;
}

message Castle {
    required Piece Rook = 1;
    required Piece King = 2;
} // not supported

/**
 * =======================================
 * Common objects & enums
 * =======================================
 */
enum Result {
    Success = 0;
    Failure = 1;
}

enum RoomFlags {
    Public = 0;
    Private = 1;
    Restricted = 2;
}

enum UserFlags {
    Pedestrian = 0;
    Operator = 1;
    Admin = 2;
}

enum SpeakMode {
    Normal = 0;
    Whisper = 1;
    Emote = 2;
}

enum OperatorAction {
    Designate = 0;
    Resign = 1;
    Kick = 2;
    Ban = 3;
}

enum GameStatus {
    Play = 0;
    Paused = 1; //unsupported
    Victory = 2;
    Forfeit = 3;
    Stalemate = 4;
}

message Version {
    optional uint32 VersionMajor = 1    [default = 1];
    optional uint32 VersionMinor = 2    [default = 0];
    optional uint32 VersionRevision = 3 [default = 0];
}

message Room {
    required string Name = 1;
    required RoomFlags Flags = 2;
}

message Record {
    required uint32 Wins = 1;
    required uint32 Losses = 2;
    required uint32 Stalemates = 3;
    required uint32 Disconnects = 4;
}

message User {
    required string Name = 1;
    required Record Record = 2;
    optional UserFlags Flags = 3;
}

message Game {
    required string Name = 1;
    optional string Password = 2;
    required bool Private = 3;
    optional GameMetadata MetaData = 4;
}

message GameMetadata {
    optional User Created = 1;
    optional User Joined = 2;
    optional UserTime UserTime = 3;
}

message UserTime {
    required bool Timed = 1;
    required uint32 SecondsPerUser = 2;
} // so the fields are iff

/**
 * =======================================
 * Login sequence
 * =======================================
 */
message HandshakeRequest {
    required Version Version = 1;
}

message HandshakeResponse {
    required Result Result = 1;
}

message IdentifyRequest {
    required string Username = 1;
    optional string Password = 2;
}

message IdentifyResponse {
    required Result Result = 1;
    optional string Message = 2;
}

message CreateAccountRequest {
    required string Username = 1;
    required string Password = 2;
}

message CreateAccountResponse {
    required Result Result = 1;
    optional string Message = 2;
}

message ChangePasswordRequest {
    required string Username = 1;
    required string OldPassword = 2;
    required string NewPassword = 3;
}

message ChangePasswordResponse {
    required Result Result = 1;
    optional string Message = 2;
}

message JoinChatRequest {
    // empty
}

message JoinChatResponse {
    required Result Result = 1;
}

/**
 * =======================================
 * Chat environment
 * =======================================
 */

/**
 * Commands
 */
message RoomListRequest {
    // empty
}

message RoomListResponse {
    repeated Room Rooms = 1;
}

message JoinRoomRequest {
    required Room Room = 1;
}

message JoinRoomResponse {
    required Result Result = 1;
}

message SpeakRequest {
    required SpeakMode Mode = 1;
    required string Message = 2;
    optional User Recipient = 3;
} // no response

message OperatorRequest {
    required OperatorAction Action = 1;
    optional User User = 2;
}

message OperatorResponse {
    required Result Result = 1;
}

/**
 * Events
 */
message ChatRoomEvent {
    required Room Room = 1;
    repeated User Users = 2;
}

message ChatUserEvent {
    enum UserStatus {
        Joined = 0;
        Left = 1;
        Update = 2;
    }

    required User User = 1;
    required UserStatus Status = 2;
    optional string Message = 3;
}

message ChatSpeakEvent {
    required User User = 1;
    required string Message = 2;
    required SpeakMode Mode = 3;
}

/**
 * =======================================
 * Game list
 * =======================================
 */
message GameListRequest {
    // empty
}

message GameListResponse {
    repeated Game Games = 1;
}

message CreateGameRequest {
    required string Name = 1;
    optional string Password = 2;
}

message CreateGameResponse {
    required Result Result = 1;
    optional Game Game = 2;
    optional string Message = 3;
}

message JoinGameRequest {
    required Game Game = 1;
    optional string Password = 2;
}

message JoinGameResponse {
    required Game Game = 1;
    required Result Result = 2;
}

message LeaveGameRequest {
    // empty
} // no response

message StartGameRequest {
    // empty
}

message StartGameResponse {
    required Result Result = 1;
}

/**
 * =======================================
 * In-game
 * =======================================
 */
message GameStartedEvent {
    required Color Color = 1;
}

message MovePieceRequest {
    required Move Move = 1;
}

message MovePieceResponse {
    required Result Result = 1;
}

message MovePieceEvent {
    required Move Move = 1;
}

message SpecialMovePieceRequest {
    required SpecialMove Move = 1;
}

message SpecialMovePieceResponse {
    required Result Result = 1;
}

message SpecialMovePieceEvent {
    required SpecialMove Move = 1;
}

message GameStatusEvent {
    optional GameStatus Status = 1;
    optional User User = 2;
}

message TimeLeftEvent {
    required uint32 WhiteSeconds = 1;
    required uint32 BlackSeconds = 2;
}