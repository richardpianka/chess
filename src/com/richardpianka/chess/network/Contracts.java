// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/chess/contracts.proto

package com.richardpianka.chess.network;

public final class Contracts {
  private Contracts() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum Color
      implements com.google.protobuf.ProtocolMessageEnum {
    White(0, 0),
    Black(1, 1),
    ;
    
    public static final int White_VALUE = 0;
    public static final int Black_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static Color valueOf(int value) {
      switch (value) {
        case 0: return White;
        case 1: return Black;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Color>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Color>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Color>() {
            public Color findValueByNumber(int number) {
              return Color.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final Color[] VALUES = {
      White, Black, 
    };
    
    public static Color valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Color(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.Color)
  }
  
  public enum Figurine
      implements com.google.protobuf.ProtocolMessageEnum {
    King(0, 0),
    Queen(1, 1),
    Bishop(2, 2),
    Knight(3, 3),
    Rook(4, 4),
    Pawn(5, 5),
    ;
    
    public static final int King_VALUE = 0;
    public static final int Queen_VALUE = 1;
    public static final int Bishop_VALUE = 2;
    public static final int Knight_VALUE = 3;
    public static final int Rook_VALUE = 4;
    public static final int Pawn_VALUE = 5;
    
    
    public final int getNumber() { return value; }
    
    public static Figurine valueOf(int value) {
      switch (value) {
        case 0: return King;
        case 1: return Queen;
        case 2: return Bishop;
        case 3: return Knight;
        case 4: return Rook;
        case 5: return Pawn;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Figurine>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Figurine>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Figurine>() {
            public Figurine findValueByNumber(int number) {
              return Figurine.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final Figurine[] VALUES = {
      King, Queen, Bishop, Knight, Rook, Pawn, 
    };
    
    public static Figurine valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Figurine(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.Figurine)
  }
  
  public enum Rank
      implements com.google.protobuf.ProtocolMessageEnum {
    _1(0, 0),
    _2(1, 1),
    _3(2, 2),
    _4(3, 3),
    _5(4, 4),
    _6(5, 5),
    _7(6, 6),
    _8(7, 7),
    ;
    
    public static final int _1_VALUE = 0;
    public static final int _2_VALUE = 1;
    public static final int _3_VALUE = 2;
    public static final int _4_VALUE = 3;
    public static final int _5_VALUE = 4;
    public static final int _6_VALUE = 5;
    public static final int _7_VALUE = 6;
    public static final int _8_VALUE = 7;
    
    
    public final int getNumber() { return value; }
    
    public static Rank valueOf(int value) {
      switch (value) {
        case 0: return _1;
        case 1: return _2;
        case 2: return _3;
        case 3: return _4;
        case 4: return _5;
        case 5: return _6;
        case 6: return _7;
        case 7: return _8;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Rank>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Rank>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Rank>() {
            public Rank findValueByNumber(int number) {
              return Rank.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final Rank[] VALUES = {
      _1, _2, _3, _4, _5, _6, _7, _8, 
    };
    
    public static Rank valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Rank(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.Rank)
  }
  
  public enum File
      implements com.google.protobuf.ProtocolMessageEnum {
    _A(0, 0),
    _B(1, 1),
    _C(2, 2),
    _D(3, 3),
    _E(4, 4),
    _F(5, 5),
    _G(6, 6),
    _H(7, 7),
    ;
    
    public static final int _A_VALUE = 0;
    public static final int _B_VALUE = 1;
    public static final int _C_VALUE = 2;
    public static final int _D_VALUE = 3;
    public static final int _E_VALUE = 4;
    public static final int _F_VALUE = 5;
    public static final int _G_VALUE = 6;
    public static final int _H_VALUE = 7;
    
    
    public final int getNumber() { return value; }
    
    public static File valueOf(int value) {
      switch (value) {
        case 0: return _A;
        case 1: return _B;
        case 2: return _C;
        case 3: return _D;
        case 4: return _E;
        case 5: return _F;
        case 6: return _G;
        case 7: return _H;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<File>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<File>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<File>() {
            public File findValueByNumber(int number) {
              return File.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final File[] VALUES = {
      _A, _B, _C, _D, _E, _F, _G, _H, 
    };
    
    public static File valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private File(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.File)
  }
  
  public enum Result
      implements com.google.protobuf.ProtocolMessageEnum {
    Success(0, 0),
    Failure(1, 1),
    ;
    
    public static final int Success_VALUE = 0;
    public static final int Failure_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static Result valueOf(int value) {
      switch (value) {
        case 0: return Success;
        case 1: return Failure;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Result>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Result>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Result>() {
            public Result findValueByNumber(int number) {
              return Result.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(4);
    }
    
    private static final Result[] VALUES = {
      Success, Failure, 
    };
    
    public static Result valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Result(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.Result)
  }
  
  public enum RoomFlags
      implements com.google.protobuf.ProtocolMessageEnum {
    Public(0, 0),
    Private(1, 1),
    Restricted(2, 2),
    ;
    
    public static final int Public_VALUE = 0;
    public static final int Private_VALUE = 1;
    public static final int Restricted_VALUE = 2;
    
    
    public final int getNumber() { return value; }
    
    public static RoomFlags valueOf(int value) {
      switch (value) {
        case 0: return Public;
        case 1: return Private;
        case 2: return Restricted;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<RoomFlags>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RoomFlags>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RoomFlags>() {
            public RoomFlags findValueByNumber(int number) {
              return RoomFlags.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(5);
    }
    
    private static final RoomFlags[] VALUES = {
      Public, Private, Restricted, 
    };
    
    public static RoomFlags valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private RoomFlags(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.RoomFlags)
  }
  
  public enum UserFlags
      implements com.google.protobuf.ProtocolMessageEnum {
    Pedestrian(0, 0),
    Operator(1, 1),
    Admin(2, 2),
    ;
    
    public static final int Pedestrian_VALUE = 0;
    public static final int Operator_VALUE = 1;
    public static final int Admin_VALUE = 2;
    
    
    public final int getNumber() { return value; }
    
    public static UserFlags valueOf(int value) {
      switch (value) {
        case 0: return Pedestrian;
        case 1: return Operator;
        case 2: return Admin;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<UserFlags>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<UserFlags>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UserFlags>() {
            public UserFlags findValueByNumber(int number) {
              return UserFlags.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(6);
    }
    
    private static final UserFlags[] VALUES = {
      Pedestrian, Operator, Admin, 
    };
    
    public static UserFlags valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private UserFlags(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.UserFlags)
  }
  
  public enum SpeakMode
      implements com.google.protobuf.ProtocolMessageEnum {
    Normal(0, 0),
    Whisper(1, 1),
    Emote(2, 2),
    ;
    
    public static final int Normal_VALUE = 0;
    public static final int Whisper_VALUE = 1;
    public static final int Emote_VALUE = 2;
    
    
    public final int getNumber() { return value; }
    
    public static SpeakMode valueOf(int value) {
      switch (value) {
        case 0: return Normal;
        case 1: return Whisper;
        case 2: return Emote;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SpeakMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SpeakMode>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpeakMode>() {
            public SpeakMode findValueByNumber(int number) {
              return SpeakMode.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(7);
    }
    
    private static final SpeakMode[] VALUES = {
      Normal, Whisper, Emote, 
    };
    
    public static SpeakMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private SpeakMode(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.SpeakMode)
  }
  
  public enum OperatorAction
      implements com.google.protobuf.ProtocolMessageEnum {
    Designate(0, 0),
    Resign(1, 1),
    Kick(2, 2),
    Ban(3, 3),
    ;
    
    public static final int Designate_VALUE = 0;
    public static final int Resign_VALUE = 1;
    public static final int Kick_VALUE = 2;
    public static final int Ban_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static OperatorAction valueOf(int value) {
      switch (value) {
        case 0: return Designate;
        case 1: return Resign;
        case 2: return Kick;
        case 3: return Ban;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<OperatorAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<OperatorAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OperatorAction>() {
            public OperatorAction findValueByNumber(int number) {
              return OperatorAction.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(8);
    }
    
    private static final OperatorAction[] VALUES = {
      Designate, Resign, Kick, Ban, 
    };
    
    public static OperatorAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private OperatorAction(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.OperatorAction)
  }
  
  public enum GameStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    Play(0, 0),
    Paused(1, 1),
    Victory(2, 2),
    Forfeit(3, 3),
    Stalemate(4, 4),
    ;
    
    public static final int Play_VALUE = 0;
    public static final int Paused_VALUE = 1;
    public static final int Victory_VALUE = 2;
    public static final int Forfeit_VALUE = 3;
    public static final int Stalemate_VALUE = 4;
    
    
    public final int getNumber() { return value; }
    
    public static GameStatus valueOf(int value) {
      switch (value) {
        case 0: return Play;
        case 1: return Paused;
        case 2: return Victory;
        case 3: return Forfeit;
        case 4: return Stalemate;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<GameStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<GameStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GameStatus>() {
            public GameStatus findValueByNumber(int number) {
              return GameStatus.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.getDescriptor().getEnumTypes().get(9);
    }
    
    private static final GameStatus[] VALUES = {
      Play, Paused, Victory, Forfeit, Stalemate, 
    };
    
    public static GameStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private GameStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.GameStatus)
  }
  
  public interface EnvelopeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .com.richardpianka.chess.network.HandshakeRequest HandshakeRequest = 1;
    boolean hasHandshakeRequest();
    com.richardpianka.chess.network.Contracts.HandshakeRequest getHandshakeRequest();
    com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder getHandshakeRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.HandshakeResponse HandshakeResponse = 2;
    boolean hasHandshakeResponse();
    com.richardpianka.chess.network.Contracts.HandshakeResponse getHandshakeResponse();
    com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder getHandshakeResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.IdentifyRequest IdentifyRequest = 3;
    boolean hasIdentifyRequest();
    com.richardpianka.chess.network.Contracts.IdentifyRequest getIdentifyRequest();
    com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder getIdentifyRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.IdentifyResponse IdentifyResponse = 4;
    boolean hasIdentifyResponse();
    com.richardpianka.chess.network.Contracts.IdentifyResponse getIdentifyResponse();
    com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder getIdentifyResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinChatRequest JoinChatRequest = 5;
    boolean hasJoinChatRequest();
    com.richardpianka.chess.network.Contracts.JoinChatRequest getJoinChatRequest();
    com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder getJoinChatRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinChatResponse JoinChatResponse = 6;
    boolean hasJoinChatResponse();
    com.richardpianka.chess.network.Contracts.JoinChatResponse getJoinChatResponse();
    com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder getJoinChatResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.RoomListRequest RoomListRequest = 7;
    boolean hasRoomListRequest();
    com.richardpianka.chess.network.Contracts.RoomListRequest getRoomListRequest();
    com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder getRoomListRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.RoomListResponse RoomListResponse = 8;
    boolean hasRoomListResponse();
    com.richardpianka.chess.network.Contracts.RoomListResponse getRoomListResponse();
    com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder getRoomListResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinRoomRequest JoinRoomRequest = 9;
    boolean hasJoinRoomRequest();
    com.richardpianka.chess.network.Contracts.JoinRoomRequest getJoinRoomRequest();
    com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder getJoinRoomRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinRoomResponse JoinRoomResponse = 10;
    boolean hasJoinRoomResponse();
    com.richardpianka.chess.network.Contracts.JoinRoomResponse getJoinRoomResponse();
    com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder getJoinRoomResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.SpeakRequest SpeakRequest = 11;
    boolean hasSpeakRequest();
    com.richardpianka.chess.network.Contracts.SpeakRequest getSpeakRequest();
    com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder getSpeakRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.OperatorRequest OperatorRequest = 12;
    boolean hasOperatorRequest();
    com.richardpianka.chess.network.Contracts.OperatorRequest getOperatorRequest();
    com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder getOperatorRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.OperatorResponse OperatorResponse = 13;
    boolean hasOperatorResponse();
    com.richardpianka.chess.network.Contracts.OperatorResponse getOperatorResponse();
    com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder getOperatorResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.ChatRoomEvent ChatRoomEvent = 14;
    boolean hasChatRoomEvent();
    com.richardpianka.chess.network.Contracts.ChatRoomEvent getChatRoomEvent();
    com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder getChatRoomEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.ChatUserEvent ChatUserEvent = 15;
    boolean hasChatUserEvent();
    com.richardpianka.chess.network.Contracts.ChatUserEvent getChatUserEvent();
    com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder getChatUserEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.ChatSpeakEvent ChatSpeakEvent = 16;
    boolean hasChatSpeakEvent();
    com.richardpianka.chess.network.Contracts.ChatSpeakEvent getChatSpeakEvent();
    com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder getChatSpeakEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.GameListRequest GameListRequest = 17;
    boolean hasGameListRequest();
    com.richardpianka.chess.network.Contracts.GameListRequest getGameListRequest();
    com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder getGameListRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.GameListResponse GameListResponse = 18;
    boolean hasGameListResponse();
    com.richardpianka.chess.network.Contracts.GameListResponse getGameListResponse();
    com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder getGameListResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.CreateGameRequest CreateGameRequest = 19;
    boolean hasCreateGameRequest();
    com.richardpianka.chess.network.Contracts.CreateGameRequest getCreateGameRequest();
    com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder getCreateGameRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.CreateGameResponse CreateGameResponse = 20;
    boolean hasCreateGameResponse();
    com.richardpianka.chess.network.Contracts.CreateGameResponse getCreateGameResponse();
    com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder getCreateGameResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinGameRequest JoinGameRequest = 21;
    boolean hasJoinGameRequest();
    com.richardpianka.chess.network.Contracts.JoinGameRequest getJoinGameRequest();
    com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder getJoinGameRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.JoinGameResponse JoinGameResponse = 22;
    boolean hasJoinGameResponse();
    com.richardpianka.chess.network.Contracts.JoinGameResponse getJoinGameResponse();
    com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder getJoinGameResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.LeaveGameRequest LeaveGameRequest = 23;
    boolean hasLeaveGameRequest();
    com.richardpianka.chess.network.Contracts.LeaveGameRequest getLeaveGameRequest();
    com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder getLeaveGameRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.StartGameRequest StartGameRequest = 24;
    boolean hasStartGameRequest();
    com.richardpianka.chess.network.Contracts.StartGameRequest getStartGameRequest();
    com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder getStartGameRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.StartGameResponse StartGameResponse = 25;
    boolean hasStartGameResponse();
    com.richardpianka.chess.network.Contracts.StartGameResponse getStartGameResponse();
    com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder getStartGameResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.GameStartedEvent GameStartedEvent = 26;
    boolean hasGameStartedEvent();
    com.richardpianka.chess.network.Contracts.GameStartedEvent getGameStartedEvent();
    com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder getGameStartedEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.MovePieceRequest MovePieceRequest = 27;
    boolean hasMovePieceRequest();
    com.richardpianka.chess.network.Contracts.MovePieceRequest getMovePieceRequest();
    com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder getMovePieceRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.MovePieceResponse MovePieceResponse = 28;
    boolean hasMovePieceResponse();
    com.richardpianka.chess.network.Contracts.MovePieceResponse getMovePieceResponse();
    com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder getMovePieceResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.MovePieceEvent MovePieceEvent = 29;
    boolean hasMovePieceEvent();
    com.richardpianka.chess.network.Contracts.MovePieceEvent getMovePieceEvent();
    com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder getMovePieceEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceRequest SpecialMovePieceRequest = 30;
    boolean hasSpecialMovePieceRequest();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest getSpecialMovePieceRequest();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder getSpecialMovePieceRequestOrBuilder();
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceResponse SpecialMovePieceResponse = 31;
    boolean hasSpecialMovePieceResponse();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse getSpecialMovePieceResponse();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder getSpecialMovePieceResponseOrBuilder();
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceEvent SpecialMovePieceEvent = 32;
    boolean hasSpecialMovePieceEvent();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent getSpecialMovePieceEvent();
    com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder getSpecialMovePieceEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.GameStatusEvent GameStatusEvent = 34;
    boolean hasGameStatusEvent();
    com.richardpianka.chess.network.Contracts.GameStatusEvent getGameStatusEvent();
    com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder getGameStatusEventOrBuilder();
    
    // optional .com.richardpianka.chess.network.TimeLeftEvent TimeLeftEvent = 35;
    boolean hasTimeLeftEvent();
    com.richardpianka.chess.network.Contracts.TimeLeftEvent getTimeLeftEvent();
    com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder getTimeLeftEventOrBuilder();
  }
  public static final class Envelope extends
      com.google.protobuf.GeneratedMessage
      implements EnvelopeOrBuilder {
    // Use Envelope.newBuilder() to construct.
    private Envelope(Envelope.Builder builder) {
      super(builder);
    }
    private Envelope(boolean noInit) {}
    
    private static final Envelope defaultInstance;
    public static Envelope getDefaultInstance() {
      return defaultInstance;
    }
    
    public Envelope getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Envelope_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Envelope_fieldAccessorTable;
    }
    
    private int bitField0_;
    private int bitField1_;
    // optional .com.richardpianka.chess.network.HandshakeRequest HandshakeRequest = 1;
    public static final int HANDSHAKEREQUEST_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.HandshakeRequest handshakeRequest_;
    public boolean hasHandshakeRequest() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.HandshakeRequest getHandshakeRequest() {
      return handshakeRequest_;
    }
    public com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder getHandshakeRequestOrBuilder() {
      return handshakeRequest_;
    }
    
    // optional .com.richardpianka.chess.network.HandshakeResponse HandshakeResponse = 2;
    public static final int HANDSHAKERESPONSE_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.HandshakeResponse handshakeResponse_;
    public boolean hasHandshakeResponse() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.HandshakeResponse getHandshakeResponse() {
      return handshakeResponse_;
    }
    public com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder getHandshakeResponseOrBuilder() {
      return handshakeResponse_;
    }
    
    // optional .com.richardpianka.chess.network.IdentifyRequest IdentifyRequest = 3;
    public static final int IDENTIFYREQUEST_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.IdentifyRequest identifyRequest_;
    public boolean hasIdentifyRequest() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.IdentifyRequest getIdentifyRequest() {
      return identifyRequest_;
    }
    public com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder getIdentifyRequestOrBuilder() {
      return identifyRequest_;
    }
    
    // optional .com.richardpianka.chess.network.IdentifyResponse IdentifyResponse = 4;
    public static final int IDENTIFYRESPONSE_FIELD_NUMBER = 4;
    private com.richardpianka.chess.network.Contracts.IdentifyResponse identifyResponse_;
    public boolean hasIdentifyResponse() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public com.richardpianka.chess.network.Contracts.IdentifyResponse getIdentifyResponse() {
      return identifyResponse_;
    }
    public com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder getIdentifyResponseOrBuilder() {
      return identifyResponse_;
    }
    
    // optional .com.richardpianka.chess.network.JoinChatRequest JoinChatRequest = 5;
    public static final int JOINCHATREQUEST_FIELD_NUMBER = 5;
    private com.richardpianka.chess.network.Contracts.JoinChatRequest joinChatRequest_;
    public boolean hasJoinChatRequest() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public com.richardpianka.chess.network.Contracts.JoinChatRequest getJoinChatRequest() {
      return joinChatRequest_;
    }
    public com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder getJoinChatRequestOrBuilder() {
      return joinChatRequest_;
    }
    
    // optional .com.richardpianka.chess.network.JoinChatResponse JoinChatResponse = 6;
    public static final int JOINCHATRESPONSE_FIELD_NUMBER = 6;
    private com.richardpianka.chess.network.Contracts.JoinChatResponse joinChatResponse_;
    public boolean hasJoinChatResponse() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public com.richardpianka.chess.network.Contracts.JoinChatResponse getJoinChatResponse() {
      return joinChatResponse_;
    }
    public com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder getJoinChatResponseOrBuilder() {
      return joinChatResponse_;
    }
    
    // optional .com.richardpianka.chess.network.RoomListRequest RoomListRequest = 7;
    public static final int ROOMLISTREQUEST_FIELD_NUMBER = 7;
    private com.richardpianka.chess.network.Contracts.RoomListRequest roomListRequest_;
    public boolean hasRoomListRequest() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public com.richardpianka.chess.network.Contracts.RoomListRequest getRoomListRequest() {
      return roomListRequest_;
    }
    public com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder getRoomListRequestOrBuilder() {
      return roomListRequest_;
    }
    
    // optional .com.richardpianka.chess.network.RoomListResponse RoomListResponse = 8;
    public static final int ROOMLISTRESPONSE_FIELD_NUMBER = 8;
    private com.richardpianka.chess.network.Contracts.RoomListResponse roomListResponse_;
    public boolean hasRoomListResponse() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public com.richardpianka.chess.network.Contracts.RoomListResponse getRoomListResponse() {
      return roomListResponse_;
    }
    public com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder getRoomListResponseOrBuilder() {
      return roomListResponse_;
    }
    
    // optional .com.richardpianka.chess.network.JoinRoomRequest JoinRoomRequest = 9;
    public static final int JOINROOMREQUEST_FIELD_NUMBER = 9;
    private com.richardpianka.chess.network.Contracts.JoinRoomRequest joinRoomRequest_;
    public boolean hasJoinRoomRequest() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomRequest getJoinRoomRequest() {
      return joinRoomRequest_;
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder getJoinRoomRequestOrBuilder() {
      return joinRoomRequest_;
    }
    
    // optional .com.richardpianka.chess.network.JoinRoomResponse JoinRoomResponse = 10;
    public static final int JOINROOMRESPONSE_FIELD_NUMBER = 10;
    private com.richardpianka.chess.network.Contracts.JoinRoomResponse joinRoomResponse_;
    public boolean hasJoinRoomResponse() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomResponse getJoinRoomResponse() {
      return joinRoomResponse_;
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder getJoinRoomResponseOrBuilder() {
      return joinRoomResponse_;
    }
    
    // optional .com.richardpianka.chess.network.SpeakRequest SpeakRequest = 11;
    public static final int SPEAKREQUEST_FIELD_NUMBER = 11;
    private com.richardpianka.chess.network.Contracts.SpeakRequest speakRequest_;
    public boolean hasSpeakRequest() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public com.richardpianka.chess.network.Contracts.SpeakRequest getSpeakRequest() {
      return speakRequest_;
    }
    public com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder getSpeakRequestOrBuilder() {
      return speakRequest_;
    }
    
    // optional .com.richardpianka.chess.network.OperatorRequest OperatorRequest = 12;
    public static final int OPERATORREQUEST_FIELD_NUMBER = 12;
    private com.richardpianka.chess.network.Contracts.OperatorRequest operatorRequest_;
    public boolean hasOperatorRequest() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public com.richardpianka.chess.network.Contracts.OperatorRequest getOperatorRequest() {
      return operatorRequest_;
    }
    public com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder getOperatorRequestOrBuilder() {
      return operatorRequest_;
    }
    
    // optional .com.richardpianka.chess.network.OperatorResponse OperatorResponse = 13;
    public static final int OPERATORRESPONSE_FIELD_NUMBER = 13;
    private com.richardpianka.chess.network.Contracts.OperatorResponse operatorResponse_;
    public boolean hasOperatorResponse() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public com.richardpianka.chess.network.Contracts.OperatorResponse getOperatorResponse() {
      return operatorResponse_;
    }
    public com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder getOperatorResponseOrBuilder() {
      return operatorResponse_;
    }
    
    // optional .com.richardpianka.chess.network.ChatRoomEvent ChatRoomEvent = 14;
    public static final int CHATROOMEVENT_FIELD_NUMBER = 14;
    private com.richardpianka.chess.network.Contracts.ChatRoomEvent chatRoomEvent_;
    public boolean hasChatRoomEvent() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public com.richardpianka.chess.network.Contracts.ChatRoomEvent getChatRoomEvent() {
      return chatRoomEvent_;
    }
    public com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder getChatRoomEventOrBuilder() {
      return chatRoomEvent_;
    }
    
    // optional .com.richardpianka.chess.network.ChatUserEvent ChatUserEvent = 15;
    public static final int CHATUSEREVENT_FIELD_NUMBER = 15;
    private com.richardpianka.chess.network.Contracts.ChatUserEvent chatUserEvent_;
    public boolean hasChatUserEvent() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public com.richardpianka.chess.network.Contracts.ChatUserEvent getChatUserEvent() {
      return chatUserEvent_;
    }
    public com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder getChatUserEventOrBuilder() {
      return chatUserEvent_;
    }
    
    // optional .com.richardpianka.chess.network.ChatSpeakEvent ChatSpeakEvent = 16;
    public static final int CHATSPEAKEVENT_FIELD_NUMBER = 16;
    private com.richardpianka.chess.network.Contracts.ChatSpeakEvent chatSpeakEvent_;
    public boolean hasChatSpeakEvent() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public com.richardpianka.chess.network.Contracts.ChatSpeakEvent getChatSpeakEvent() {
      return chatSpeakEvent_;
    }
    public com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder getChatSpeakEventOrBuilder() {
      return chatSpeakEvent_;
    }
    
    // optional .com.richardpianka.chess.network.GameListRequest GameListRequest = 17;
    public static final int GAMELISTREQUEST_FIELD_NUMBER = 17;
    private com.richardpianka.chess.network.Contracts.GameListRequest gameListRequest_;
    public boolean hasGameListRequest() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    public com.richardpianka.chess.network.Contracts.GameListRequest getGameListRequest() {
      return gameListRequest_;
    }
    public com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder getGameListRequestOrBuilder() {
      return gameListRequest_;
    }
    
    // optional .com.richardpianka.chess.network.GameListResponse GameListResponse = 18;
    public static final int GAMELISTRESPONSE_FIELD_NUMBER = 18;
    private com.richardpianka.chess.network.Contracts.GameListResponse gameListResponse_;
    public boolean hasGameListResponse() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    public com.richardpianka.chess.network.Contracts.GameListResponse getGameListResponse() {
      return gameListResponse_;
    }
    public com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder getGameListResponseOrBuilder() {
      return gameListResponse_;
    }
    
    // optional .com.richardpianka.chess.network.CreateGameRequest CreateGameRequest = 19;
    public static final int CREATEGAMEREQUEST_FIELD_NUMBER = 19;
    private com.richardpianka.chess.network.Contracts.CreateGameRequest createGameRequest_;
    public boolean hasCreateGameRequest() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    public com.richardpianka.chess.network.Contracts.CreateGameRequest getCreateGameRequest() {
      return createGameRequest_;
    }
    public com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder getCreateGameRequestOrBuilder() {
      return createGameRequest_;
    }
    
    // optional .com.richardpianka.chess.network.CreateGameResponse CreateGameResponse = 20;
    public static final int CREATEGAMERESPONSE_FIELD_NUMBER = 20;
    private com.richardpianka.chess.network.Contracts.CreateGameResponse createGameResponse_;
    public boolean hasCreateGameResponse() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    public com.richardpianka.chess.network.Contracts.CreateGameResponse getCreateGameResponse() {
      return createGameResponse_;
    }
    public com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder getCreateGameResponseOrBuilder() {
      return createGameResponse_;
    }
    
    // optional .com.richardpianka.chess.network.JoinGameRequest JoinGameRequest = 21;
    public static final int JOINGAMEREQUEST_FIELD_NUMBER = 21;
    private com.richardpianka.chess.network.Contracts.JoinGameRequest joinGameRequest_;
    public boolean hasJoinGameRequest() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    public com.richardpianka.chess.network.Contracts.JoinGameRequest getJoinGameRequest() {
      return joinGameRequest_;
    }
    public com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder getJoinGameRequestOrBuilder() {
      return joinGameRequest_;
    }
    
    // optional .com.richardpianka.chess.network.JoinGameResponse JoinGameResponse = 22;
    public static final int JOINGAMERESPONSE_FIELD_NUMBER = 22;
    private com.richardpianka.chess.network.Contracts.JoinGameResponse joinGameResponse_;
    public boolean hasJoinGameResponse() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    public com.richardpianka.chess.network.Contracts.JoinGameResponse getJoinGameResponse() {
      return joinGameResponse_;
    }
    public com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder getJoinGameResponseOrBuilder() {
      return joinGameResponse_;
    }
    
    // optional .com.richardpianka.chess.network.LeaveGameRequest LeaveGameRequest = 23;
    public static final int LEAVEGAMEREQUEST_FIELD_NUMBER = 23;
    private com.richardpianka.chess.network.Contracts.LeaveGameRequest leaveGameRequest_;
    public boolean hasLeaveGameRequest() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    public com.richardpianka.chess.network.Contracts.LeaveGameRequest getLeaveGameRequest() {
      return leaveGameRequest_;
    }
    public com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder getLeaveGameRequestOrBuilder() {
      return leaveGameRequest_;
    }
    
    // optional .com.richardpianka.chess.network.StartGameRequest StartGameRequest = 24;
    public static final int STARTGAMEREQUEST_FIELD_NUMBER = 24;
    private com.richardpianka.chess.network.Contracts.StartGameRequest startGameRequest_;
    public boolean hasStartGameRequest() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    public com.richardpianka.chess.network.Contracts.StartGameRequest getStartGameRequest() {
      return startGameRequest_;
    }
    public com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder getStartGameRequestOrBuilder() {
      return startGameRequest_;
    }
    
    // optional .com.richardpianka.chess.network.StartGameResponse StartGameResponse = 25;
    public static final int STARTGAMERESPONSE_FIELD_NUMBER = 25;
    private com.richardpianka.chess.network.Contracts.StartGameResponse startGameResponse_;
    public boolean hasStartGameResponse() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    public com.richardpianka.chess.network.Contracts.StartGameResponse getStartGameResponse() {
      return startGameResponse_;
    }
    public com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder getStartGameResponseOrBuilder() {
      return startGameResponse_;
    }
    
    // optional .com.richardpianka.chess.network.GameStartedEvent GameStartedEvent = 26;
    public static final int GAMESTARTEDEVENT_FIELD_NUMBER = 26;
    private com.richardpianka.chess.network.Contracts.GameStartedEvent gameStartedEvent_;
    public boolean hasGameStartedEvent() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    public com.richardpianka.chess.network.Contracts.GameStartedEvent getGameStartedEvent() {
      return gameStartedEvent_;
    }
    public com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder getGameStartedEventOrBuilder() {
      return gameStartedEvent_;
    }
    
    // optional .com.richardpianka.chess.network.MovePieceRequest MovePieceRequest = 27;
    public static final int MOVEPIECEREQUEST_FIELD_NUMBER = 27;
    private com.richardpianka.chess.network.Contracts.MovePieceRequest movePieceRequest_;
    public boolean hasMovePieceRequest() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceRequest getMovePieceRequest() {
      return movePieceRequest_;
    }
    public com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder getMovePieceRequestOrBuilder() {
      return movePieceRequest_;
    }
    
    // optional .com.richardpianka.chess.network.MovePieceResponse MovePieceResponse = 28;
    public static final int MOVEPIECERESPONSE_FIELD_NUMBER = 28;
    private com.richardpianka.chess.network.Contracts.MovePieceResponse movePieceResponse_;
    public boolean hasMovePieceResponse() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceResponse getMovePieceResponse() {
      return movePieceResponse_;
    }
    public com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder getMovePieceResponseOrBuilder() {
      return movePieceResponse_;
    }
    
    // optional .com.richardpianka.chess.network.MovePieceEvent MovePieceEvent = 29;
    public static final int MOVEPIECEEVENT_FIELD_NUMBER = 29;
    private com.richardpianka.chess.network.Contracts.MovePieceEvent movePieceEvent_;
    public boolean hasMovePieceEvent() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceEvent getMovePieceEvent() {
      return movePieceEvent_;
    }
    public com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder getMovePieceEventOrBuilder() {
      return movePieceEvent_;
    }
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceRequest SpecialMovePieceRequest = 30;
    public static final int SPECIALMOVEPIECEREQUEST_FIELD_NUMBER = 30;
    private com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest specialMovePieceRequest_;
    public boolean hasSpecialMovePieceRequest() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest getSpecialMovePieceRequest() {
      return specialMovePieceRequest_;
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder getSpecialMovePieceRequestOrBuilder() {
      return specialMovePieceRequest_;
    }
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceResponse SpecialMovePieceResponse = 31;
    public static final int SPECIALMOVEPIECERESPONSE_FIELD_NUMBER = 31;
    private com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse specialMovePieceResponse_;
    public boolean hasSpecialMovePieceResponse() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse getSpecialMovePieceResponse() {
      return specialMovePieceResponse_;
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder getSpecialMovePieceResponseOrBuilder() {
      return specialMovePieceResponse_;
    }
    
    // optional .com.richardpianka.chess.network.SpecialMovePieceEvent SpecialMovePieceEvent = 32;
    public static final int SPECIALMOVEPIECEEVENT_FIELD_NUMBER = 32;
    private com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent specialMovePieceEvent_;
    public boolean hasSpecialMovePieceEvent() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent getSpecialMovePieceEvent() {
      return specialMovePieceEvent_;
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder getSpecialMovePieceEventOrBuilder() {
      return specialMovePieceEvent_;
    }
    
    // optional .com.richardpianka.chess.network.GameStatusEvent GameStatusEvent = 34;
    public static final int GAMESTATUSEVENT_FIELD_NUMBER = 34;
    private com.richardpianka.chess.network.Contracts.GameStatusEvent gameStatusEvent_;
    public boolean hasGameStatusEvent() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.GameStatusEvent getGameStatusEvent() {
      return gameStatusEvent_;
    }
    public com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder getGameStatusEventOrBuilder() {
      return gameStatusEvent_;
    }
    
    // optional .com.richardpianka.chess.network.TimeLeftEvent TimeLeftEvent = 35;
    public static final int TIMELEFTEVENT_FIELD_NUMBER = 35;
    private com.richardpianka.chess.network.Contracts.TimeLeftEvent timeLeftEvent_;
    public boolean hasTimeLeftEvent() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.TimeLeftEvent getTimeLeftEvent() {
      return timeLeftEvent_;
    }
    public com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder getTimeLeftEventOrBuilder() {
      return timeLeftEvent_;
    }
    
    private void initFields() {
      handshakeRequest_ = com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance();
      handshakeResponse_ = com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance();
      identifyRequest_ = com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance();
      identifyResponse_ = com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance();
      joinChatRequest_ = com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance();
      joinChatResponse_ = com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance();
      roomListRequest_ = com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance();
      roomListResponse_ = com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance();
      joinRoomRequest_ = com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance();
      joinRoomResponse_ = com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance();
      speakRequest_ = com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance();
      operatorRequest_ = com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance();
      operatorResponse_ = com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance();
      chatRoomEvent_ = com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance();
      chatUserEvent_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance();
      chatSpeakEvent_ = com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance();
      gameListRequest_ = com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance();
      gameListResponse_ = com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance();
      createGameRequest_ = com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance();
      createGameResponse_ = com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance();
      joinGameRequest_ = com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance();
      joinGameResponse_ = com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance();
      leaveGameRequest_ = com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance();
      startGameRequest_ = com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance();
      startGameResponse_ = com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance();
      gameStartedEvent_ = com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance();
      movePieceRequest_ = com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance();
      movePieceResponse_ = com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance();
      movePieceEvent_ = com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance();
      specialMovePieceRequest_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance();
      specialMovePieceResponse_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance();
      specialMovePieceEvent_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance();
      gameStatusEvent_ = com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance();
      timeLeftEvent_ = com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasHandshakeRequest()) {
        if (!getHandshakeRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasHandshakeResponse()) {
        if (!getHandshakeResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIdentifyRequest()) {
        if (!getIdentifyRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasIdentifyResponse()) {
        if (!getIdentifyResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoinChatResponse()) {
        if (!getJoinChatResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRoomListResponse()) {
        if (!getRoomListResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoinRoomRequest()) {
        if (!getJoinRoomRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoinRoomResponse()) {
        if (!getJoinRoomResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpeakRequest()) {
        if (!getSpeakRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasOperatorRequest()) {
        if (!getOperatorRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasOperatorResponse()) {
        if (!getOperatorResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasChatRoomEvent()) {
        if (!getChatRoomEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasChatUserEvent()) {
        if (!getChatUserEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasChatSpeakEvent()) {
        if (!getChatSpeakEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGameListResponse()) {
        if (!getGameListResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCreateGameRequest()) {
        if (!getCreateGameRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasCreateGameResponse()) {
        if (!getCreateGameResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoinGameRequest()) {
        if (!getJoinGameRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoinGameResponse()) {
        if (!getJoinGameResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStartGameResponse()) {
        if (!getStartGameResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGameStartedEvent()) {
        if (!getGameStartedEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMovePieceRequest()) {
        if (!getMovePieceRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMovePieceResponse()) {
        if (!getMovePieceResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMovePieceEvent()) {
        if (!getMovePieceEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpecialMovePieceRequest()) {
        if (!getSpecialMovePieceRequest().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpecialMovePieceResponse()) {
        if (!getSpecialMovePieceResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpecialMovePieceEvent()) {
        if (!getSpecialMovePieceEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGameStatusEvent()) {
        if (!getGameStatusEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTimeLeftEvent()) {
        if (!getTimeLeftEvent().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, handshakeRequest_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, handshakeResponse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, identifyRequest_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, identifyResponse_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, joinChatRequest_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, joinChatResponse_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, roomListRequest_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, roomListResponse_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, joinRoomRequest_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, joinRoomResponse_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, speakRequest_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, operatorRequest_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, operatorResponse_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, chatRoomEvent_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, chatUserEvent_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, chatSpeakEvent_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, gameListRequest_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, gameListResponse_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(19, createGameRequest_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(20, createGameResponse_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(21, joinGameRequest_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(22, joinGameResponse_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(23, leaveGameRequest_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(24, startGameRequest_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(25, startGameResponse_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(26, gameStartedEvent_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(27, movePieceRequest_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(28, movePieceResponse_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(29, movePieceEvent_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(30, specialMovePieceRequest_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(31, specialMovePieceResponse_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(32, specialMovePieceEvent_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(34, gameStatusEvent_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(35, timeLeftEvent_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, handshakeRequest_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, handshakeResponse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, identifyRequest_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, identifyResponse_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, joinChatRequest_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, joinChatResponse_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, roomListRequest_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, roomListResponse_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, joinRoomRequest_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, joinRoomResponse_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, speakRequest_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, operatorRequest_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, operatorResponse_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, chatRoomEvent_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, chatUserEvent_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, chatSpeakEvent_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, gameListRequest_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, gameListResponse_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, createGameRequest_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, createGameResponse_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, joinGameRequest_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, joinGameResponse_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, leaveGameRequest_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, startGameRequest_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, startGameResponse_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, gameStartedEvent_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, movePieceRequest_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, movePieceResponse_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, movePieceEvent_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, specialMovePieceRequest_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, specialMovePieceResponse_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, specialMovePieceEvent_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, gameStatusEvent_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, timeLeftEvent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Envelope parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Envelope.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Envelope.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Envelope.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Envelope.Builder newBuilder(com.richardpianka.chess.network.Contracts.Envelope prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Envelope.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Envelope.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Envelope.Builder builder = new com.richardpianka.chess.network.Contracts.Envelope.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.EnvelopeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Envelope_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Envelope_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Envelope.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHandshakeRequestFieldBuilder();
          getHandshakeResponseFieldBuilder();
          getIdentifyRequestFieldBuilder();
          getIdentifyResponseFieldBuilder();
          getJoinChatRequestFieldBuilder();
          getJoinChatResponseFieldBuilder();
          getRoomListRequestFieldBuilder();
          getRoomListResponseFieldBuilder();
          getJoinRoomRequestFieldBuilder();
          getJoinRoomResponseFieldBuilder();
          getSpeakRequestFieldBuilder();
          getOperatorRequestFieldBuilder();
          getOperatorResponseFieldBuilder();
          getChatRoomEventFieldBuilder();
          getChatUserEventFieldBuilder();
          getChatSpeakEventFieldBuilder();
          getGameListRequestFieldBuilder();
          getGameListResponseFieldBuilder();
          getCreateGameRequestFieldBuilder();
          getCreateGameResponseFieldBuilder();
          getJoinGameRequestFieldBuilder();
          getJoinGameResponseFieldBuilder();
          getLeaveGameRequestFieldBuilder();
          getStartGameRequestFieldBuilder();
          getStartGameResponseFieldBuilder();
          getGameStartedEventFieldBuilder();
          getMovePieceRequestFieldBuilder();
          getMovePieceResponseFieldBuilder();
          getMovePieceEventFieldBuilder();
          getSpecialMovePieceRequestFieldBuilder();
          getSpecialMovePieceResponseFieldBuilder();
          getSpecialMovePieceEventFieldBuilder();
          getGameStatusEventFieldBuilder();
          getTimeLeftEventFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (handshakeRequestBuilder_ == null) {
          handshakeRequest_ = com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance();
        } else {
          handshakeRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (handshakeResponseBuilder_ == null) {
          handshakeResponse_ = com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance();
        } else {
          handshakeResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (identifyRequestBuilder_ == null) {
          identifyRequest_ = com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance();
        } else {
          identifyRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (identifyResponseBuilder_ == null) {
          identifyResponse_ = com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance();
        } else {
          identifyResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (joinChatRequestBuilder_ == null) {
          joinChatRequest_ = com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance();
        } else {
          joinChatRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (joinChatResponseBuilder_ == null) {
          joinChatResponse_ = com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance();
        } else {
          joinChatResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (roomListRequestBuilder_ == null) {
          roomListRequest_ = com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance();
        } else {
          roomListRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (roomListResponseBuilder_ == null) {
          roomListResponse_ = com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance();
        } else {
          roomListResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (joinRoomRequestBuilder_ == null) {
          joinRoomRequest_ = com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance();
        } else {
          joinRoomRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (joinRoomResponseBuilder_ == null) {
          joinRoomResponse_ = com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance();
        } else {
          joinRoomResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (speakRequestBuilder_ == null) {
          speakRequest_ = com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance();
        } else {
          speakRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (operatorRequestBuilder_ == null) {
          operatorRequest_ = com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance();
        } else {
          operatorRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (operatorResponseBuilder_ == null) {
          operatorResponse_ = com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance();
        } else {
          operatorResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (chatRoomEventBuilder_ == null) {
          chatRoomEvent_ = com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance();
        } else {
          chatRoomEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (chatUserEventBuilder_ == null) {
          chatUserEvent_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance();
        } else {
          chatUserEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (chatSpeakEventBuilder_ == null) {
          chatSpeakEvent_ = com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance();
        } else {
          chatSpeakEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (gameListRequestBuilder_ == null) {
          gameListRequest_ = com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance();
        } else {
          gameListRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (gameListResponseBuilder_ == null) {
          gameListResponse_ = com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance();
        } else {
          gameListResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (createGameRequestBuilder_ == null) {
          createGameRequest_ = com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance();
        } else {
          createGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (createGameResponseBuilder_ == null) {
          createGameResponse_ = com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance();
        } else {
          createGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (joinGameRequestBuilder_ == null) {
          joinGameRequest_ = com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance();
        } else {
          joinGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (joinGameResponseBuilder_ == null) {
          joinGameResponse_ = com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance();
        } else {
          joinGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (leaveGameRequestBuilder_ == null) {
          leaveGameRequest_ = com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance();
        } else {
          leaveGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (startGameRequestBuilder_ == null) {
          startGameRequest_ = com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance();
        } else {
          startGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (startGameResponseBuilder_ == null) {
          startGameResponse_ = com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance();
        } else {
          startGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (gameStartedEventBuilder_ == null) {
          gameStartedEvent_ = com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance();
        } else {
          gameStartedEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (movePieceRequestBuilder_ == null) {
          movePieceRequest_ = com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance();
        } else {
          movePieceRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (movePieceResponseBuilder_ == null) {
          movePieceResponse_ = com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance();
        } else {
          movePieceResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (movePieceEventBuilder_ == null) {
          movePieceEvent_ = com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance();
        } else {
          movePieceEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (specialMovePieceRequestBuilder_ == null) {
          specialMovePieceRequest_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance();
        } else {
          specialMovePieceRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (specialMovePieceResponseBuilder_ == null) {
          specialMovePieceResponse_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance();
        } else {
          specialMovePieceResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (specialMovePieceEventBuilder_ == null) {
          specialMovePieceEvent_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance();
        } else {
          specialMovePieceEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (gameStatusEventBuilder_ == null) {
          gameStatusEvent_ = com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance();
        } else {
          gameStatusEventBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (timeLeftEventBuilder_ == null) {
          timeLeftEvent_ = com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance();
        } else {
          timeLeftEventBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Envelope.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Envelope getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Envelope.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Envelope build() {
        com.richardpianka.chess.network.Contracts.Envelope result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Envelope buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Envelope result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Envelope buildPartial() {
        com.richardpianka.chess.network.Contracts.Envelope result = new com.richardpianka.chess.network.Contracts.Envelope(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (handshakeRequestBuilder_ == null) {
          result.handshakeRequest_ = handshakeRequest_;
        } else {
          result.handshakeRequest_ = handshakeRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (handshakeResponseBuilder_ == null) {
          result.handshakeResponse_ = handshakeResponse_;
        } else {
          result.handshakeResponse_ = handshakeResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (identifyRequestBuilder_ == null) {
          result.identifyRequest_ = identifyRequest_;
        } else {
          result.identifyRequest_ = identifyRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (identifyResponseBuilder_ == null) {
          result.identifyResponse_ = identifyResponse_;
        } else {
          result.identifyResponse_ = identifyResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (joinChatRequestBuilder_ == null) {
          result.joinChatRequest_ = joinChatRequest_;
        } else {
          result.joinChatRequest_ = joinChatRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (joinChatResponseBuilder_ == null) {
          result.joinChatResponse_ = joinChatResponse_;
        } else {
          result.joinChatResponse_ = joinChatResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (roomListRequestBuilder_ == null) {
          result.roomListRequest_ = roomListRequest_;
        } else {
          result.roomListRequest_ = roomListRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (roomListResponseBuilder_ == null) {
          result.roomListResponse_ = roomListResponse_;
        } else {
          result.roomListResponse_ = roomListResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (joinRoomRequestBuilder_ == null) {
          result.joinRoomRequest_ = joinRoomRequest_;
        } else {
          result.joinRoomRequest_ = joinRoomRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (joinRoomResponseBuilder_ == null) {
          result.joinRoomResponse_ = joinRoomResponse_;
        } else {
          result.joinRoomResponse_ = joinRoomResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (speakRequestBuilder_ == null) {
          result.speakRequest_ = speakRequest_;
        } else {
          result.speakRequest_ = speakRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (operatorRequestBuilder_ == null) {
          result.operatorRequest_ = operatorRequest_;
        } else {
          result.operatorRequest_ = operatorRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (operatorResponseBuilder_ == null) {
          result.operatorResponse_ = operatorResponse_;
        } else {
          result.operatorResponse_ = operatorResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (chatRoomEventBuilder_ == null) {
          result.chatRoomEvent_ = chatRoomEvent_;
        } else {
          result.chatRoomEvent_ = chatRoomEventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (chatUserEventBuilder_ == null) {
          result.chatUserEvent_ = chatUserEvent_;
        } else {
          result.chatUserEvent_ = chatUserEventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (chatSpeakEventBuilder_ == null) {
          result.chatSpeakEvent_ = chatSpeakEvent_;
        } else {
          result.chatSpeakEvent_ = chatSpeakEventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (gameListRequestBuilder_ == null) {
          result.gameListRequest_ = gameListRequest_;
        } else {
          result.gameListRequest_ = gameListRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (gameListResponseBuilder_ == null) {
          result.gameListResponse_ = gameListResponse_;
        } else {
          result.gameListResponse_ = gameListResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (createGameRequestBuilder_ == null) {
          result.createGameRequest_ = createGameRequest_;
        } else {
          result.createGameRequest_ = createGameRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (createGameResponseBuilder_ == null) {
          result.createGameResponse_ = createGameResponse_;
        } else {
          result.createGameResponse_ = createGameResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (joinGameRequestBuilder_ == null) {
          result.joinGameRequest_ = joinGameRequest_;
        } else {
          result.joinGameRequest_ = joinGameRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (joinGameResponseBuilder_ == null) {
          result.joinGameResponse_ = joinGameResponse_;
        } else {
          result.joinGameResponse_ = joinGameResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        if (leaveGameRequestBuilder_ == null) {
          result.leaveGameRequest_ = leaveGameRequest_;
        } else {
          result.leaveGameRequest_ = leaveGameRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (startGameRequestBuilder_ == null) {
          result.startGameRequest_ = startGameRequest_;
        } else {
          result.startGameRequest_ = startGameRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (startGameResponseBuilder_ == null) {
          result.startGameResponse_ = startGameResponse_;
        } else {
          result.startGameResponse_ = startGameResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        if (gameStartedEventBuilder_ == null) {
          result.gameStartedEvent_ = gameStartedEvent_;
        } else {
          result.gameStartedEvent_ = gameStartedEventBuilder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        if (movePieceRequestBuilder_ == null) {
          result.movePieceRequest_ = movePieceRequest_;
        } else {
          result.movePieceRequest_ = movePieceRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        if (movePieceResponseBuilder_ == null) {
          result.movePieceResponse_ = movePieceResponse_;
        } else {
          result.movePieceResponse_ = movePieceResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        if (movePieceEventBuilder_ == null) {
          result.movePieceEvent_ = movePieceEvent_;
        } else {
          result.movePieceEvent_ = movePieceEventBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        if (specialMovePieceRequestBuilder_ == null) {
          result.specialMovePieceRequest_ = specialMovePieceRequest_;
        } else {
          result.specialMovePieceRequest_ = specialMovePieceRequestBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        if (specialMovePieceResponseBuilder_ == null) {
          result.specialMovePieceResponse_ = specialMovePieceResponse_;
        } else {
          result.specialMovePieceResponse_ = specialMovePieceResponseBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        if (specialMovePieceEventBuilder_ == null) {
          result.specialMovePieceEvent_ = specialMovePieceEvent_;
        } else {
          result.specialMovePieceEvent_ = specialMovePieceEventBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        if (gameStatusEventBuilder_ == null) {
          result.gameStatusEvent_ = gameStatusEvent_;
        } else {
          result.gameStatusEvent_ = gameStatusEventBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        if (timeLeftEventBuilder_ == null) {
          result.timeLeftEvent_ = timeLeftEvent_;
        } else {
          result.timeLeftEvent_ = timeLeftEventBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Envelope.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Envelope) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Envelope)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Envelope.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Envelope other) {
        if (other == com.richardpianka.chess.network.Contracts.Envelope.getDefaultInstance()) return this;
        if (other.hasHandshakeRequest()) {
          mergeHandshakeRequest(other.getHandshakeRequest());
        }
        if (other.hasHandshakeResponse()) {
          mergeHandshakeResponse(other.getHandshakeResponse());
        }
        if (other.hasIdentifyRequest()) {
          mergeIdentifyRequest(other.getIdentifyRequest());
        }
        if (other.hasIdentifyResponse()) {
          mergeIdentifyResponse(other.getIdentifyResponse());
        }
        if (other.hasJoinChatRequest()) {
          mergeJoinChatRequest(other.getJoinChatRequest());
        }
        if (other.hasJoinChatResponse()) {
          mergeJoinChatResponse(other.getJoinChatResponse());
        }
        if (other.hasRoomListRequest()) {
          mergeRoomListRequest(other.getRoomListRequest());
        }
        if (other.hasRoomListResponse()) {
          mergeRoomListResponse(other.getRoomListResponse());
        }
        if (other.hasJoinRoomRequest()) {
          mergeJoinRoomRequest(other.getJoinRoomRequest());
        }
        if (other.hasJoinRoomResponse()) {
          mergeJoinRoomResponse(other.getJoinRoomResponse());
        }
        if (other.hasSpeakRequest()) {
          mergeSpeakRequest(other.getSpeakRequest());
        }
        if (other.hasOperatorRequest()) {
          mergeOperatorRequest(other.getOperatorRequest());
        }
        if (other.hasOperatorResponse()) {
          mergeOperatorResponse(other.getOperatorResponse());
        }
        if (other.hasChatRoomEvent()) {
          mergeChatRoomEvent(other.getChatRoomEvent());
        }
        if (other.hasChatUserEvent()) {
          mergeChatUserEvent(other.getChatUserEvent());
        }
        if (other.hasChatSpeakEvent()) {
          mergeChatSpeakEvent(other.getChatSpeakEvent());
        }
        if (other.hasGameListRequest()) {
          mergeGameListRequest(other.getGameListRequest());
        }
        if (other.hasGameListResponse()) {
          mergeGameListResponse(other.getGameListResponse());
        }
        if (other.hasCreateGameRequest()) {
          mergeCreateGameRequest(other.getCreateGameRequest());
        }
        if (other.hasCreateGameResponse()) {
          mergeCreateGameResponse(other.getCreateGameResponse());
        }
        if (other.hasJoinGameRequest()) {
          mergeJoinGameRequest(other.getJoinGameRequest());
        }
        if (other.hasJoinGameResponse()) {
          mergeJoinGameResponse(other.getJoinGameResponse());
        }
        if (other.hasLeaveGameRequest()) {
          mergeLeaveGameRequest(other.getLeaveGameRequest());
        }
        if (other.hasStartGameRequest()) {
          mergeStartGameRequest(other.getStartGameRequest());
        }
        if (other.hasStartGameResponse()) {
          mergeStartGameResponse(other.getStartGameResponse());
        }
        if (other.hasGameStartedEvent()) {
          mergeGameStartedEvent(other.getGameStartedEvent());
        }
        if (other.hasMovePieceRequest()) {
          mergeMovePieceRequest(other.getMovePieceRequest());
        }
        if (other.hasMovePieceResponse()) {
          mergeMovePieceResponse(other.getMovePieceResponse());
        }
        if (other.hasMovePieceEvent()) {
          mergeMovePieceEvent(other.getMovePieceEvent());
        }
        if (other.hasSpecialMovePieceRequest()) {
          mergeSpecialMovePieceRequest(other.getSpecialMovePieceRequest());
        }
        if (other.hasSpecialMovePieceResponse()) {
          mergeSpecialMovePieceResponse(other.getSpecialMovePieceResponse());
        }
        if (other.hasSpecialMovePieceEvent()) {
          mergeSpecialMovePieceEvent(other.getSpecialMovePieceEvent());
        }
        if (other.hasGameStatusEvent()) {
          mergeGameStatusEvent(other.getGameStatusEvent());
        }
        if (other.hasTimeLeftEvent()) {
          mergeTimeLeftEvent(other.getTimeLeftEvent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasHandshakeRequest()) {
          if (!getHandshakeRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasHandshakeResponse()) {
          if (!getHandshakeResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasIdentifyRequest()) {
          if (!getIdentifyRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasIdentifyResponse()) {
          if (!getIdentifyResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoinChatResponse()) {
          if (!getJoinChatResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasRoomListResponse()) {
          if (!getRoomListResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoinRoomRequest()) {
          if (!getJoinRoomRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoinRoomResponse()) {
          if (!getJoinRoomResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpeakRequest()) {
          if (!getSpeakRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasOperatorRequest()) {
          if (!getOperatorRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasOperatorResponse()) {
          if (!getOperatorResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasChatRoomEvent()) {
          if (!getChatRoomEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasChatUserEvent()) {
          if (!getChatUserEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasChatSpeakEvent()) {
          if (!getChatSpeakEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasGameListResponse()) {
          if (!getGameListResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasCreateGameRequest()) {
          if (!getCreateGameRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasCreateGameResponse()) {
          if (!getCreateGameResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoinGameRequest()) {
          if (!getJoinGameRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoinGameResponse()) {
          if (!getJoinGameResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasStartGameResponse()) {
          if (!getStartGameResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasGameStartedEvent()) {
          if (!getGameStartedEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasMovePieceRequest()) {
          if (!getMovePieceRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasMovePieceResponse()) {
          if (!getMovePieceResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasMovePieceEvent()) {
          if (!getMovePieceEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpecialMovePieceRequest()) {
          if (!getSpecialMovePieceRequest().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpecialMovePieceResponse()) {
          if (!getSpecialMovePieceResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpecialMovePieceEvent()) {
          if (!getSpecialMovePieceEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasGameStatusEvent()) {
          if (!getGameStatusEvent().isInitialized()) {
            
            return false;
          }
        }
        if (hasTimeLeftEvent()) {
          if (!getTimeLeftEvent().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.HandshakeRequest.newBuilder();
              if (hasHandshakeRequest()) {
                subBuilder.mergeFrom(getHandshakeRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHandshakeRequest(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.HandshakeResponse.newBuilder();
              if (hasHandshakeResponse()) {
                subBuilder.mergeFrom(getHandshakeResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHandshakeResponse(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.IdentifyRequest.newBuilder();
              if (hasIdentifyRequest()) {
                subBuilder.mergeFrom(getIdentifyRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIdentifyRequest(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.IdentifyResponse.newBuilder();
              if (hasIdentifyResponse()) {
                subBuilder.mergeFrom(getIdentifyResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIdentifyResponse(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinChatRequest.newBuilder();
              if (hasJoinChatRequest()) {
                subBuilder.mergeFrom(getJoinChatRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinChatRequest(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinChatResponse.newBuilder();
              if (hasJoinChatResponse()) {
                subBuilder.mergeFrom(getJoinChatResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinChatResponse(subBuilder.buildPartial());
              break;
            }
            case 58: {
              com.richardpianka.chess.network.Contracts.RoomListRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.RoomListRequest.newBuilder();
              if (hasRoomListRequest()) {
                subBuilder.mergeFrom(getRoomListRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoomListRequest(subBuilder.buildPartial());
              break;
            }
            case 66: {
              com.richardpianka.chess.network.Contracts.RoomListResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.RoomListResponse.newBuilder();
              if (hasRoomListResponse()) {
                subBuilder.mergeFrom(getRoomListResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoomListResponse(subBuilder.buildPartial());
              break;
            }
            case 74: {
              com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinRoomRequest.newBuilder();
              if (hasJoinRoomRequest()) {
                subBuilder.mergeFrom(getJoinRoomRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinRoomRequest(subBuilder.buildPartial());
              break;
            }
            case 82: {
              com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinRoomResponse.newBuilder();
              if (hasJoinRoomResponse()) {
                subBuilder.mergeFrom(getJoinRoomResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinRoomResponse(subBuilder.buildPartial());
              break;
            }
            case 90: {
              com.richardpianka.chess.network.Contracts.SpeakRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpeakRequest.newBuilder();
              if (hasSpeakRequest()) {
                subBuilder.mergeFrom(getSpeakRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSpeakRequest(subBuilder.buildPartial());
              break;
            }
            case 98: {
              com.richardpianka.chess.network.Contracts.OperatorRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.OperatorRequest.newBuilder();
              if (hasOperatorRequest()) {
                subBuilder.mergeFrom(getOperatorRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOperatorRequest(subBuilder.buildPartial());
              break;
            }
            case 106: {
              com.richardpianka.chess.network.Contracts.OperatorResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.OperatorResponse.newBuilder();
              if (hasOperatorResponse()) {
                subBuilder.mergeFrom(getOperatorResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOperatorResponse(subBuilder.buildPartial());
              break;
            }
            case 114: {
              com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.ChatRoomEvent.newBuilder();
              if (hasChatRoomEvent()) {
                subBuilder.mergeFrom(getChatRoomEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setChatRoomEvent(subBuilder.buildPartial());
              break;
            }
            case 122: {
              com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.ChatUserEvent.newBuilder();
              if (hasChatUserEvent()) {
                subBuilder.mergeFrom(getChatUserEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setChatUserEvent(subBuilder.buildPartial());
              break;
            }
            case 130: {
              com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.ChatSpeakEvent.newBuilder();
              if (hasChatSpeakEvent()) {
                subBuilder.mergeFrom(getChatSpeakEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setChatSpeakEvent(subBuilder.buildPartial());
              break;
            }
            case 138: {
              com.richardpianka.chess.network.Contracts.GameListRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.GameListRequest.newBuilder();
              if (hasGameListRequest()) {
                subBuilder.mergeFrom(getGameListRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameListRequest(subBuilder.buildPartial());
              break;
            }
            case 146: {
              com.richardpianka.chess.network.Contracts.GameListResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.GameListResponse.newBuilder();
              if (hasGameListResponse()) {
                subBuilder.mergeFrom(getGameListResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameListResponse(subBuilder.buildPartial());
              break;
            }
            case 154: {
              com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.CreateGameRequest.newBuilder();
              if (hasCreateGameRequest()) {
                subBuilder.mergeFrom(getCreateGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCreateGameRequest(subBuilder.buildPartial());
              break;
            }
            case 162: {
              com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.CreateGameResponse.newBuilder();
              if (hasCreateGameResponse()) {
                subBuilder.mergeFrom(getCreateGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCreateGameResponse(subBuilder.buildPartial());
              break;
            }
            case 170: {
              com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinGameRequest.newBuilder();
              if (hasJoinGameRequest()) {
                subBuilder.mergeFrom(getJoinGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinGameRequest(subBuilder.buildPartial());
              break;
            }
            case 178: {
              com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.JoinGameResponse.newBuilder();
              if (hasJoinGameResponse()) {
                subBuilder.mergeFrom(getJoinGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoinGameResponse(subBuilder.buildPartial());
              break;
            }
            case 186: {
              com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.LeaveGameRequest.newBuilder();
              if (hasLeaveGameRequest()) {
                subBuilder.mergeFrom(getLeaveGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLeaveGameRequest(subBuilder.buildPartial());
              break;
            }
            case 194: {
              com.richardpianka.chess.network.Contracts.StartGameRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.StartGameRequest.newBuilder();
              if (hasStartGameRequest()) {
                subBuilder.mergeFrom(getStartGameRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setStartGameRequest(subBuilder.buildPartial());
              break;
            }
            case 202: {
              com.richardpianka.chess.network.Contracts.StartGameResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.StartGameResponse.newBuilder();
              if (hasStartGameResponse()) {
                subBuilder.mergeFrom(getStartGameResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setStartGameResponse(subBuilder.buildPartial());
              break;
            }
            case 210: {
              com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.GameStartedEvent.newBuilder();
              if (hasGameStartedEvent()) {
                subBuilder.mergeFrom(getGameStartedEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameStartedEvent(subBuilder.buildPartial());
              break;
            }
            case 218: {
              com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.MovePieceRequest.newBuilder();
              if (hasMovePieceRequest()) {
                subBuilder.mergeFrom(getMovePieceRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMovePieceRequest(subBuilder.buildPartial());
              break;
            }
            case 226: {
              com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.MovePieceResponse.newBuilder();
              if (hasMovePieceResponse()) {
                subBuilder.mergeFrom(getMovePieceResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMovePieceResponse(subBuilder.buildPartial());
              break;
            }
            case 234: {
              com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.MovePieceEvent.newBuilder();
              if (hasMovePieceEvent()) {
                subBuilder.mergeFrom(getMovePieceEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMovePieceEvent(subBuilder.buildPartial());
              break;
            }
            case 242: {
              com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.newBuilder();
              if (hasSpecialMovePieceRequest()) {
                subBuilder.mergeFrom(getSpecialMovePieceRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSpecialMovePieceRequest(subBuilder.buildPartial());
              break;
            }
            case 250: {
              com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.newBuilder();
              if (hasSpecialMovePieceResponse()) {
                subBuilder.mergeFrom(getSpecialMovePieceResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSpecialMovePieceResponse(subBuilder.buildPartial());
              break;
            }
            case 258: {
              com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.newBuilder();
              if (hasSpecialMovePieceEvent()) {
                subBuilder.mergeFrom(getSpecialMovePieceEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSpecialMovePieceEvent(subBuilder.buildPartial());
              break;
            }
            case 274: {
              com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.GameStatusEvent.newBuilder();
              if (hasGameStatusEvent()) {
                subBuilder.mergeFrom(getGameStatusEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameStatusEvent(subBuilder.buildPartial());
              break;
            }
            case 282: {
              com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder subBuilder = com.richardpianka.chess.network.Contracts.TimeLeftEvent.newBuilder();
              if (hasTimeLeftEvent()) {
                subBuilder.mergeFrom(getTimeLeftEvent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTimeLeftEvent(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      private int bitField1_;
      
      // optional .com.richardpianka.chess.network.HandshakeRequest HandshakeRequest = 1;
      private com.richardpianka.chess.network.Contracts.HandshakeRequest handshakeRequest_ = com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.HandshakeRequest, com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder, com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder> handshakeRequestBuilder_;
      public boolean hasHandshakeRequest() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.HandshakeRequest getHandshakeRequest() {
        if (handshakeRequestBuilder_ == null) {
          return handshakeRequest_;
        } else {
          return handshakeRequestBuilder_.getMessage();
        }
      }
      public Builder setHandshakeRequest(com.richardpianka.chess.network.Contracts.HandshakeRequest value) {
        if (handshakeRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          handshakeRequest_ = value;
          onChanged();
        } else {
          handshakeRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setHandshakeRequest(
          com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder builderForValue) {
        if (handshakeRequestBuilder_ == null) {
          handshakeRequest_ = builderForValue.build();
          onChanged();
        } else {
          handshakeRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeHandshakeRequest(com.richardpianka.chess.network.Contracts.HandshakeRequest value) {
        if (handshakeRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              handshakeRequest_ != com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance()) {
            handshakeRequest_ =
              com.richardpianka.chess.network.Contracts.HandshakeRequest.newBuilder(handshakeRequest_).mergeFrom(value).buildPartial();
          } else {
            handshakeRequest_ = value;
          }
          onChanged();
        } else {
          handshakeRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearHandshakeRequest() {
        if (handshakeRequestBuilder_ == null) {
          handshakeRequest_ = com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance();
          onChanged();
        } else {
          handshakeRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder getHandshakeRequestBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHandshakeRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder getHandshakeRequestOrBuilder() {
        if (handshakeRequestBuilder_ != null) {
          return handshakeRequestBuilder_.getMessageOrBuilder();
        } else {
          return handshakeRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.HandshakeRequest, com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder, com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder> 
          getHandshakeRequestFieldBuilder() {
        if (handshakeRequestBuilder_ == null) {
          handshakeRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.HandshakeRequest, com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder, com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder>(
                  handshakeRequest_,
                  getParentForChildren(),
                  isClean());
          handshakeRequest_ = null;
        }
        return handshakeRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.HandshakeResponse HandshakeResponse = 2;
      private com.richardpianka.chess.network.Contracts.HandshakeResponse handshakeResponse_ = com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.HandshakeResponse, com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder, com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder> handshakeResponseBuilder_;
      public boolean hasHandshakeResponse() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.HandshakeResponse getHandshakeResponse() {
        if (handshakeResponseBuilder_ == null) {
          return handshakeResponse_;
        } else {
          return handshakeResponseBuilder_.getMessage();
        }
      }
      public Builder setHandshakeResponse(com.richardpianka.chess.network.Contracts.HandshakeResponse value) {
        if (handshakeResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          handshakeResponse_ = value;
          onChanged();
        } else {
          handshakeResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setHandshakeResponse(
          com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder builderForValue) {
        if (handshakeResponseBuilder_ == null) {
          handshakeResponse_ = builderForValue.build();
          onChanged();
        } else {
          handshakeResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeHandshakeResponse(com.richardpianka.chess.network.Contracts.HandshakeResponse value) {
        if (handshakeResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              handshakeResponse_ != com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance()) {
            handshakeResponse_ =
              com.richardpianka.chess.network.Contracts.HandshakeResponse.newBuilder(handshakeResponse_).mergeFrom(value).buildPartial();
          } else {
            handshakeResponse_ = value;
          }
          onChanged();
        } else {
          handshakeResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearHandshakeResponse() {
        if (handshakeResponseBuilder_ == null) {
          handshakeResponse_ = com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance();
          onChanged();
        } else {
          handshakeResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder getHandshakeResponseBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getHandshakeResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder getHandshakeResponseOrBuilder() {
        if (handshakeResponseBuilder_ != null) {
          return handshakeResponseBuilder_.getMessageOrBuilder();
        } else {
          return handshakeResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.HandshakeResponse, com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder, com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder> 
          getHandshakeResponseFieldBuilder() {
        if (handshakeResponseBuilder_ == null) {
          handshakeResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.HandshakeResponse, com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder, com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder>(
                  handshakeResponse_,
                  getParentForChildren(),
                  isClean());
          handshakeResponse_ = null;
        }
        return handshakeResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.IdentifyRequest IdentifyRequest = 3;
      private com.richardpianka.chess.network.Contracts.IdentifyRequest identifyRequest_ = com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.IdentifyRequest, com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder, com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder> identifyRequestBuilder_;
      public boolean hasIdentifyRequest() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.IdentifyRequest getIdentifyRequest() {
        if (identifyRequestBuilder_ == null) {
          return identifyRequest_;
        } else {
          return identifyRequestBuilder_.getMessage();
        }
      }
      public Builder setIdentifyRequest(com.richardpianka.chess.network.Contracts.IdentifyRequest value) {
        if (identifyRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identifyRequest_ = value;
          onChanged();
        } else {
          identifyRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setIdentifyRequest(
          com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder builderForValue) {
        if (identifyRequestBuilder_ == null) {
          identifyRequest_ = builderForValue.build();
          onChanged();
        } else {
          identifyRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeIdentifyRequest(com.richardpianka.chess.network.Contracts.IdentifyRequest value) {
        if (identifyRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              identifyRequest_ != com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance()) {
            identifyRequest_ =
              com.richardpianka.chess.network.Contracts.IdentifyRequest.newBuilder(identifyRequest_).mergeFrom(value).buildPartial();
          } else {
            identifyRequest_ = value;
          }
          onChanged();
        } else {
          identifyRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearIdentifyRequest() {
        if (identifyRequestBuilder_ == null) {
          identifyRequest_ = com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance();
          onChanged();
        } else {
          identifyRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder getIdentifyRequestBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getIdentifyRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder getIdentifyRequestOrBuilder() {
        if (identifyRequestBuilder_ != null) {
          return identifyRequestBuilder_.getMessageOrBuilder();
        } else {
          return identifyRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.IdentifyRequest, com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder, com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder> 
          getIdentifyRequestFieldBuilder() {
        if (identifyRequestBuilder_ == null) {
          identifyRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.IdentifyRequest, com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder, com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder>(
                  identifyRequest_,
                  getParentForChildren(),
                  isClean());
          identifyRequest_ = null;
        }
        return identifyRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.IdentifyResponse IdentifyResponse = 4;
      private com.richardpianka.chess.network.Contracts.IdentifyResponse identifyResponse_ = com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.IdentifyResponse, com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder, com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder> identifyResponseBuilder_;
      public boolean hasIdentifyResponse() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public com.richardpianka.chess.network.Contracts.IdentifyResponse getIdentifyResponse() {
        if (identifyResponseBuilder_ == null) {
          return identifyResponse_;
        } else {
          return identifyResponseBuilder_.getMessage();
        }
      }
      public Builder setIdentifyResponse(com.richardpianka.chess.network.Contracts.IdentifyResponse value) {
        if (identifyResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identifyResponse_ = value;
          onChanged();
        } else {
          identifyResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setIdentifyResponse(
          com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder builderForValue) {
        if (identifyResponseBuilder_ == null) {
          identifyResponse_ = builderForValue.build();
          onChanged();
        } else {
          identifyResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeIdentifyResponse(com.richardpianka.chess.network.Contracts.IdentifyResponse value) {
        if (identifyResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              identifyResponse_ != com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance()) {
            identifyResponse_ =
              com.richardpianka.chess.network.Contracts.IdentifyResponse.newBuilder(identifyResponse_).mergeFrom(value).buildPartial();
          } else {
            identifyResponse_ = value;
          }
          onChanged();
        } else {
          identifyResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearIdentifyResponse() {
        if (identifyResponseBuilder_ == null) {
          identifyResponse_ = com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance();
          onChanged();
        } else {
          identifyResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder getIdentifyResponseBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getIdentifyResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder getIdentifyResponseOrBuilder() {
        if (identifyResponseBuilder_ != null) {
          return identifyResponseBuilder_.getMessageOrBuilder();
        } else {
          return identifyResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.IdentifyResponse, com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder, com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder> 
          getIdentifyResponseFieldBuilder() {
        if (identifyResponseBuilder_ == null) {
          identifyResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.IdentifyResponse, com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder, com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder>(
                  identifyResponse_,
                  getParentForChildren(),
                  isClean());
          identifyResponse_ = null;
        }
        return identifyResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinChatRequest JoinChatRequest = 5;
      private com.richardpianka.chess.network.Contracts.JoinChatRequest joinChatRequest_ = com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinChatRequest, com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder, com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder> joinChatRequestBuilder_;
      public boolean hasJoinChatRequest() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public com.richardpianka.chess.network.Contracts.JoinChatRequest getJoinChatRequest() {
        if (joinChatRequestBuilder_ == null) {
          return joinChatRequest_;
        } else {
          return joinChatRequestBuilder_.getMessage();
        }
      }
      public Builder setJoinChatRequest(com.richardpianka.chess.network.Contracts.JoinChatRequest value) {
        if (joinChatRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinChatRequest_ = value;
          onChanged();
        } else {
          joinChatRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setJoinChatRequest(
          com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder builderForValue) {
        if (joinChatRequestBuilder_ == null) {
          joinChatRequest_ = builderForValue.build();
          onChanged();
        } else {
          joinChatRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergeJoinChatRequest(com.richardpianka.chess.network.Contracts.JoinChatRequest value) {
        if (joinChatRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              joinChatRequest_ != com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance()) {
            joinChatRequest_ =
              com.richardpianka.chess.network.Contracts.JoinChatRequest.newBuilder(joinChatRequest_).mergeFrom(value).buildPartial();
          } else {
            joinChatRequest_ = value;
          }
          onChanged();
        } else {
          joinChatRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearJoinChatRequest() {
        if (joinChatRequestBuilder_ == null) {
          joinChatRequest_ = com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance();
          onChanged();
        } else {
          joinChatRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder getJoinChatRequestBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getJoinChatRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder getJoinChatRequestOrBuilder() {
        if (joinChatRequestBuilder_ != null) {
          return joinChatRequestBuilder_.getMessageOrBuilder();
        } else {
          return joinChatRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinChatRequest, com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder, com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder> 
          getJoinChatRequestFieldBuilder() {
        if (joinChatRequestBuilder_ == null) {
          joinChatRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinChatRequest, com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder, com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder>(
                  joinChatRequest_,
                  getParentForChildren(),
                  isClean());
          joinChatRequest_ = null;
        }
        return joinChatRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinChatResponse JoinChatResponse = 6;
      private com.richardpianka.chess.network.Contracts.JoinChatResponse joinChatResponse_ = com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinChatResponse, com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder, com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder> joinChatResponseBuilder_;
      public boolean hasJoinChatResponse() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public com.richardpianka.chess.network.Contracts.JoinChatResponse getJoinChatResponse() {
        if (joinChatResponseBuilder_ == null) {
          return joinChatResponse_;
        } else {
          return joinChatResponseBuilder_.getMessage();
        }
      }
      public Builder setJoinChatResponse(com.richardpianka.chess.network.Contracts.JoinChatResponse value) {
        if (joinChatResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinChatResponse_ = value;
          onChanged();
        } else {
          joinChatResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setJoinChatResponse(
          com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder builderForValue) {
        if (joinChatResponseBuilder_ == null) {
          joinChatResponse_ = builderForValue.build();
          onChanged();
        } else {
          joinChatResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeJoinChatResponse(com.richardpianka.chess.network.Contracts.JoinChatResponse value) {
        if (joinChatResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              joinChatResponse_ != com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance()) {
            joinChatResponse_ =
              com.richardpianka.chess.network.Contracts.JoinChatResponse.newBuilder(joinChatResponse_).mergeFrom(value).buildPartial();
          } else {
            joinChatResponse_ = value;
          }
          onChanged();
        } else {
          joinChatResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearJoinChatResponse() {
        if (joinChatResponseBuilder_ == null) {
          joinChatResponse_ = com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance();
          onChanged();
        } else {
          joinChatResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder getJoinChatResponseBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getJoinChatResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder getJoinChatResponseOrBuilder() {
        if (joinChatResponseBuilder_ != null) {
          return joinChatResponseBuilder_.getMessageOrBuilder();
        } else {
          return joinChatResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinChatResponse, com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder, com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder> 
          getJoinChatResponseFieldBuilder() {
        if (joinChatResponseBuilder_ == null) {
          joinChatResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinChatResponse, com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder, com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder>(
                  joinChatResponse_,
                  getParentForChildren(),
                  isClean());
          joinChatResponse_ = null;
        }
        return joinChatResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.RoomListRequest RoomListRequest = 7;
      private com.richardpianka.chess.network.Contracts.RoomListRequest roomListRequest_ = com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.RoomListRequest, com.richardpianka.chess.network.Contracts.RoomListRequest.Builder, com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder> roomListRequestBuilder_;
      public boolean hasRoomListRequest() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public com.richardpianka.chess.network.Contracts.RoomListRequest getRoomListRequest() {
        if (roomListRequestBuilder_ == null) {
          return roomListRequest_;
        } else {
          return roomListRequestBuilder_.getMessage();
        }
      }
      public Builder setRoomListRequest(com.richardpianka.chess.network.Contracts.RoomListRequest value) {
        if (roomListRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomListRequest_ = value;
          onChanged();
        } else {
          roomListRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder setRoomListRequest(
          com.richardpianka.chess.network.Contracts.RoomListRequest.Builder builderForValue) {
        if (roomListRequestBuilder_ == null) {
          roomListRequest_ = builderForValue.build();
          onChanged();
        } else {
          roomListRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder mergeRoomListRequest(com.richardpianka.chess.network.Contracts.RoomListRequest value) {
        if (roomListRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              roomListRequest_ != com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance()) {
            roomListRequest_ =
              com.richardpianka.chess.network.Contracts.RoomListRequest.newBuilder(roomListRequest_).mergeFrom(value).buildPartial();
          } else {
            roomListRequest_ = value;
          }
          onChanged();
        } else {
          roomListRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder clearRoomListRequest() {
        if (roomListRequestBuilder_ == null) {
          roomListRequest_ = com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance();
          onChanged();
        } else {
          roomListRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.RoomListRequest.Builder getRoomListRequestBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getRoomListRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder getRoomListRequestOrBuilder() {
        if (roomListRequestBuilder_ != null) {
          return roomListRequestBuilder_.getMessageOrBuilder();
        } else {
          return roomListRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.RoomListRequest, com.richardpianka.chess.network.Contracts.RoomListRequest.Builder, com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder> 
          getRoomListRequestFieldBuilder() {
        if (roomListRequestBuilder_ == null) {
          roomListRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.RoomListRequest, com.richardpianka.chess.network.Contracts.RoomListRequest.Builder, com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder>(
                  roomListRequest_,
                  getParentForChildren(),
                  isClean());
          roomListRequest_ = null;
        }
        return roomListRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.RoomListResponse RoomListResponse = 8;
      private com.richardpianka.chess.network.Contracts.RoomListResponse roomListResponse_ = com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.RoomListResponse, com.richardpianka.chess.network.Contracts.RoomListResponse.Builder, com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder> roomListResponseBuilder_;
      public boolean hasRoomListResponse() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public com.richardpianka.chess.network.Contracts.RoomListResponse getRoomListResponse() {
        if (roomListResponseBuilder_ == null) {
          return roomListResponse_;
        } else {
          return roomListResponseBuilder_.getMessage();
        }
      }
      public Builder setRoomListResponse(com.richardpianka.chess.network.Contracts.RoomListResponse value) {
        if (roomListResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roomListResponse_ = value;
          onChanged();
        } else {
          roomListResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder setRoomListResponse(
          com.richardpianka.chess.network.Contracts.RoomListResponse.Builder builderForValue) {
        if (roomListResponseBuilder_ == null) {
          roomListResponse_ = builderForValue.build();
          onChanged();
        } else {
          roomListResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder mergeRoomListResponse(com.richardpianka.chess.network.Contracts.RoomListResponse value) {
        if (roomListResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              roomListResponse_ != com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance()) {
            roomListResponse_ =
              com.richardpianka.chess.network.Contracts.RoomListResponse.newBuilder(roomListResponse_).mergeFrom(value).buildPartial();
          } else {
            roomListResponse_ = value;
          }
          onChanged();
        } else {
          roomListResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder clearRoomListResponse() {
        if (roomListResponseBuilder_ == null) {
          roomListResponse_ = com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance();
          onChanged();
        } else {
          roomListResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.RoomListResponse.Builder getRoomListResponseBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getRoomListResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder getRoomListResponseOrBuilder() {
        if (roomListResponseBuilder_ != null) {
          return roomListResponseBuilder_.getMessageOrBuilder();
        } else {
          return roomListResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.RoomListResponse, com.richardpianka.chess.network.Contracts.RoomListResponse.Builder, com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder> 
          getRoomListResponseFieldBuilder() {
        if (roomListResponseBuilder_ == null) {
          roomListResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.RoomListResponse, com.richardpianka.chess.network.Contracts.RoomListResponse.Builder, com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder>(
                  roomListResponse_,
                  getParentForChildren(),
                  isClean());
          roomListResponse_ = null;
        }
        return roomListResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinRoomRequest JoinRoomRequest = 9;
      private com.richardpianka.chess.network.Contracts.JoinRoomRequest joinRoomRequest_ = com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinRoomRequest, com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder, com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder> joinRoomRequestBuilder_;
      public boolean hasJoinRoomRequest() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest getJoinRoomRequest() {
        if (joinRoomRequestBuilder_ == null) {
          return joinRoomRequest_;
        } else {
          return joinRoomRequestBuilder_.getMessage();
        }
      }
      public Builder setJoinRoomRequest(com.richardpianka.chess.network.Contracts.JoinRoomRequest value) {
        if (joinRoomRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinRoomRequest_ = value;
          onChanged();
        } else {
          joinRoomRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder setJoinRoomRequest(
          com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder builderForValue) {
        if (joinRoomRequestBuilder_ == null) {
          joinRoomRequest_ = builderForValue.build();
          onChanged();
        } else {
          joinRoomRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder mergeJoinRoomRequest(com.richardpianka.chess.network.Contracts.JoinRoomRequest value) {
        if (joinRoomRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              joinRoomRequest_ != com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance()) {
            joinRoomRequest_ =
              com.richardpianka.chess.network.Contracts.JoinRoomRequest.newBuilder(joinRoomRequest_).mergeFrom(value).buildPartial();
          } else {
            joinRoomRequest_ = value;
          }
          onChanged();
        } else {
          joinRoomRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder clearJoinRoomRequest() {
        if (joinRoomRequestBuilder_ == null) {
          joinRoomRequest_ = com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance();
          onChanged();
        } else {
          joinRoomRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder getJoinRoomRequestBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getJoinRoomRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder getJoinRoomRequestOrBuilder() {
        if (joinRoomRequestBuilder_ != null) {
          return joinRoomRequestBuilder_.getMessageOrBuilder();
        } else {
          return joinRoomRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinRoomRequest, com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder, com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder> 
          getJoinRoomRequestFieldBuilder() {
        if (joinRoomRequestBuilder_ == null) {
          joinRoomRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinRoomRequest, com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder, com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder>(
                  joinRoomRequest_,
                  getParentForChildren(),
                  isClean());
          joinRoomRequest_ = null;
        }
        return joinRoomRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinRoomResponse JoinRoomResponse = 10;
      private com.richardpianka.chess.network.Contracts.JoinRoomResponse joinRoomResponse_ = com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinRoomResponse, com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder, com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder> joinRoomResponseBuilder_;
      public boolean hasJoinRoomResponse() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse getJoinRoomResponse() {
        if (joinRoomResponseBuilder_ == null) {
          return joinRoomResponse_;
        } else {
          return joinRoomResponseBuilder_.getMessage();
        }
      }
      public Builder setJoinRoomResponse(com.richardpianka.chess.network.Contracts.JoinRoomResponse value) {
        if (joinRoomResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinRoomResponse_ = value;
          onChanged();
        } else {
          joinRoomResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      public Builder setJoinRoomResponse(
          com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder builderForValue) {
        if (joinRoomResponseBuilder_ == null) {
          joinRoomResponse_ = builderForValue.build();
          onChanged();
        } else {
          joinRoomResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      public Builder mergeJoinRoomResponse(com.richardpianka.chess.network.Contracts.JoinRoomResponse value) {
        if (joinRoomResponseBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              joinRoomResponse_ != com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance()) {
            joinRoomResponse_ =
              com.richardpianka.chess.network.Contracts.JoinRoomResponse.newBuilder(joinRoomResponse_).mergeFrom(value).buildPartial();
          } else {
            joinRoomResponse_ = value;
          }
          onChanged();
        } else {
          joinRoomResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      public Builder clearJoinRoomResponse() {
        if (joinRoomResponseBuilder_ == null) {
          joinRoomResponse_ = com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance();
          onChanged();
        } else {
          joinRoomResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder getJoinRoomResponseBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getJoinRoomResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder getJoinRoomResponseOrBuilder() {
        if (joinRoomResponseBuilder_ != null) {
          return joinRoomResponseBuilder_.getMessageOrBuilder();
        } else {
          return joinRoomResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinRoomResponse, com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder, com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder> 
          getJoinRoomResponseFieldBuilder() {
        if (joinRoomResponseBuilder_ == null) {
          joinRoomResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinRoomResponse, com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder, com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder>(
                  joinRoomResponse_,
                  getParentForChildren(),
                  isClean());
          joinRoomResponse_ = null;
        }
        return joinRoomResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.SpeakRequest SpeakRequest = 11;
      private com.richardpianka.chess.network.Contracts.SpeakRequest speakRequest_ = com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpeakRequest, com.richardpianka.chess.network.Contracts.SpeakRequest.Builder, com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder> speakRequestBuilder_;
      public boolean hasSpeakRequest() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public com.richardpianka.chess.network.Contracts.SpeakRequest getSpeakRequest() {
        if (speakRequestBuilder_ == null) {
          return speakRequest_;
        } else {
          return speakRequestBuilder_.getMessage();
        }
      }
      public Builder setSpeakRequest(com.richardpianka.chess.network.Contracts.SpeakRequest value) {
        if (speakRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speakRequest_ = value;
          onChanged();
        } else {
          speakRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      public Builder setSpeakRequest(
          com.richardpianka.chess.network.Contracts.SpeakRequest.Builder builderForValue) {
        if (speakRequestBuilder_ == null) {
          speakRequest_ = builderForValue.build();
          onChanged();
        } else {
          speakRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      public Builder mergeSpeakRequest(com.richardpianka.chess.network.Contracts.SpeakRequest value) {
        if (speakRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              speakRequest_ != com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance()) {
            speakRequest_ =
              com.richardpianka.chess.network.Contracts.SpeakRequest.newBuilder(speakRequest_).mergeFrom(value).buildPartial();
          } else {
            speakRequest_ = value;
          }
          onChanged();
        } else {
          speakRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      public Builder clearSpeakRequest() {
        if (speakRequestBuilder_ == null) {
          speakRequest_ = com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance();
          onChanged();
        } else {
          speakRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpeakRequest.Builder getSpeakRequestBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getSpeakRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder getSpeakRequestOrBuilder() {
        if (speakRequestBuilder_ != null) {
          return speakRequestBuilder_.getMessageOrBuilder();
        } else {
          return speakRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpeakRequest, com.richardpianka.chess.network.Contracts.SpeakRequest.Builder, com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder> 
          getSpeakRequestFieldBuilder() {
        if (speakRequestBuilder_ == null) {
          speakRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpeakRequest, com.richardpianka.chess.network.Contracts.SpeakRequest.Builder, com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder>(
                  speakRequest_,
                  getParentForChildren(),
                  isClean());
          speakRequest_ = null;
        }
        return speakRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.OperatorRequest OperatorRequest = 12;
      private com.richardpianka.chess.network.Contracts.OperatorRequest operatorRequest_ = com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.OperatorRequest, com.richardpianka.chess.network.Contracts.OperatorRequest.Builder, com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder> operatorRequestBuilder_;
      public boolean hasOperatorRequest() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public com.richardpianka.chess.network.Contracts.OperatorRequest getOperatorRequest() {
        if (operatorRequestBuilder_ == null) {
          return operatorRequest_;
        } else {
          return operatorRequestBuilder_.getMessage();
        }
      }
      public Builder setOperatorRequest(com.richardpianka.chess.network.Contracts.OperatorRequest value) {
        if (operatorRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operatorRequest_ = value;
          onChanged();
        } else {
          operatorRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      public Builder setOperatorRequest(
          com.richardpianka.chess.network.Contracts.OperatorRequest.Builder builderForValue) {
        if (operatorRequestBuilder_ == null) {
          operatorRequest_ = builderForValue.build();
          onChanged();
        } else {
          operatorRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      public Builder mergeOperatorRequest(com.richardpianka.chess.network.Contracts.OperatorRequest value) {
        if (operatorRequestBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              operatorRequest_ != com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance()) {
            operatorRequest_ =
              com.richardpianka.chess.network.Contracts.OperatorRequest.newBuilder(operatorRequest_).mergeFrom(value).buildPartial();
          } else {
            operatorRequest_ = value;
          }
          onChanged();
        } else {
          operatorRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      public Builder clearOperatorRequest() {
        if (operatorRequestBuilder_ == null) {
          operatorRequest_ = com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance();
          onChanged();
        } else {
          operatorRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.OperatorRequest.Builder getOperatorRequestBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getOperatorRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder getOperatorRequestOrBuilder() {
        if (operatorRequestBuilder_ != null) {
          return operatorRequestBuilder_.getMessageOrBuilder();
        } else {
          return operatorRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.OperatorRequest, com.richardpianka.chess.network.Contracts.OperatorRequest.Builder, com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder> 
          getOperatorRequestFieldBuilder() {
        if (operatorRequestBuilder_ == null) {
          operatorRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.OperatorRequest, com.richardpianka.chess.network.Contracts.OperatorRequest.Builder, com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder>(
                  operatorRequest_,
                  getParentForChildren(),
                  isClean());
          operatorRequest_ = null;
        }
        return operatorRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.OperatorResponse OperatorResponse = 13;
      private com.richardpianka.chess.network.Contracts.OperatorResponse operatorResponse_ = com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.OperatorResponse, com.richardpianka.chess.network.Contracts.OperatorResponse.Builder, com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder> operatorResponseBuilder_;
      public boolean hasOperatorResponse() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public com.richardpianka.chess.network.Contracts.OperatorResponse getOperatorResponse() {
        if (operatorResponseBuilder_ == null) {
          return operatorResponse_;
        } else {
          return operatorResponseBuilder_.getMessage();
        }
      }
      public Builder setOperatorResponse(com.richardpianka.chess.network.Contracts.OperatorResponse value) {
        if (operatorResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          operatorResponse_ = value;
          onChanged();
        } else {
          operatorResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      public Builder setOperatorResponse(
          com.richardpianka.chess.network.Contracts.OperatorResponse.Builder builderForValue) {
        if (operatorResponseBuilder_ == null) {
          operatorResponse_ = builderForValue.build();
          onChanged();
        } else {
          operatorResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      public Builder mergeOperatorResponse(com.richardpianka.chess.network.Contracts.OperatorResponse value) {
        if (operatorResponseBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              operatorResponse_ != com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance()) {
            operatorResponse_ =
              com.richardpianka.chess.network.Contracts.OperatorResponse.newBuilder(operatorResponse_).mergeFrom(value).buildPartial();
          } else {
            operatorResponse_ = value;
          }
          onChanged();
        } else {
          operatorResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      public Builder clearOperatorResponse() {
        if (operatorResponseBuilder_ == null) {
          operatorResponse_ = com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance();
          onChanged();
        } else {
          operatorResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.OperatorResponse.Builder getOperatorResponseBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getOperatorResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder getOperatorResponseOrBuilder() {
        if (operatorResponseBuilder_ != null) {
          return operatorResponseBuilder_.getMessageOrBuilder();
        } else {
          return operatorResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.OperatorResponse, com.richardpianka.chess.network.Contracts.OperatorResponse.Builder, com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder> 
          getOperatorResponseFieldBuilder() {
        if (operatorResponseBuilder_ == null) {
          operatorResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.OperatorResponse, com.richardpianka.chess.network.Contracts.OperatorResponse.Builder, com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder>(
                  operatorResponse_,
                  getParentForChildren(),
                  isClean());
          operatorResponse_ = null;
        }
        return operatorResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.ChatRoomEvent ChatRoomEvent = 14;
      private com.richardpianka.chess.network.Contracts.ChatRoomEvent chatRoomEvent_ = com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatRoomEvent, com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder, com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder> chatRoomEventBuilder_;
      public boolean hasChatRoomEvent() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent getChatRoomEvent() {
        if (chatRoomEventBuilder_ == null) {
          return chatRoomEvent_;
        } else {
          return chatRoomEventBuilder_.getMessage();
        }
      }
      public Builder setChatRoomEvent(com.richardpianka.chess.network.Contracts.ChatRoomEvent value) {
        if (chatRoomEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chatRoomEvent_ = value;
          onChanged();
        } else {
          chatRoomEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      public Builder setChatRoomEvent(
          com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder builderForValue) {
        if (chatRoomEventBuilder_ == null) {
          chatRoomEvent_ = builderForValue.build();
          onChanged();
        } else {
          chatRoomEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      public Builder mergeChatRoomEvent(com.richardpianka.chess.network.Contracts.ChatRoomEvent value) {
        if (chatRoomEventBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              chatRoomEvent_ != com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance()) {
            chatRoomEvent_ =
              com.richardpianka.chess.network.Contracts.ChatRoomEvent.newBuilder(chatRoomEvent_).mergeFrom(value).buildPartial();
          } else {
            chatRoomEvent_ = value;
          }
          onChanged();
        } else {
          chatRoomEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      public Builder clearChatRoomEvent() {
        if (chatRoomEventBuilder_ == null) {
          chatRoomEvent_ = com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance();
          onChanged();
        } else {
          chatRoomEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder getChatRoomEventBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getChatRoomEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder getChatRoomEventOrBuilder() {
        if (chatRoomEventBuilder_ != null) {
          return chatRoomEventBuilder_.getMessageOrBuilder();
        } else {
          return chatRoomEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatRoomEvent, com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder, com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder> 
          getChatRoomEventFieldBuilder() {
        if (chatRoomEventBuilder_ == null) {
          chatRoomEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.ChatRoomEvent, com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder, com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder>(
                  chatRoomEvent_,
                  getParentForChildren(),
                  isClean());
          chatRoomEvent_ = null;
        }
        return chatRoomEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.ChatUserEvent ChatUserEvent = 15;
      private com.richardpianka.chess.network.Contracts.ChatUserEvent chatUserEvent_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatUserEvent, com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder, com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder> chatUserEventBuilder_;
      public boolean hasChatUserEvent() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public com.richardpianka.chess.network.Contracts.ChatUserEvent getChatUserEvent() {
        if (chatUserEventBuilder_ == null) {
          return chatUserEvent_;
        } else {
          return chatUserEventBuilder_.getMessage();
        }
      }
      public Builder setChatUserEvent(com.richardpianka.chess.network.Contracts.ChatUserEvent value) {
        if (chatUserEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chatUserEvent_ = value;
          onChanged();
        } else {
          chatUserEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      public Builder setChatUserEvent(
          com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder builderForValue) {
        if (chatUserEventBuilder_ == null) {
          chatUserEvent_ = builderForValue.build();
          onChanged();
        } else {
          chatUserEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      public Builder mergeChatUserEvent(com.richardpianka.chess.network.Contracts.ChatUserEvent value) {
        if (chatUserEventBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              chatUserEvent_ != com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance()) {
            chatUserEvent_ =
              com.richardpianka.chess.network.Contracts.ChatUserEvent.newBuilder(chatUserEvent_).mergeFrom(value).buildPartial();
          } else {
            chatUserEvent_ = value;
          }
          onChanged();
        } else {
          chatUserEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      public Builder clearChatUserEvent() {
        if (chatUserEventBuilder_ == null) {
          chatUserEvent_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance();
          onChanged();
        } else {
          chatUserEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder getChatUserEventBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getChatUserEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder getChatUserEventOrBuilder() {
        if (chatUserEventBuilder_ != null) {
          return chatUserEventBuilder_.getMessageOrBuilder();
        } else {
          return chatUserEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatUserEvent, com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder, com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder> 
          getChatUserEventFieldBuilder() {
        if (chatUserEventBuilder_ == null) {
          chatUserEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.ChatUserEvent, com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder, com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder>(
                  chatUserEvent_,
                  getParentForChildren(),
                  isClean());
          chatUserEvent_ = null;
        }
        return chatUserEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.ChatSpeakEvent ChatSpeakEvent = 16;
      private com.richardpianka.chess.network.Contracts.ChatSpeakEvent chatSpeakEvent_ = com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatSpeakEvent, com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder, com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder> chatSpeakEventBuilder_;
      public boolean hasChatSpeakEvent() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent getChatSpeakEvent() {
        if (chatSpeakEventBuilder_ == null) {
          return chatSpeakEvent_;
        } else {
          return chatSpeakEventBuilder_.getMessage();
        }
      }
      public Builder setChatSpeakEvent(com.richardpianka.chess.network.Contracts.ChatSpeakEvent value) {
        if (chatSpeakEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chatSpeakEvent_ = value;
          onChanged();
        } else {
          chatSpeakEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      public Builder setChatSpeakEvent(
          com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder builderForValue) {
        if (chatSpeakEventBuilder_ == null) {
          chatSpeakEvent_ = builderForValue.build();
          onChanged();
        } else {
          chatSpeakEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      public Builder mergeChatSpeakEvent(com.richardpianka.chess.network.Contracts.ChatSpeakEvent value) {
        if (chatSpeakEventBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              chatSpeakEvent_ != com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance()) {
            chatSpeakEvent_ =
              com.richardpianka.chess.network.Contracts.ChatSpeakEvent.newBuilder(chatSpeakEvent_).mergeFrom(value).buildPartial();
          } else {
            chatSpeakEvent_ = value;
          }
          onChanged();
        } else {
          chatSpeakEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      public Builder clearChatSpeakEvent() {
        if (chatSpeakEventBuilder_ == null) {
          chatSpeakEvent_ = com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance();
          onChanged();
        } else {
          chatSpeakEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder getChatSpeakEventBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getChatSpeakEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder getChatSpeakEventOrBuilder() {
        if (chatSpeakEventBuilder_ != null) {
          return chatSpeakEventBuilder_.getMessageOrBuilder();
        } else {
          return chatSpeakEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.ChatSpeakEvent, com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder, com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder> 
          getChatSpeakEventFieldBuilder() {
        if (chatSpeakEventBuilder_ == null) {
          chatSpeakEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.ChatSpeakEvent, com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder, com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder>(
                  chatSpeakEvent_,
                  getParentForChildren(),
                  isClean());
          chatSpeakEvent_ = null;
        }
        return chatSpeakEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.GameListRequest GameListRequest = 17;
      private com.richardpianka.chess.network.Contracts.GameListRequest gameListRequest_ = com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameListRequest, com.richardpianka.chess.network.Contracts.GameListRequest.Builder, com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder> gameListRequestBuilder_;
      public boolean hasGameListRequest() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      public com.richardpianka.chess.network.Contracts.GameListRequest getGameListRequest() {
        if (gameListRequestBuilder_ == null) {
          return gameListRequest_;
        } else {
          return gameListRequestBuilder_.getMessage();
        }
      }
      public Builder setGameListRequest(com.richardpianka.chess.network.Contracts.GameListRequest value) {
        if (gameListRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameListRequest_ = value;
          onChanged();
        } else {
          gameListRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      public Builder setGameListRequest(
          com.richardpianka.chess.network.Contracts.GameListRequest.Builder builderForValue) {
        if (gameListRequestBuilder_ == null) {
          gameListRequest_ = builderForValue.build();
          onChanged();
        } else {
          gameListRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      public Builder mergeGameListRequest(com.richardpianka.chess.network.Contracts.GameListRequest value) {
        if (gameListRequestBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              gameListRequest_ != com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance()) {
            gameListRequest_ =
              com.richardpianka.chess.network.Contracts.GameListRequest.newBuilder(gameListRequest_).mergeFrom(value).buildPartial();
          } else {
            gameListRequest_ = value;
          }
          onChanged();
        } else {
          gameListRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      public Builder clearGameListRequest() {
        if (gameListRequestBuilder_ == null) {
          gameListRequest_ = com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance();
          onChanged();
        } else {
          gameListRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.GameListRequest.Builder getGameListRequestBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getGameListRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder getGameListRequestOrBuilder() {
        if (gameListRequestBuilder_ != null) {
          return gameListRequestBuilder_.getMessageOrBuilder();
        } else {
          return gameListRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameListRequest, com.richardpianka.chess.network.Contracts.GameListRequest.Builder, com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder> 
          getGameListRequestFieldBuilder() {
        if (gameListRequestBuilder_ == null) {
          gameListRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.GameListRequest, com.richardpianka.chess.network.Contracts.GameListRequest.Builder, com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder>(
                  gameListRequest_,
                  getParentForChildren(),
                  isClean());
          gameListRequest_ = null;
        }
        return gameListRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.GameListResponse GameListResponse = 18;
      private com.richardpianka.chess.network.Contracts.GameListResponse gameListResponse_ = com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameListResponse, com.richardpianka.chess.network.Contracts.GameListResponse.Builder, com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder> gameListResponseBuilder_;
      public boolean hasGameListResponse() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      public com.richardpianka.chess.network.Contracts.GameListResponse getGameListResponse() {
        if (gameListResponseBuilder_ == null) {
          return gameListResponse_;
        } else {
          return gameListResponseBuilder_.getMessage();
        }
      }
      public Builder setGameListResponse(com.richardpianka.chess.network.Contracts.GameListResponse value) {
        if (gameListResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameListResponse_ = value;
          onChanged();
        } else {
          gameListResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      public Builder setGameListResponse(
          com.richardpianka.chess.network.Contracts.GameListResponse.Builder builderForValue) {
        if (gameListResponseBuilder_ == null) {
          gameListResponse_ = builderForValue.build();
          onChanged();
        } else {
          gameListResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      public Builder mergeGameListResponse(com.richardpianka.chess.network.Contracts.GameListResponse value) {
        if (gameListResponseBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              gameListResponse_ != com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance()) {
            gameListResponse_ =
              com.richardpianka.chess.network.Contracts.GameListResponse.newBuilder(gameListResponse_).mergeFrom(value).buildPartial();
          } else {
            gameListResponse_ = value;
          }
          onChanged();
        } else {
          gameListResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      public Builder clearGameListResponse() {
        if (gameListResponseBuilder_ == null) {
          gameListResponse_ = com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance();
          onChanged();
        } else {
          gameListResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.GameListResponse.Builder getGameListResponseBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getGameListResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder getGameListResponseOrBuilder() {
        if (gameListResponseBuilder_ != null) {
          return gameListResponseBuilder_.getMessageOrBuilder();
        } else {
          return gameListResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameListResponse, com.richardpianka.chess.network.Contracts.GameListResponse.Builder, com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder> 
          getGameListResponseFieldBuilder() {
        if (gameListResponseBuilder_ == null) {
          gameListResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.GameListResponse, com.richardpianka.chess.network.Contracts.GameListResponse.Builder, com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder>(
                  gameListResponse_,
                  getParentForChildren(),
                  isClean());
          gameListResponse_ = null;
        }
        return gameListResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.CreateGameRequest CreateGameRequest = 19;
      private com.richardpianka.chess.network.Contracts.CreateGameRequest createGameRequest_ = com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.CreateGameRequest, com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder, com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder> createGameRequestBuilder_;
      public boolean hasCreateGameRequest() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      public com.richardpianka.chess.network.Contracts.CreateGameRequest getCreateGameRequest() {
        if (createGameRequestBuilder_ == null) {
          return createGameRequest_;
        } else {
          return createGameRequestBuilder_.getMessage();
        }
      }
      public Builder setCreateGameRequest(com.richardpianka.chess.network.Contracts.CreateGameRequest value) {
        if (createGameRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          createGameRequest_ = value;
          onChanged();
        } else {
          createGameRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      public Builder setCreateGameRequest(
          com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder builderForValue) {
        if (createGameRequestBuilder_ == null) {
          createGameRequest_ = builderForValue.build();
          onChanged();
        } else {
          createGameRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      public Builder mergeCreateGameRequest(com.richardpianka.chess.network.Contracts.CreateGameRequest value) {
        if (createGameRequestBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              createGameRequest_ != com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance()) {
            createGameRequest_ =
              com.richardpianka.chess.network.Contracts.CreateGameRequest.newBuilder(createGameRequest_).mergeFrom(value).buildPartial();
          } else {
            createGameRequest_ = value;
          }
          onChanged();
        } else {
          createGameRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      public Builder clearCreateGameRequest() {
        if (createGameRequestBuilder_ == null) {
          createGameRequest_ = com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance();
          onChanged();
        } else {
          createGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder getCreateGameRequestBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getCreateGameRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder getCreateGameRequestOrBuilder() {
        if (createGameRequestBuilder_ != null) {
          return createGameRequestBuilder_.getMessageOrBuilder();
        } else {
          return createGameRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.CreateGameRequest, com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder, com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder> 
          getCreateGameRequestFieldBuilder() {
        if (createGameRequestBuilder_ == null) {
          createGameRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.CreateGameRequest, com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder, com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder>(
                  createGameRequest_,
                  getParentForChildren(),
                  isClean());
          createGameRequest_ = null;
        }
        return createGameRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.CreateGameResponse CreateGameResponse = 20;
      private com.richardpianka.chess.network.Contracts.CreateGameResponse createGameResponse_ = com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.CreateGameResponse, com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder, com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder> createGameResponseBuilder_;
      public boolean hasCreateGameResponse() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      public com.richardpianka.chess.network.Contracts.CreateGameResponse getCreateGameResponse() {
        if (createGameResponseBuilder_ == null) {
          return createGameResponse_;
        } else {
          return createGameResponseBuilder_.getMessage();
        }
      }
      public Builder setCreateGameResponse(com.richardpianka.chess.network.Contracts.CreateGameResponse value) {
        if (createGameResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          createGameResponse_ = value;
          onChanged();
        } else {
          createGameResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      public Builder setCreateGameResponse(
          com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder builderForValue) {
        if (createGameResponseBuilder_ == null) {
          createGameResponse_ = builderForValue.build();
          onChanged();
        } else {
          createGameResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      public Builder mergeCreateGameResponse(com.richardpianka.chess.network.Contracts.CreateGameResponse value) {
        if (createGameResponseBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              createGameResponse_ != com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance()) {
            createGameResponse_ =
              com.richardpianka.chess.network.Contracts.CreateGameResponse.newBuilder(createGameResponse_).mergeFrom(value).buildPartial();
          } else {
            createGameResponse_ = value;
          }
          onChanged();
        } else {
          createGameResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      public Builder clearCreateGameResponse() {
        if (createGameResponseBuilder_ == null) {
          createGameResponse_ = com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance();
          onChanged();
        } else {
          createGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder getCreateGameResponseBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getCreateGameResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder getCreateGameResponseOrBuilder() {
        if (createGameResponseBuilder_ != null) {
          return createGameResponseBuilder_.getMessageOrBuilder();
        } else {
          return createGameResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.CreateGameResponse, com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder, com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder> 
          getCreateGameResponseFieldBuilder() {
        if (createGameResponseBuilder_ == null) {
          createGameResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.CreateGameResponse, com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder, com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder>(
                  createGameResponse_,
                  getParentForChildren(),
                  isClean());
          createGameResponse_ = null;
        }
        return createGameResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinGameRequest JoinGameRequest = 21;
      private com.richardpianka.chess.network.Contracts.JoinGameRequest joinGameRequest_ = com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinGameRequest, com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder, com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder> joinGameRequestBuilder_;
      public boolean hasJoinGameRequest() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      public com.richardpianka.chess.network.Contracts.JoinGameRequest getJoinGameRequest() {
        if (joinGameRequestBuilder_ == null) {
          return joinGameRequest_;
        } else {
          return joinGameRequestBuilder_.getMessage();
        }
      }
      public Builder setJoinGameRequest(com.richardpianka.chess.network.Contracts.JoinGameRequest value) {
        if (joinGameRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinGameRequest_ = value;
          onChanged();
        } else {
          joinGameRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      public Builder setJoinGameRequest(
          com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder builderForValue) {
        if (joinGameRequestBuilder_ == null) {
          joinGameRequest_ = builderForValue.build();
          onChanged();
        } else {
          joinGameRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      public Builder mergeJoinGameRequest(com.richardpianka.chess.network.Contracts.JoinGameRequest value) {
        if (joinGameRequestBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              joinGameRequest_ != com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance()) {
            joinGameRequest_ =
              com.richardpianka.chess.network.Contracts.JoinGameRequest.newBuilder(joinGameRequest_).mergeFrom(value).buildPartial();
          } else {
            joinGameRequest_ = value;
          }
          onChanged();
        } else {
          joinGameRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      public Builder clearJoinGameRequest() {
        if (joinGameRequestBuilder_ == null) {
          joinGameRequest_ = com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance();
          onChanged();
        } else {
          joinGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder getJoinGameRequestBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getJoinGameRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder getJoinGameRequestOrBuilder() {
        if (joinGameRequestBuilder_ != null) {
          return joinGameRequestBuilder_.getMessageOrBuilder();
        } else {
          return joinGameRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinGameRequest, com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder, com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder> 
          getJoinGameRequestFieldBuilder() {
        if (joinGameRequestBuilder_ == null) {
          joinGameRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinGameRequest, com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder, com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder>(
                  joinGameRequest_,
                  getParentForChildren(),
                  isClean());
          joinGameRequest_ = null;
        }
        return joinGameRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.JoinGameResponse JoinGameResponse = 22;
      private com.richardpianka.chess.network.Contracts.JoinGameResponse joinGameResponse_ = com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinGameResponse, com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder, com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder> joinGameResponseBuilder_;
      public boolean hasJoinGameResponse() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      public com.richardpianka.chess.network.Contracts.JoinGameResponse getJoinGameResponse() {
        if (joinGameResponseBuilder_ == null) {
          return joinGameResponse_;
        } else {
          return joinGameResponseBuilder_.getMessage();
        }
      }
      public Builder setJoinGameResponse(com.richardpianka.chess.network.Contracts.JoinGameResponse value) {
        if (joinGameResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joinGameResponse_ = value;
          onChanged();
        } else {
          joinGameResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      public Builder setJoinGameResponse(
          com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder builderForValue) {
        if (joinGameResponseBuilder_ == null) {
          joinGameResponse_ = builderForValue.build();
          onChanged();
        } else {
          joinGameResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      public Builder mergeJoinGameResponse(com.richardpianka.chess.network.Contracts.JoinGameResponse value) {
        if (joinGameResponseBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              joinGameResponse_ != com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance()) {
            joinGameResponse_ =
              com.richardpianka.chess.network.Contracts.JoinGameResponse.newBuilder(joinGameResponse_).mergeFrom(value).buildPartial();
          } else {
            joinGameResponse_ = value;
          }
          onChanged();
        } else {
          joinGameResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      public Builder clearJoinGameResponse() {
        if (joinGameResponseBuilder_ == null) {
          joinGameResponse_ = com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance();
          onChanged();
        } else {
          joinGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder getJoinGameResponseBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getJoinGameResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder getJoinGameResponseOrBuilder() {
        if (joinGameResponseBuilder_ != null) {
          return joinGameResponseBuilder_.getMessageOrBuilder();
        } else {
          return joinGameResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.JoinGameResponse, com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder, com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder> 
          getJoinGameResponseFieldBuilder() {
        if (joinGameResponseBuilder_ == null) {
          joinGameResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.JoinGameResponse, com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder, com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder>(
                  joinGameResponse_,
                  getParentForChildren(),
                  isClean());
          joinGameResponse_ = null;
        }
        return joinGameResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.LeaveGameRequest LeaveGameRequest = 23;
      private com.richardpianka.chess.network.Contracts.LeaveGameRequest leaveGameRequest_ = com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.LeaveGameRequest, com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder, com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder> leaveGameRequestBuilder_;
      public boolean hasLeaveGameRequest() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest getLeaveGameRequest() {
        if (leaveGameRequestBuilder_ == null) {
          return leaveGameRequest_;
        } else {
          return leaveGameRequestBuilder_.getMessage();
        }
      }
      public Builder setLeaveGameRequest(com.richardpianka.chess.network.Contracts.LeaveGameRequest value) {
        if (leaveGameRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leaveGameRequest_ = value;
          onChanged();
        } else {
          leaveGameRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      public Builder setLeaveGameRequest(
          com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder builderForValue) {
        if (leaveGameRequestBuilder_ == null) {
          leaveGameRequest_ = builderForValue.build();
          onChanged();
        } else {
          leaveGameRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      public Builder mergeLeaveGameRequest(com.richardpianka.chess.network.Contracts.LeaveGameRequest value) {
        if (leaveGameRequestBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              leaveGameRequest_ != com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance()) {
            leaveGameRequest_ =
              com.richardpianka.chess.network.Contracts.LeaveGameRequest.newBuilder(leaveGameRequest_).mergeFrom(value).buildPartial();
          } else {
            leaveGameRequest_ = value;
          }
          onChanged();
        } else {
          leaveGameRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      public Builder clearLeaveGameRequest() {
        if (leaveGameRequestBuilder_ == null) {
          leaveGameRequest_ = com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance();
          onChanged();
        } else {
          leaveGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder getLeaveGameRequestBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getLeaveGameRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder getLeaveGameRequestOrBuilder() {
        if (leaveGameRequestBuilder_ != null) {
          return leaveGameRequestBuilder_.getMessageOrBuilder();
        } else {
          return leaveGameRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.LeaveGameRequest, com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder, com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder> 
          getLeaveGameRequestFieldBuilder() {
        if (leaveGameRequestBuilder_ == null) {
          leaveGameRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.LeaveGameRequest, com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder, com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder>(
                  leaveGameRequest_,
                  getParentForChildren(),
                  isClean());
          leaveGameRequest_ = null;
        }
        return leaveGameRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.StartGameRequest StartGameRequest = 24;
      private com.richardpianka.chess.network.Contracts.StartGameRequest startGameRequest_ = com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.StartGameRequest, com.richardpianka.chess.network.Contracts.StartGameRequest.Builder, com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder> startGameRequestBuilder_;
      public boolean hasStartGameRequest() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      public com.richardpianka.chess.network.Contracts.StartGameRequest getStartGameRequest() {
        if (startGameRequestBuilder_ == null) {
          return startGameRequest_;
        } else {
          return startGameRequestBuilder_.getMessage();
        }
      }
      public Builder setStartGameRequest(com.richardpianka.chess.network.Contracts.StartGameRequest value) {
        if (startGameRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startGameRequest_ = value;
          onChanged();
        } else {
          startGameRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      public Builder setStartGameRequest(
          com.richardpianka.chess.network.Contracts.StartGameRequest.Builder builderForValue) {
        if (startGameRequestBuilder_ == null) {
          startGameRequest_ = builderForValue.build();
          onChanged();
        } else {
          startGameRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      public Builder mergeStartGameRequest(com.richardpianka.chess.network.Contracts.StartGameRequest value) {
        if (startGameRequestBuilder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              startGameRequest_ != com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance()) {
            startGameRequest_ =
              com.richardpianka.chess.network.Contracts.StartGameRequest.newBuilder(startGameRequest_).mergeFrom(value).buildPartial();
          } else {
            startGameRequest_ = value;
          }
          onChanged();
        } else {
          startGameRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      public Builder clearStartGameRequest() {
        if (startGameRequestBuilder_ == null) {
          startGameRequest_ = com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance();
          onChanged();
        } else {
          startGameRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.StartGameRequest.Builder getStartGameRequestBuilder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getStartGameRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder getStartGameRequestOrBuilder() {
        if (startGameRequestBuilder_ != null) {
          return startGameRequestBuilder_.getMessageOrBuilder();
        } else {
          return startGameRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.StartGameRequest, com.richardpianka.chess.network.Contracts.StartGameRequest.Builder, com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder> 
          getStartGameRequestFieldBuilder() {
        if (startGameRequestBuilder_ == null) {
          startGameRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.StartGameRequest, com.richardpianka.chess.network.Contracts.StartGameRequest.Builder, com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder>(
                  startGameRequest_,
                  getParentForChildren(),
                  isClean());
          startGameRequest_ = null;
        }
        return startGameRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.StartGameResponse StartGameResponse = 25;
      private com.richardpianka.chess.network.Contracts.StartGameResponse startGameResponse_ = com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.StartGameResponse, com.richardpianka.chess.network.Contracts.StartGameResponse.Builder, com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder> startGameResponseBuilder_;
      public boolean hasStartGameResponse() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      public com.richardpianka.chess.network.Contracts.StartGameResponse getStartGameResponse() {
        if (startGameResponseBuilder_ == null) {
          return startGameResponse_;
        } else {
          return startGameResponseBuilder_.getMessage();
        }
      }
      public Builder setStartGameResponse(com.richardpianka.chess.network.Contracts.StartGameResponse value) {
        if (startGameResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          startGameResponse_ = value;
          onChanged();
        } else {
          startGameResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      public Builder setStartGameResponse(
          com.richardpianka.chess.network.Contracts.StartGameResponse.Builder builderForValue) {
        if (startGameResponseBuilder_ == null) {
          startGameResponse_ = builderForValue.build();
          onChanged();
        } else {
          startGameResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      public Builder mergeStartGameResponse(com.richardpianka.chess.network.Contracts.StartGameResponse value) {
        if (startGameResponseBuilder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              startGameResponse_ != com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance()) {
            startGameResponse_ =
              com.richardpianka.chess.network.Contracts.StartGameResponse.newBuilder(startGameResponse_).mergeFrom(value).buildPartial();
          } else {
            startGameResponse_ = value;
          }
          onChanged();
        } else {
          startGameResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      public Builder clearStartGameResponse() {
        if (startGameResponseBuilder_ == null) {
          startGameResponse_ = com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance();
          onChanged();
        } else {
          startGameResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.StartGameResponse.Builder getStartGameResponseBuilder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getStartGameResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder getStartGameResponseOrBuilder() {
        if (startGameResponseBuilder_ != null) {
          return startGameResponseBuilder_.getMessageOrBuilder();
        } else {
          return startGameResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.StartGameResponse, com.richardpianka.chess.network.Contracts.StartGameResponse.Builder, com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder> 
          getStartGameResponseFieldBuilder() {
        if (startGameResponseBuilder_ == null) {
          startGameResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.StartGameResponse, com.richardpianka.chess.network.Contracts.StartGameResponse.Builder, com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder>(
                  startGameResponse_,
                  getParentForChildren(),
                  isClean());
          startGameResponse_ = null;
        }
        return startGameResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.GameStartedEvent GameStartedEvent = 26;
      private com.richardpianka.chess.network.Contracts.GameStartedEvent gameStartedEvent_ = com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameStartedEvent, com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder, com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder> gameStartedEventBuilder_;
      public boolean hasGameStartedEvent() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      public com.richardpianka.chess.network.Contracts.GameStartedEvent getGameStartedEvent() {
        if (gameStartedEventBuilder_ == null) {
          return gameStartedEvent_;
        } else {
          return gameStartedEventBuilder_.getMessage();
        }
      }
      public Builder setGameStartedEvent(com.richardpianka.chess.network.Contracts.GameStartedEvent value) {
        if (gameStartedEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameStartedEvent_ = value;
          onChanged();
        } else {
          gameStartedEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      public Builder setGameStartedEvent(
          com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder builderForValue) {
        if (gameStartedEventBuilder_ == null) {
          gameStartedEvent_ = builderForValue.build();
          onChanged();
        } else {
          gameStartedEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      public Builder mergeGameStartedEvent(com.richardpianka.chess.network.Contracts.GameStartedEvent value) {
        if (gameStartedEventBuilder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              gameStartedEvent_ != com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance()) {
            gameStartedEvent_ =
              com.richardpianka.chess.network.Contracts.GameStartedEvent.newBuilder(gameStartedEvent_).mergeFrom(value).buildPartial();
          } else {
            gameStartedEvent_ = value;
          }
          onChanged();
        } else {
          gameStartedEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      public Builder clearGameStartedEvent() {
        if (gameStartedEventBuilder_ == null) {
          gameStartedEvent_ = com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance();
          onChanged();
        } else {
          gameStartedEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder getGameStartedEventBuilder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getGameStartedEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder getGameStartedEventOrBuilder() {
        if (gameStartedEventBuilder_ != null) {
          return gameStartedEventBuilder_.getMessageOrBuilder();
        } else {
          return gameStartedEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameStartedEvent, com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder, com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder> 
          getGameStartedEventFieldBuilder() {
        if (gameStartedEventBuilder_ == null) {
          gameStartedEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.GameStartedEvent, com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder, com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder>(
                  gameStartedEvent_,
                  getParentForChildren(),
                  isClean());
          gameStartedEvent_ = null;
        }
        return gameStartedEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.MovePieceRequest MovePieceRequest = 27;
      private com.richardpianka.chess.network.Contracts.MovePieceRequest movePieceRequest_ = com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceRequest, com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder> movePieceRequestBuilder_;
      public boolean hasMovePieceRequest() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      public com.richardpianka.chess.network.Contracts.MovePieceRequest getMovePieceRequest() {
        if (movePieceRequestBuilder_ == null) {
          return movePieceRequest_;
        } else {
          return movePieceRequestBuilder_.getMessage();
        }
      }
      public Builder setMovePieceRequest(com.richardpianka.chess.network.Contracts.MovePieceRequest value) {
        if (movePieceRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          movePieceRequest_ = value;
          onChanged();
        } else {
          movePieceRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      public Builder setMovePieceRequest(
          com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder builderForValue) {
        if (movePieceRequestBuilder_ == null) {
          movePieceRequest_ = builderForValue.build();
          onChanged();
        } else {
          movePieceRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      public Builder mergeMovePieceRequest(com.richardpianka.chess.network.Contracts.MovePieceRequest value) {
        if (movePieceRequestBuilder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              movePieceRequest_ != com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance()) {
            movePieceRequest_ =
              com.richardpianka.chess.network.Contracts.MovePieceRequest.newBuilder(movePieceRequest_).mergeFrom(value).buildPartial();
          } else {
            movePieceRequest_ = value;
          }
          onChanged();
        } else {
          movePieceRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      public Builder clearMovePieceRequest() {
        if (movePieceRequestBuilder_ == null) {
          movePieceRequest_ = com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance();
          onChanged();
        } else {
          movePieceRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder getMovePieceRequestBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getMovePieceRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder getMovePieceRequestOrBuilder() {
        if (movePieceRequestBuilder_ != null) {
          return movePieceRequestBuilder_.getMessageOrBuilder();
        } else {
          return movePieceRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceRequest, com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder> 
          getMovePieceRequestFieldBuilder() {
        if (movePieceRequestBuilder_ == null) {
          movePieceRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.MovePieceRequest, com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder>(
                  movePieceRequest_,
                  getParentForChildren(),
                  isClean());
          movePieceRequest_ = null;
        }
        return movePieceRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.MovePieceResponse MovePieceResponse = 28;
      private com.richardpianka.chess.network.Contracts.MovePieceResponse movePieceResponse_ = com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceResponse, com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder> movePieceResponseBuilder_;
      public boolean hasMovePieceResponse() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      public com.richardpianka.chess.network.Contracts.MovePieceResponse getMovePieceResponse() {
        if (movePieceResponseBuilder_ == null) {
          return movePieceResponse_;
        } else {
          return movePieceResponseBuilder_.getMessage();
        }
      }
      public Builder setMovePieceResponse(com.richardpianka.chess.network.Contracts.MovePieceResponse value) {
        if (movePieceResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          movePieceResponse_ = value;
          onChanged();
        } else {
          movePieceResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      public Builder setMovePieceResponse(
          com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder builderForValue) {
        if (movePieceResponseBuilder_ == null) {
          movePieceResponse_ = builderForValue.build();
          onChanged();
        } else {
          movePieceResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      public Builder mergeMovePieceResponse(com.richardpianka.chess.network.Contracts.MovePieceResponse value) {
        if (movePieceResponseBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              movePieceResponse_ != com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance()) {
            movePieceResponse_ =
              com.richardpianka.chess.network.Contracts.MovePieceResponse.newBuilder(movePieceResponse_).mergeFrom(value).buildPartial();
          } else {
            movePieceResponse_ = value;
          }
          onChanged();
        } else {
          movePieceResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      public Builder clearMovePieceResponse() {
        if (movePieceResponseBuilder_ == null) {
          movePieceResponse_ = com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance();
          onChanged();
        } else {
          movePieceResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder getMovePieceResponseBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getMovePieceResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder getMovePieceResponseOrBuilder() {
        if (movePieceResponseBuilder_ != null) {
          return movePieceResponseBuilder_.getMessageOrBuilder();
        } else {
          return movePieceResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceResponse, com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder> 
          getMovePieceResponseFieldBuilder() {
        if (movePieceResponseBuilder_ == null) {
          movePieceResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.MovePieceResponse, com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder>(
                  movePieceResponse_,
                  getParentForChildren(),
                  isClean());
          movePieceResponse_ = null;
        }
        return movePieceResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.MovePieceEvent MovePieceEvent = 29;
      private com.richardpianka.chess.network.Contracts.MovePieceEvent movePieceEvent_ = com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceEvent, com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder> movePieceEventBuilder_;
      public boolean hasMovePieceEvent() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      public com.richardpianka.chess.network.Contracts.MovePieceEvent getMovePieceEvent() {
        if (movePieceEventBuilder_ == null) {
          return movePieceEvent_;
        } else {
          return movePieceEventBuilder_.getMessage();
        }
      }
      public Builder setMovePieceEvent(com.richardpianka.chess.network.Contracts.MovePieceEvent value) {
        if (movePieceEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          movePieceEvent_ = value;
          onChanged();
        } else {
          movePieceEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      public Builder setMovePieceEvent(
          com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder builderForValue) {
        if (movePieceEventBuilder_ == null) {
          movePieceEvent_ = builderForValue.build();
          onChanged();
        } else {
          movePieceEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      public Builder mergeMovePieceEvent(com.richardpianka.chess.network.Contracts.MovePieceEvent value) {
        if (movePieceEventBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              movePieceEvent_ != com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance()) {
            movePieceEvent_ =
              com.richardpianka.chess.network.Contracts.MovePieceEvent.newBuilder(movePieceEvent_).mergeFrom(value).buildPartial();
          } else {
            movePieceEvent_ = value;
          }
          onChanged();
        } else {
          movePieceEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      public Builder clearMovePieceEvent() {
        if (movePieceEventBuilder_ == null) {
          movePieceEvent_ = com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance();
          onChanged();
        } else {
          movePieceEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder getMovePieceEventBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getMovePieceEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder getMovePieceEventOrBuilder() {
        if (movePieceEventBuilder_ != null) {
          return movePieceEventBuilder_.getMessageOrBuilder();
        } else {
          return movePieceEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.MovePieceEvent, com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder> 
          getMovePieceEventFieldBuilder() {
        if (movePieceEventBuilder_ == null) {
          movePieceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.MovePieceEvent, com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder>(
                  movePieceEvent_,
                  getParentForChildren(),
                  isClean());
          movePieceEvent_ = null;
        }
        return movePieceEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.SpecialMovePieceRequest SpecialMovePieceRequest = 30;
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest specialMovePieceRequest_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder> specialMovePieceRequestBuilder_;
      public boolean hasSpecialMovePieceRequest() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest getSpecialMovePieceRequest() {
        if (specialMovePieceRequestBuilder_ == null) {
          return specialMovePieceRequest_;
        } else {
          return specialMovePieceRequestBuilder_.getMessage();
        }
      }
      public Builder setSpecialMovePieceRequest(com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest value) {
        if (specialMovePieceRequestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          specialMovePieceRequest_ = value;
          onChanged();
        } else {
          specialMovePieceRequestBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      public Builder setSpecialMovePieceRequest(
          com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder builderForValue) {
        if (specialMovePieceRequestBuilder_ == null) {
          specialMovePieceRequest_ = builderForValue.build();
          onChanged();
        } else {
          specialMovePieceRequestBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      public Builder mergeSpecialMovePieceRequest(com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest value) {
        if (specialMovePieceRequestBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              specialMovePieceRequest_ != com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance()) {
            specialMovePieceRequest_ =
              com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.newBuilder(specialMovePieceRequest_).mergeFrom(value).buildPartial();
          } else {
            specialMovePieceRequest_ = value;
          }
          onChanged();
        } else {
          specialMovePieceRequestBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      public Builder clearSpecialMovePieceRequest() {
        if (specialMovePieceRequestBuilder_ == null) {
          specialMovePieceRequest_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance();
          onChanged();
        } else {
          specialMovePieceRequestBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder getSpecialMovePieceRequestBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getSpecialMovePieceRequestFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder getSpecialMovePieceRequestOrBuilder() {
        if (specialMovePieceRequestBuilder_ != null) {
          return specialMovePieceRequestBuilder_.getMessageOrBuilder();
        } else {
          return specialMovePieceRequest_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder> 
          getSpecialMovePieceRequestFieldBuilder() {
        if (specialMovePieceRequestBuilder_ == null) {
          specialMovePieceRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder>(
                  specialMovePieceRequest_,
                  getParentForChildren(),
                  isClean());
          specialMovePieceRequest_ = null;
        }
        return specialMovePieceRequestBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.SpecialMovePieceResponse SpecialMovePieceResponse = 31;
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse specialMovePieceResponse_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder> specialMovePieceResponseBuilder_;
      public boolean hasSpecialMovePieceResponse() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse getSpecialMovePieceResponse() {
        if (specialMovePieceResponseBuilder_ == null) {
          return specialMovePieceResponse_;
        } else {
          return specialMovePieceResponseBuilder_.getMessage();
        }
      }
      public Builder setSpecialMovePieceResponse(com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse value) {
        if (specialMovePieceResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          specialMovePieceResponse_ = value;
          onChanged();
        } else {
          specialMovePieceResponseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      public Builder setSpecialMovePieceResponse(
          com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder builderForValue) {
        if (specialMovePieceResponseBuilder_ == null) {
          specialMovePieceResponse_ = builderForValue.build();
          onChanged();
        } else {
          specialMovePieceResponseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      public Builder mergeSpecialMovePieceResponse(com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse value) {
        if (specialMovePieceResponseBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              specialMovePieceResponse_ != com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance()) {
            specialMovePieceResponse_ =
              com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.newBuilder(specialMovePieceResponse_).mergeFrom(value).buildPartial();
          } else {
            specialMovePieceResponse_ = value;
          }
          onChanged();
        } else {
          specialMovePieceResponseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      public Builder clearSpecialMovePieceResponse() {
        if (specialMovePieceResponseBuilder_ == null) {
          specialMovePieceResponse_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance();
          onChanged();
        } else {
          specialMovePieceResponseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder getSpecialMovePieceResponseBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getSpecialMovePieceResponseFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder getSpecialMovePieceResponseOrBuilder() {
        if (specialMovePieceResponseBuilder_ != null) {
          return specialMovePieceResponseBuilder_.getMessageOrBuilder();
        } else {
          return specialMovePieceResponse_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder> 
          getSpecialMovePieceResponseFieldBuilder() {
        if (specialMovePieceResponseBuilder_ == null) {
          specialMovePieceResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder>(
                  specialMovePieceResponse_,
                  getParentForChildren(),
                  isClean());
          specialMovePieceResponse_ = null;
        }
        return specialMovePieceResponseBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.SpecialMovePieceEvent SpecialMovePieceEvent = 32;
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent specialMovePieceEvent_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent, com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder> specialMovePieceEventBuilder_;
      public boolean hasSpecialMovePieceEvent() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent getSpecialMovePieceEvent() {
        if (specialMovePieceEventBuilder_ == null) {
          return specialMovePieceEvent_;
        } else {
          return specialMovePieceEventBuilder_.getMessage();
        }
      }
      public Builder setSpecialMovePieceEvent(com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent value) {
        if (specialMovePieceEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          specialMovePieceEvent_ = value;
          onChanged();
        } else {
          specialMovePieceEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      public Builder setSpecialMovePieceEvent(
          com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder builderForValue) {
        if (specialMovePieceEventBuilder_ == null) {
          specialMovePieceEvent_ = builderForValue.build();
          onChanged();
        } else {
          specialMovePieceEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      public Builder mergeSpecialMovePieceEvent(com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent value) {
        if (specialMovePieceEventBuilder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              specialMovePieceEvent_ != com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance()) {
            specialMovePieceEvent_ =
              com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.newBuilder(specialMovePieceEvent_).mergeFrom(value).buildPartial();
          } else {
            specialMovePieceEvent_ = value;
          }
          onChanged();
        } else {
          specialMovePieceEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      public Builder clearSpecialMovePieceEvent() {
        if (specialMovePieceEventBuilder_ == null) {
          specialMovePieceEvent_ = com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance();
          onChanged();
        } else {
          specialMovePieceEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder getSpecialMovePieceEventBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getSpecialMovePieceEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder getSpecialMovePieceEventOrBuilder() {
        if (specialMovePieceEventBuilder_ != null) {
          return specialMovePieceEventBuilder_.getMessageOrBuilder();
        } else {
          return specialMovePieceEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent, com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder> 
          getSpecialMovePieceEventFieldBuilder() {
        if (specialMovePieceEventBuilder_ == null) {
          specialMovePieceEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent, com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder, com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder>(
                  specialMovePieceEvent_,
                  getParentForChildren(),
                  isClean());
          specialMovePieceEvent_ = null;
        }
        return specialMovePieceEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.GameStatusEvent GameStatusEvent = 34;
      private com.richardpianka.chess.network.Contracts.GameStatusEvent gameStatusEvent_ = com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameStatusEvent, com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder, com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder> gameStatusEventBuilder_;
      public boolean hasGameStatusEvent() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.GameStatusEvent getGameStatusEvent() {
        if (gameStatusEventBuilder_ == null) {
          return gameStatusEvent_;
        } else {
          return gameStatusEventBuilder_.getMessage();
        }
      }
      public Builder setGameStatusEvent(com.richardpianka.chess.network.Contracts.GameStatusEvent value) {
        if (gameStatusEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameStatusEvent_ = value;
          onChanged();
        } else {
          gameStatusEventBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      public Builder setGameStatusEvent(
          com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder builderForValue) {
        if (gameStatusEventBuilder_ == null) {
          gameStatusEvent_ = builderForValue.build();
          onChanged();
        } else {
          gameStatusEventBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      public Builder mergeGameStatusEvent(com.richardpianka.chess.network.Contracts.GameStatusEvent value) {
        if (gameStatusEventBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              gameStatusEvent_ != com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance()) {
            gameStatusEvent_ =
              com.richardpianka.chess.network.Contracts.GameStatusEvent.newBuilder(gameStatusEvent_).mergeFrom(value).buildPartial();
          } else {
            gameStatusEvent_ = value;
          }
          onChanged();
        } else {
          gameStatusEventBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      public Builder clearGameStatusEvent() {
        if (gameStatusEventBuilder_ == null) {
          gameStatusEvent_ = com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance();
          onChanged();
        } else {
          gameStatusEventBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder getGameStatusEventBuilder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getGameStatusEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder getGameStatusEventOrBuilder() {
        if (gameStatusEventBuilder_ != null) {
          return gameStatusEventBuilder_.getMessageOrBuilder();
        } else {
          return gameStatusEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameStatusEvent, com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder, com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder> 
          getGameStatusEventFieldBuilder() {
        if (gameStatusEventBuilder_ == null) {
          gameStatusEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.GameStatusEvent, com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder, com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder>(
                  gameStatusEvent_,
                  getParentForChildren(),
                  isClean());
          gameStatusEvent_ = null;
        }
        return gameStatusEventBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.TimeLeftEvent TimeLeftEvent = 35;
      private com.richardpianka.chess.network.Contracts.TimeLeftEvent timeLeftEvent_ = com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.TimeLeftEvent, com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder, com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder> timeLeftEventBuilder_;
      public boolean hasTimeLeftEvent() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent getTimeLeftEvent() {
        if (timeLeftEventBuilder_ == null) {
          return timeLeftEvent_;
        } else {
          return timeLeftEventBuilder_.getMessage();
        }
      }
      public Builder setTimeLeftEvent(com.richardpianka.chess.network.Contracts.TimeLeftEvent value) {
        if (timeLeftEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeLeftEvent_ = value;
          onChanged();
        } else {
          timeLeftEventBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      public Builder setTimeLeftEvent(
          com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder builderForValue) {
        if (timeLeftEventBuilder_ == null) {
          timeLeftEvent_ = builderForValue.build();
          onChanged();
        } else {
          timeLeftEventBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      public Builder mergeTimeLeftEvent(com.richardpianka.chess.network.Contracts.TimeLeftEvent value) {
        if (timeLeftEventBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              timeLeftEvent_ != com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance()) {
            timeLeftEvent_ =
              com.richardpianka.chess.network.Contracts.TimeLeftEvent.newBuilder(timeLeftEvent_).mergeFrom(value).buildPartial();
          } else {
            timeLeftEvent_ = value;
          }
          onChanged();
        } else {
          timeLeftEventBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      public Builder clearTimeLeftEvent() {
        if (timeLeftEventBuilder_ == null) {
          timeLeftEvent_ = com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance();
          onChanged();
        } else {
          timeLeftEventBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder getTimeLeftEventBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getTimeLeftEventFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder getTimeLeftEventOrBuilder() {
        if (timeLeftEventBuilder_ != null) {
          return timeLeftEventBuilder_.getMessageOrBuilder();
        } else {
          return timeLeftEvent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.TimeLeftEvent, com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder, com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder> 
          getTimeLeftEventFieldBuilder() {
        if (timeLeftEventBuilder_ == null) {
          timeLeftEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.TimeLeftEvent, com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder, com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder>(
                  timeLeftEvent_,
                  getParentForChildren(),
                  isClean());
          timeLeftEvent_ = null;
        }
        return timeLeftEventBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Envelope)
    }
    
    static {
      defaultInstance = new Envelope(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Envelope)
  }
  
  public interface CoordinateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.File File = 1;
    boolean hasFile();
    com.richardpianka.chess.network.Contracts.File getFile();
    
    // required .com.richardpianka.chess.network.Rank Rank = 2;
    boolean hasRank();
    com.richardpianka.chess.network.Contracts.Rank getRank();
  }
  public static final class Coordinate extends
      com.google.protobuf.GeneratedMessage
      implements CoordinateOrBuilder {
    // Use Coordinate.newBuilder() to construct.
    private Coordinate(Coordinate.Builder builder) {
      super(builder);
    }
    private Coordinate(boolean noInit) {}
    
    private static final Coordinate defaultInstance;
    public static Coordinate getDefaultInstance() {
      return defaultInstance;
    }
    
    public Coordinate getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Coordinate_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Coordinate_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.File File = 1;
    public static final int FILE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.File file_;
    public boolean hasFile() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.File getFile() {
      return file_;
    }
    
    // required .com.richardpianka.chess.network.Rank Rank = 2;
    public static final int RANK_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Rank rank_;
    public boolean hasRank() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Rank getRank() {
      return rank_;
    }
    
    private void initFields() {
      file_ = com.richardpianka.chess.network.Contracts.File._A;
      rank_ = com.richardpianka.chess.network.Contracts.Rank._1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasFile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRank()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, file_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, rank_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, file_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, rank_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Coordinate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Coordinate.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Coordinate.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Coordinate.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Coordinate.Builder newBuilder(com.richardpianka.chess.network.Contracts.Coordinate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Coordinate.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Coordinate.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Coordinate.Builder builder = new com.richardpianka.chess.network.Contracts.Coordinate.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.CoordinateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Coordinate_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Coordinate_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Coordinate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        file_ = com.richardpianka.chess.network.Contracts.File._A;
        bitField0_ = (bitField0_ & ~0x00000001);
        rank_ = com.richardpianka.chess.network.Contracts.Rank._1;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Coordinate.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Coordinate getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Coordinate build() {
        com.richardpianka.chess.network.Contracts.Coordinate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Coordinate buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Coordinate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Coordinate buildPartial() {
        com.richardpianka.chess.network.Contracts.Coordinate result = new com.richardpianka.chess.network.Contracts.Coordinate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.file_ = file_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rank_ = rank_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Coordinate.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Coordinate) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Coordinate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Coordinate.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Coordinate other) {
        if (other == com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance()) return this;
        if (other.hasFile()) {
          setFile(other.getFile());
        }
        if (other.hasRank()) {
          setRank(other.getRank());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasFile()) {
          
          return false;
        }
        if (!hasRank()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.File value = com.richardpianka.chess.network.Contracts.File.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                file_ = value;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Rank value = com.richardpianka.chess.network.Contracts.Rank.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                rank_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.File File = 1;
      private com.richardpianka.chess.network.Contracts.File file_ = com.richardpianka.chess.network.Contracts.File._A;
      public boolean hasFile() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.File getFile() {
        return file_;
      }
      public Builder setFile(com.richardpianka.chess.network.Contracts.File value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        file_ = value;
        onChanged();
        return this;
      }
      public Builder clearFile() {
        bitField0_ = (bitField0_ & ~0x00000001);
        file_ = com.richardpianka.chess.network.Contracts.File._A;
        onChanged();
        return this;
      }
      
      // required .com.richardpianka.chess.network.Rank Rank = 2;
      private com.richardpianka.chess.network.Contracts.Rank rank_ = com.richardpianka.chess.network.Contracts.Rank._1;
      public boolean hasRank() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Rank getRank() {
        return rank_;
      }
      public Builder setRank(com.richardpianka.chess.network.Contracts.Rank value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        rank_ = value;
        onChanged();
        return this;
      }
      public Builder clearRank() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rank_ = com.richardpianka.chess.network.Contracts.Rank._1;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Coordinate)
    }
    
    static {
      defaultInstance = new Coordinate(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Coordinate)
  }
  
  public interface PieceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Color Color = 1;
    boolean hasColor();
    com.richardpianka.chess.network.Contracts.Color getColor();
    
    // required .com.richardpianka.chess.network.Figurine Figurine = 2;
    boolean hasFigurine();
    com.richardpianka.chess.network.Contracts.Figurine getFigurine();
    
    // required uint32 Number = 3;
    boolean hasNumber();
    int getNumber();
  }
  public static final class Piece extends
      com.google.protobuf.GeneratedMessage
      implements PieceOrBuilder {
    // Use Piece.newBuilder() to construct.
    private Piece(Piece.Builder builder) {
      super(builder);
    }
    private Piece(boolean noInit) {}
    
    private static final Piece defaultInstance;
    public static Piece getDefaultInstance() {
      return defaultInstance;
    }
    
    public Piece getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Piece_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Piece_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Color Color = 1;
    public static final int COLOR_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Color color_;
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Color getColor() {
      return color_;
    }
    
    // required .com.richardpianka.chess.network.Figurine Figurine = 2;
    public static final int FIGURINE_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Figurine figurine_;
    public boolean hasFigurine() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Figurine getFigurine() {
      return figurine_;
    }
    
    // required uint32 Number = 3;
    public static final int NUMBER_FIELD_NUMBER = 3;
    private int number_;
    public boolean hasNumber() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getNumber() {
      return number_;
    }
    
    private void initFields() {
      color_ = com.richardpianka.chess.network.Contracts.Color.White;
      figurine_ = com.richardpianka.chess.network.Contracts.Figurine.King;
      number_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFigurine()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumber()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, color_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, figurine_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, number_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, color_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, figurine_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, number_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Piece parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Piece.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Piece.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Piece.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Piece.Builder newBuilder(com.richardpianka.chess.network.Contracts.Piece prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Piece.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Piece.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Piece.Builder builder = new com.richardpianka.chess.network.Contracts.Piece.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.PieceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Piece_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Piece_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Piece.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        color_ = com.richardpianka.chess.network.Contracts.Color.White;
        bitField0_ = (bitField0_ & ~0x00000001);
        figurine_ = com.richardpianka.chess.network.Contracts.Figurine.King;
        bitField0_ = (bitField0_ & ~0x00000002);
        number_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Piece.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Piece getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Piece build() {
        com.richardpianka.chess.network.Contracts.Piece result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Piece buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Piece result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Piece buildPartial() {
        com.richardpianka.chess.network.Contracts.Piece result = new com.richardpianka.chess.network.Contracts.Piece(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.figurine_ = figurine_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.number_ = number_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Piece.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Piece) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Piece)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Piece.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Piece other) {
        if (other == com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance()) return this;
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        if (other.hasFigurine()) {
          setFigurine(other.getFigurine());
        }
        if (other.hasNumber()) {
          setNumber(other.getNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasColor()) {
          
          return false;
        }
        if (!hasFigurine()) {
          
          return false;
        }
        if (!hasNumber()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Color value = com.richardpianka.chess.network.Contracts.Color.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                color_ = value;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Figurine value = com.richardpianka.chess.network.Contracts.Figurine.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                figurine_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              number_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Color Color = 1;
      private com.richardpianka.chess.network.Contracts.Color color_ = com.richardpianka.chess.network.Contracts.Color.White;
      public boolean hasColor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Color getColor() {
        return color_;
      }
      public Builder setColor(com.richardpianka.chess.network.Contracts.Color value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        color_ = value;
        onChanged();
        return this;
      }
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = com.richardpianka.chess.network.Contracts.Color.White;
        onChanged();
        return this;
      }
      
      // required .com.richardpianka.chess.network.Figurine Figurine = 2;
      private com.richardpianka.chess.network.Contracts.Figurine figurine_ = com.richardpianka.chess.network.Contracts.Figurine.King;
      public boolean hasFigurine() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Figurine getFigurine() {
        return figurine_;
      }
      public Builder setFigurine(com.richardpianka.chess.network.Contracts.Figurine value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        figurine_ = value;
        onChanged();
        return this;
      }
      public Builder clearFigurine() {
        bitField0_ = (bitField0_ & ~0x00000002);
        figurine_ = com.richardpianka.chess.network.Contracts.Figurine.King;
        onChanged();
        return this;
      }
      
      // required uint32 Number = 3;
      private int number_ ;
      public boolean hasNumber() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getNumber() {
        return number_;
      }
      public Builder setNumber(int value) {
        bitField0_ |= 0x00000004;
        number_ = value;
        onChanged();
        return this;
      }
      public Builder clearNumber() {
        bitField0_ = (bitField0_ & ~0x00000004);
        number_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Piece)
    }
    
    static {
      defaultInstance = new Piece(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Piece)
  }
  
  public interface MoveOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Piece Piece = 1;
    boolean hasPiece();
    com.richardpianka.chess.network.Contracts.Piece getPiece();
    com.richardpianka.chess.network.Contracts.PieceOrBuilder getPieceOrBuilder();
    
    // required .com.richardpianka.chess.network.Coordinate Start = 2;
    boolean hasStart();
    com.richardpianka.chess.network.Contracts.Coordinate getStart();
    com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getStartOrBuilder();
    
    // required .com.richardpianka.chess.network.Coordinate End = 3;
    boolean hasEnd();
    com.richardpianka.chess.network.Contracts.Coordinate getEnd();
    com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getEndOrBuilder();
  }
  public static final class Move extends
      com.google.protobuf.GeneratedMessage
      implements MoveOrBuilder {
    // Use Move.newBuilder() to construct.
    private Move(Move.Builder builder) {
      super(builder);
    }
    private Move(boolean noInit) {}
    
    private static final Move defaultInstance;
    public static Move getDefaultInstance() {
      return defaultInstance;
    }
    
    public Move getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Move_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Move_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Piece Piece = 1;
    public static final int PIECE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Piece piece_;
    public boolean hasPiece() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Piece getPiece() {
      return piece_;
    }
    public com.richardpianka.chess.network.Contracts.PieceOrBuilder getPieceOrBuilder() {
      return piece_;
    }
    
    // required .com.richardpianka.chess.network.Coordinate Start = 2;
    public static final int START_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Coordinate start_;
    public boolean hasStart() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Coordinate getStart() {
      return start_;
    }
    public com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getStartOrBuilder() {
      return start_;
    }
    
    // required .com.richardpianka.chess.network.Coordinate End = 3;
    public static final int END_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.Coordinate end_;
    public boolean hasEnd() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.Coordinate getEnd() {
      return end_;
    }
    public com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getEndOrBuilder() {
      return end_;
    }
    
    private void initFields() {
      piece_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      start_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
      end_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasPiece()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEnd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPiece().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getStart().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getEnd().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, piece_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, start_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, end_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, piece_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, start_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, end_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Move parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Move parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Move.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Move.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Move.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Move.Builder newBuilder(com.richardpianka.chess.network.Contracts.Move prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Move.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Move.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Move.Builder builder = new com.richardpianka.chess.network.Contracts.Move.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.MoveOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Move_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Move_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Move.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPieceFieldBuilder();
          getStartFieldBuilder();
          getEndFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (pieceBuilder_ == null) {
          piece_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
        } else {
          pieceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (startBuilder_ == null) {
          start_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (endBuilder_ == null) {
          end_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
        } else {
          endBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Move.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Move getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Move build() {
        com.richardpianka.chess.network.Contracts.Move result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Move buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Move result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Move buildPartial() {
        com.richardpianka.chess.network.Contracts.Move result = new com.richardpianka.chess.network.Contracts.Move(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (pieceBuilder_ == null) {
          result.piece_ = piece_;
        } else {
          result.piece_ = pieceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (startBuilder_ == null) {
          result.start_ = start_;
        } else {
          result.start_ = startBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (endBuilder_ == null) {
          result.end_ = end_;
        } else {
          result.end_ = endBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Move.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Move) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Move)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Move.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Move other) {
        if (other == com.richardpianka.chess.network.Contracts.Move.getDefaultInstance()) return this;
        if (other.hasPiece()) {
          mergePiece(other.getPiece());
        }
        if (other.hasStart()) {
          mergeStart(other.getStart());
        }
        if (other.hasEnd()) {
          mergeEnd(other.getEnd());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasPiece()) {
          
          return false;
        }
        if (!hasStart()) {
          
          return false;
        }
        if (!hasEnd()) {
          
          return false;
        }
        if (!getPiece().isInitialized()) {
          
          return false;
        }
        if (!getStart().isInitialized()) {
          
          return false;
        }
        if (!getEnd().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Piece.Builder subBuilder = com.richardpianka.chess.network.Contracts.Piece.newBuilder();
              if (hasPiece()) {
                subBuilder.mergeFrom(getPiece());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPiece(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.Coordinate.Builder subBuilder = com.richardpianka.chess.network.Contracts.Coordinate.newBuilder();
              if (hasStart()) {
                subBuilder.mergeFrom(getStart());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setStart(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.richardpianka.chess.network.Contracts.Coordinate.Builder subBuilder = com.richardpianka.chess.network.Contracts.Coordinate.newBuilder();
              if (hasEnd()) {
                subBuilder.mergeFrom(getEnd());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEnd(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Piece Piece = 1;
      private com.richardpianka.chess.network.Contracts.Piece piece_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> pieceBuilder_;
      public boolean hasPiece() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Piece getPiece() {
        if (pieceBuilder_ == null) {
          return piece_;
        } else {
          return pieceBuilder_.getMessage();
        }
      }
      public Builder setPiece(com.richardpianka.chess.network.Contracts.Piece value) {
        if (pieceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          piece_ = value;
          onChanged();
        } else {
          pieceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setPiece(
          com.richardpianka.chess.network.Contracts.Piece.Builder builderForValue) {
        if (pieceBuilder_ == null) {
          piece_ = builderForValue.build();
          onChanged();
        } else {
          pieceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergePiece(com.richardpianka.chess.network.Contracts.Piece value) {
        if (pieceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              piece_ != com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance()) {
            piece_ =
              com.richardpianka.chess.network.Contracts.Piece.newBuilder(piece_).mergeFrom(value).buildPartial();
          } else {
            piece_ = value;
          }
          onChanged();
        } else {
          pieceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearPiece() {
        if (pieceBuilder_ == null) {
          piece_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
          onChanged();
        } else {
          pieceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Piece.Builder getPieceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPieceFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.PieceOrBuilder getPieceOrBuilder() {
        if (pieceBuilder_ != null) {
          return pieceBuilder_.getMessageOrBuilder();
        } else {
          return piece_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> 
          getPieceFieldBuilder() {
        if (pieceBuilder_ == null) {
          pieceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder>(
                  piece_,
                  getParentForChildren(),
                  isClean());
          piece_ = null;
        }
        return pieceBuilder_;
      }
      
      // required .com.richardpianka.chess.network.Coordinate Start = 2;
      private com.richardpianka.chess.network.Contracts.Coordinate start_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder> startBuilder_;
      public boolean hasStart() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Coordinate getStart() {
        if (startBuilder_ == null) {
          return start_;
        } else {
          return startBuilder_.getMessage();
        }
      }
      public Builder setStart(com.richardpianka.chess.network.Contracts.Coordinate value) {
        if (startBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          start_ = value;
          onChanged();
        } else {
          startBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setStart(
          com.richardpianka.chess.network.Contracts.Coordinate.Builder builderForValue) {
        if (startBuilder_ == null) {
          start_ = builderForValue.build();
          onChanged();
        } else {
          startBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeStart(com.richardpianka.chess.network.Contracts.Coordinate value) {
        if (startBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              start_ != com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance()) {
            start_ =
              com.richardpianka.chess.network.Contracts.Coordinate.newBuilder(start_).mergeFrom(value).buildPartial();
          } else {
            start_ = value;
          }
          onChanged();
        } else {
          startBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearStart() {
        if (startBuilder_ == null) {
          start_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
          onChanged();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Coordinate.Builder getStartBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStartFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getStartOrBuilder() {
        if (startBuilder_ != null) {
          return startBuilder_.getMessageOrBuilder();
        } else {
          return start_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder> 
          getStartFieldBuilder() {
        if (startBuilder_ == null) {
          startBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder>(
                  start_,
                  getParentForChildren(),
                  isClean());
          start_ = null;
        }
        return startBuilder_;
      }
      
      // required .com.richardpianka.chess.network.Coordinate End = 3;
      private com.richardpianka.chess.network.Contracts.Coordinate end_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder> endBuilder_;
      public boolean hasEnd() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.Coordinate getEnd() {
        if (endBuilder_ == null) {
          return end_;
        } else {
          return endBuilder_.getMessage();
        }
      }
      public Builder setEnd(com.richardpianka.chess.network.Contracts.Coordinate value) {
        if (endBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          end_ = value;
          onChanged();
        } else {
          endBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setEnd(
          com.richardpianka.chess.network.Contracts.Coordinate.Builder builderForValue) {
        if (endBuilder_ == null) {
          end_ = builderForValue.build();
          onChanged();
        } else {
          endBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeEnd(com.richardpianka.chess.network.Contracts.Coordinate value) {
        if (endBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              end_ != com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance()) {
            end_ =
              com.richardpianka.chess.network.Contracts.Coordinate.newBuilder(end_).mergeFrom(value).buildPartial();
          } else {
            end_ = value;
          }
          onChanged();
        } else {
          endBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearEnd() {
        if (endBuilder_ == null) {
          end_ = com.richardpianka.chess.network.Contracts.Coordinate.getDefaultInstance();
          onChanged();
        } else {
          endBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Coordinate.Builder getEndBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getEndFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.CoordinateOrBuilder getEndOrBuilder() {
        if (endBuilder_ != null) {
          return endBuilder_.getMessageOrBuilder();
        } else {
          return end_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder> 
          getEndFieldBuilder() {
        if (endBuilder_ == null) {
          endBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Coordinate, com.richardpianka.chess.network.Contracts.Coordinate.Builder, com.richardpianka.chess.network.Contracts.CoordinateOrBuilder>(
                  end_,
                  getParentForChildren(),
                  isClean());
          end_ = null;
        }
        return endBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Move)
    }
    
    static {
      defaultInstance = new Move(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Move)
  }
  
  public interface SpecialMoveOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .com.richardpianka.chess.network.Castle Castle = 1;
    boolean hasCastle();
    com.richardpianka.chess.network.Contracts.Castle getCastle();
    com.richardpianka.chess.network.Contracts.CastleOrBuilder getCastleOrBuilder();
  }
  public static final class SpecialMove extends
      com.google.protobuf.GeneratedMessage
      implements SpecialMoveOrBuilder {
    // Use SpecialMove.newBuilder() to construct.
    private SpecialMove(SpecialMove.Builder builder) {
      super(builder);
    }
    private SpecialMove(boolean noInit) {}
    
    private static final SpecialMove defaultInstance;
    public static SpecialMove getDefaultInstance() {
      return defaultInstance;
    }
    
    public SpecialMove getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMove_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMove_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .com.richardpianka.chess.network.Castle Castle = 1;
    public static final int CASTLE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Castle castle_;
    public boolean hasCastle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Castle getCastle() {
      return castle_;
    }
    public com.richardpianka.chess.network.Contracts.CastleOrBuilder getCastleOrBuilder() {
      return castle_;
    }
    
    private void initFields() {
      castle_ = com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasCastle()) {
        if (!getCastle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, castle_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, castle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMove parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMove.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.SpecialMove.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.SpecialMove.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.SpecialMove.Builder newBuilder(com.richardpianka.chess.network.Contracts.SpecialMove prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMove.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.SpecialMove.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.SpecialMove.Builder builder = new com.richardpianka.chess.network.Contracts.SpecialMove.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMove_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMove_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.SpecialMove.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCastleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (castleBuilder_ == null) {
          castle_ = com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMove.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMove getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMove build() {
        com.richardpianka.chess.network.Contracts.SpecialMove result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.SpecialMove buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.SpecialMove result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMove buildPartial() {
        com.richardpianka.chess.network.Contracts.SpecialMove result = new com.richardpianka.chess.network.Contracts.SpecialMove(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (castleBuilder_ == null) {
          result.castle_ = castle_;
        } else {
          result.castle_ = castleBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMove.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.SpecialMove) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.SpecialMove)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMove.Builder mergeFrom(com.richardpianka.chess.network.Contracts.SpecialMove other) {
        if (other == com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance()) return this;
        if (other.hasCastle()) {
          mergeCastle(other.getCastle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasCastle()) {
          if (!getCastle().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Castle.Builder subBuilder = com.richardpianka.chess.network.Contracts.Castle.newBuilder();
              if (hasCastle()) {
                subBuilder.mergeFrom(getCastle());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCastle(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .com.richardpianka.chess.network.Castle Castle = 1;
      private com.richardpianka.chess.network.Contracts.Castle castle_ = com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Castle, com.richardpianka.chess.network.Contracts.Castle.Builder, com.richardpianka.chess.network.Contracts.CastleOrBuilder> castleBuilder_;
      public boolean hasCastle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Castle getCastle() {
        if (castleBuilder_ == null) {
          return castle_;
        } else {
          return castleBuilder_.getMessage();
        }
      }
      public Builder setCastle(com.richardpianka.chess.network.Contracts.Castle value) {
        if (castleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          castle_ = value;
          onChanged();
        } else {
          castleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCastle(
          com.richardpianka.chess.network.Contracts.Castle.Builder builderForValue) {
        if (castleBuilder_ == null) {
          castle_ = builderForValue.build();
          onChanged();
        } else {
          castleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCastle(com.richardpianka.chess.network.Contracts.Castle value) {
        if (castleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              castle_ != com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance()) {
            castle_ =
              com.richardpianka.chess.network.Contracts.Castle.newBuilder(castle_).mergeFrom(value).buildPartial();
          } else {
            castle_ = value;
          }
          onChanged();
        } else {
          castleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCastle() {
        if (castleBuilder_ == null) {
          castle_ = com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance();
          onChanged();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Castle.Builder getCastleBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCastleFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.CastleOrBuilder getCastleOrBuilder() {
        if (castleBuilder_ != null) {
          return castleBuilder_.getMessageOrBuilder();
        } else {
          return castle_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Castle, com.richardpianka.chess.network.Contracts.Castle.Builder, com.richardpianka.chess.network.Contracts.CastleOrBuilder> 
          getCastleFieldBuilder() {
        if (castleBuilder_ == null) {
          castleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Castle, com.richardpianka.chess.network.Contracts.Castle.Builder, com.richardpianka.chess.network.Contracts.CastleOrBuilder>(
                  castle_,
                  getParentForChildren(),
                  isClean());
          castle_ = null;
        }
        return castleBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.SpecialMove)
    }
    
    static {
      defaultInstance = new SpecialMove(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.SpecialMove)
  }
  
  public interface CastleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Piece Rook = 1;
    boolean hasRook();
    com.richardpianka.chess.network.Contracts.Piece getRook();
    com.richardpianka.chess.network.Contracts.PieceOrBuilder getRookOrBuilder();
    
    // required .com.richardpianka.chess.network.Piece King = 2;
    boolean hasKing();
    com.richardpianka.chess.network.Contracts.Piece getKing();
    com.richardpianka.chess.network.Contracts.PieceOrBuilder getKingOrBuilder();
  }
  public static final class Castle extends
      com.google.protobuf.GeneratedMessage
      implements CastleOrBuilder {
    // Use Castle.newBuilder() to construct.
    private Castle(Castle.Builder builder) {
      super(builder);
    }
    private Castle(boolean noInit) {}
    
    private static final Castle defaultInstance;
    public static Castle getDefaultInstance() {
      return defaultInstance;
    }
    
    public Castle getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Castle_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Castle_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Piece Rook = 1;
    public static final int ROOK_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Piece rook_;
    public boolean hasRook() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Piece getRook() {
      return rook_;
    }
    public com.richardpianka.chess.network.Contracts.PieceOrBuilder getRookOrBuilder() {
      return rook_;
    }
    
    // required .com.richardpianka.chess.network.Piece King = 2;
    public static final int KING_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Piece king_;
    public boolean hasKing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Piece getKing() {
      return king_;
    }
    public com.richardpianka.chess.network.Contracts.PieceOrBuilder getKingOrBuilder() {
      return king_;
    }
    
    private void initFields() {
      rook_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      king_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasRook()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKing()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRook().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getKing().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, rook_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, king_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rook_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, king_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Castle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Castle.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Castle.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Castle.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Castle.Builder newBuilder(com.richardpianka.chess.network.Contracts.Castle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Castle.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Castle.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Castle.Builder builder = new com.richardpianka.chess.network.Contracts.Castle.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.CastleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Castle_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Castle_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Castle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRookFieldBuilder();
          getKingFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (rookBuilder_ == null) {
          rook_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
        } else {
          rookBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (kingBuilder_ == null) {
          king_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
        } else {
          kingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Castle.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Castle getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Castle build() {
        com.richardpianka.chess.network.Contracts.Castle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Castle buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Castle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Castle buildPartial() {
        com.richardpianka.chess.network.Contracts.Castle result = new com.richardpianka.chess.network.Contracts.Castle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (rookBuilder_ == null) {
          result.rook_ = rook_;
        } else {
          result.rook_ = rookBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (kingBuilder_ == null) {
          result.king_ = king_;
        } else {
          result.king_ = kingBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Castle.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Castle) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Castle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Castle.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Castle other) {
        if (other == com.richardpianka.chess.network.Contracts.Castle.getDefaultInstance()) return this;
        if (other.hasRook()) {
          mergeRook(other.getRook());
        }
        if (other.hasKing()) {
          mergeKing(other.getKing());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasRook()) {
          
          return false;
        }
        if (!hasKing()) {
          
          return false;
        }
        if (!getRook().isInitialized()) {
          
          return false;
        }
        if (!getKing().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Piece.Builder subBuilder = com.richardpianka.chess.network.Contracts.Piece.newBuilder();
              if (hasRook()) {
                subBuilder.mergeFrom(getRook());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRook(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.Piece.Builder subBuilder = com.richardpianka.chess.network.Contracts.Piece.newBuilder();
              if (hasKing()) {
                subBuilder.mergeFrom(getKing());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKing(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Piece Rook = 1;
      private com.richardpianka.chess.network.Contracts.Piece rook_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> rookBuilder_;
      public boolean hasRook() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Piece getRook() {
        if (rookBuilder_ == null) {
          return rook_;
        } else {
          return rookBuilder_.getMessage();
        }
      }
      public Builder setRook(com.richardpianka.chess.network.Contracts.Piece value) {
        if (rookBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rook_ = value;
          onChanged();
        } else {
          rookBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setRook(
          com.richardpianka.chess.network.Contracts.Piece.Builder builderForValue) {
        if (rookBuilder_ == null) {
          rook_ = builderForValue.build();
          onChanged();
        } else {
          rookBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeRook(com.richardpianka.chess.network.Contracts.Piece value) {
        if (rookBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              rook_ != com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance()) {
            rook_ =
              com.richardpianka.chess.network.Contracts.Piece.newBuilder(rook_).mergeFrom(value).buildPartial();
          } else {
            rook_ = value;
          }
          onChanged();
        } else {
          rookBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearRook() {
        if (rookBuilder_ == null) {
          rook_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
          onChanged();
        } else {
          rookBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Piece.Builder getRookBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRookFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.PieceOrBuilder getRookOrBuilder() {
        if (rookBuilder_ != null) {
          return rookBuilder_.getMessageOrBuilder();
        } else {
          return rook_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> 
          getRookFieldBuilder() {
        if (rookBuilder_ == null) {
          rookBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder>(
                  rook_,
                  getParentForChildren(),
                  isClean());
          rook_ = null;
        }
        return rookBuilder_;
      }
      
      // required .com.richardpianka.chess.network.Piece King = 2;
      private com.richardpianka.chess.network.Contracts.Piece king_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> kingBuilder_;
      public boolean hasKing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Piece getKing() {
        if (kingBuilder_ == null) {
          return king_;
        } else {
          return kingBuilder_.getMessage();
        }
      }
      public Builder setKing(com.richardpianka.chess.network.Contracts.Piece value) {
        if (kingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          king_ = value;
          onChanged();
        } else {
          kingBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setKing(
          com.richardpianka.chess.network.Contracts.Piece.Builder builderForValue) {
        if (kingBuilder_ == null) {
          king_ = builderForValue.build();
          onChanged();
        } else {
          kingBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeKing(com.richardpianka.chess.network.Contracts.Piece value) {
        if (kingBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              king_ != com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance()) {
            king_ =
              com.richardpianka.chess.network.Contracts.Piece.newBuilder(king_).mergeFrom(value).buildPartial();
          } else {
            king_ = value;
          }
          onChanged();
        } else {
          kingBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearKing() {
        if (kingBuilder_ == null) {
          king_ = com.richardpianka.chess.network.Contracts.Piece.getDefaultInstance();
          onChanged();
        } else {
          kingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Piece.Builder getKingBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getKingFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.PieceOrBuilder getKingOrBuilder() {
        if (kingBuilder_ != null) {
          return kingBuilder_.getMessageOrBuilder();
        } else {
          return king_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder> 
          getKingFieldBuilder() {
        if (kingBuilder_ == null) {
          kingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Piece, com.richardpianka.chess.network.Contracts.Piece.Builder, com.richardpianka.chess.network.Contracts.PieceOrBuilder>(
                  king_,
                  getParentForChildren(),
                  isClean());
          king_ = null;
        }
        return kingBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Castle)
    }
    
    static {
      defaultInstance = new Castle(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Castle)
  }
  
  public interface VersionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional uint32 VersionMajor = 1 [default = 1];
    boolean hasVersionMajor();
    int getVersionMajor();
    
    // optional uint32 VersionMinor = 2 [default = 0];
    boolean hasVersionMinor();
    int getVersionMinor();
    
    // optional uint32 VersionRevision = 3 [default = 0];
    boolean hasVersionRevision();
    int getVersionRevision();
  }
  public static final class Version extends
      com.google.protobuf.GeneratedMessage
      implements VersionOrBuilder {
    // Use Version.newBuilder() to construct.
    private Version(Version.Builder builder) {
      super(builder);
    }
    private Version(boolean noInit) {}
    
    private static final Version defaultInstance;
    public static Version getDefaultInstance() {
      return defaultInstance;
    }
    
    public Version getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Version_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Version_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional uint32 VersionMajor = 1 [default = 1];
    public static final int VERSIONMAJOR_FIELD_NUMBER = 1;
    private int versionMajor_;
    public boolean hasVersionMajor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getVersionMajor() {
      return versionMajor_;
    }
    
    // optional uint32 VersionMinor = 2 [default = 0];
    public static final int VERSIONMINOR_FIELD_NUMBER = 2;
    private int versionMinor_;
    public boolean hasVersionMinor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getVersionMinor() {
      return versionMinor_;
    }
    
    // optional uint32 VersionRevision = 3 [default = 0];
    public static final int VERSIONREVISION_FIELD_NUMBER = 3;
    private int versionRevision_;
    public boolean hasVersionRevision() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getVersionRevision() {
      return versionRevision_;
    }
    
    private void initFields() {
      versionMajor_ = 1;
      versionMinor_ = 0;
      versionRevision_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, versionMajor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, versionMinor_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, versionRevision_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, versionMajor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, versionMinor_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, versionRevision_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Version parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Version parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Version.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Version.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Version.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Version.Builder newBuilder(com.richardpianka.chess.network.Contracts.Version prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Version.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Version.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Version.Builder builder = new com.richardpianka.chess.network.Contracts.Version.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.VersionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Version_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Version_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Version.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        versionMajor_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        versionMinor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        versionRevision_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Version.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Version getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Version.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Version build() {
        com.richardpianka.chess.network.Contracts.Version result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Version buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Version result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Version buildPartial() {
        com.richardpianka.chess.network.Contracts.Version result = new com.richardpianka.chess.network.Contracts.Version(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.versionMajor_ = versionMajor_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.versionMinor_ = versionMinor_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.versionRevision_ = versionRevision_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Version.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Version) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Version)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Version.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Version other) {
        if (other == com.richardpianka.chess.network.Contracts.Version.getDefaultInstance()) return this;
        if (other.hasVersionMajor()) {
          setVersionMajor(other.getVersionMajor());
        }
        if (other.hasVersionMinor()) {
          setVersionMinor(other.getVersionMinor());
        }
        if (other.hasVersionRevision()) {
          setVersionRevision(other.getVersionRevision());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              versionMajor_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              versionMinor_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              versionRevision_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional uint32 VersionMajor = 1 [default = 1];
      private int versionMajor_ = 1;
      public boolean hasVersionMajor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getVersionMajor() {
        return versionMajor_;
      }
      public Builder setVersionMajor(int value) {
        bitField0_ |= 0x00000001;
        versionMajor_ = value;
        onChanged();
        return this;
      }
      public Builder clearVersionMajor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        versionMajor_ = 1;
        onChanged();
        return this;
      }
      
      // optional uint32 VersionMinor = 2 [default = 0];
      private int versionMinor_ ;
      public boolean hasVersionMinor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getVersionMinor() {
        return versionMinor_;
      }
      public Builder setVersionMinor(int value) {
        bitField0_ |= 0x00000002;
        versionMinor_ = value;
        onChanged();
        return this;
      }
      public Builder clearVersionMinor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        versionMinor_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 VersionRevision = 3 [default = 0];
      private int versionRevision_ ;
      public boolean hasVersionRevision() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getVersionRevision() {
        return versionRevision_;
      }
      public Builder setVersionRevision(int value) {
        bitField0_ |= 0x00000004;
        versionRevision_ = value;
        onChanged();
        return this;
      }
      public Builder clearVersionRevision() {
        bitField0_ = (bitField0_ & ~0x00000004);
        versionRevision_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Version)
    }
    
    static {
      defaultInstance = new Version(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Version)
  }
  
  public interface RoomOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string Name = 1;
    boolean hasName();
    String getName();
    
    // required .com.richardpianka.chess.network.RoomFlags Flags = 2;
    boolean hasFlags();
    com.richardpianka.chess.network.Contracts.RoomFlags getFlags();
  }
  public static final class Room extends
      com.google.protobuf.GeneratedMessage
      implements RoomOrBuilder {
    // Use Room.newBuilder() to construct.
    private Room(Room.Builder builder) {
      super(builder);
    }
    private Room(boolean noInit) {}
    
    private static final Room defaultInstance;
    public static Room getDefaultInstance() {
      return defaultInstance;
    }
    
    public Room getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Room_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Room_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string Name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required .com.richardpianka.chess.network.RoomFlags Flags = 2;
    public static final int FLAGS_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.RoomFlags flags_;
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.RoomFlags getFlags() {
      return flags_;
    }
    
    private void initFields() {
      name_ = "";
      flags_ = com.richardpianka.chess.network.Contracts.RoomFlags.Public;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFlags()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, flags_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, flags_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Room parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Room parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Room.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Room.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Room.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Room.Builder newBuilder(com.richardpianka.chess.network.Contracts.Room prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Room.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Room.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Room.Builder builder = new com.richardpianka.chess.network.Contracts.Room.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.RoomOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Room_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Room_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Room.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = com.richardpianka.chess.network.Contracts.RoomFlags.Public;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Room.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Room getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Room build() {
        com.richardpianka.chess.network.Contracts.Room result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Room buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Room result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Room buildPartial() {
        com.richardpianka.chess.network.Contracts.Room result = new com.richardpianka.chess.network.Contracts.Room(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flags_ = flags_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Room.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Room) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Room)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Room.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Room other) {
        if (other == com.richardpianka.chess.network.Contracts.Room.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasFlags()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.RoomFlags value = com.richardpianka.chess.network.Contracts.RoomFlags.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                flags_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string Name = 1;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
      }
      
      // required .com.richardpianka.chess.network.RoomFlags Flags = 2;
      private com.richardpianka.chess.network.Contracts.RoomFlags flags_ = com.richardpianka.chess.network.Contracts.RoomFlags.Public;
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.RoomFlags getFlags() {
        return flags_;
      }
      public Builder setFlags(com.richardpianka.chess.network.Contracts.RoomFlags value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        flags_ = value;
        onChanged();
        return this;
      }
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = com.richardpianka.chess.network.Contracts.RoomFlags.Public;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Room)
    }
    
    static {
      defaultInstance = new Room(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Room)
  }
  
  public interface RecordOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required uint32 Wins = 1;
    boolean hasWins();
    int getWins();
    
    // required uint32 Losses = 2;
    boolean hasLosses();
    int getLosses();
    
    // required uint32 Stalemates = 3;
    boolean hasStalemates();
    int getStalemates();
    
    // required uint32 Disconnects = 4;
    boolean hasDisconnects();
    int getDisconnects();
  }
  public static final class Record extends
      com.google.protobuf.GeneratedMessage
      implements RecordOrBuilder {
    // Use Record.newBuilder() to construct.
    private Record(Record.Builder builder) {
      super(builder);
    }
    private Record(boolean noInit) {}
    
    private static final Record defaultInstance;
    public static Record getDefaultInstance() {
      return defaultInstance;
    }
    
    public Record getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Record_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Record_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required uint32 Wins = 1;
    public static final int WINS_FIELD_NUMBER = 1;
    private int wins_;
    public boolean hasWins() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getWins() {
      return wins_;
    }
    
    // required uint32 Losses = 2;
    public static final int LOSSES_FIELD_NUMBER = 2;
    private int losses_;
    public boolean hasLosses() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getLosses() {
      return losses_;
    }
    
    // required uint32 Stalemates = 3;
    public static final int STALEMATES_FIELD_NUMBER = 3;
    private int stalemates_;
    public boolean hasStalemates() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getStalemates() {
      return stalemates_;
    }
    
    // required uint32 Disconnects = 4;
    public static final int DISCONNECTS_FIELD_NUMBER = 4;
    private int disconnects_;
    public boolean hasDisconnects() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getDisconnects() {
      return disconnects_;
    }
    
    private void initFields() {
      wins_ = 0;
      losses_ = 0;
      stalemates_ = 0;
      disconnects_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasWins()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLosses()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStalemates()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDisconnects()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, wins_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, losses_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, stalemates_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, disconnects_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, wins_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, losses_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, stalemates_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, disconnects_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Record parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Record parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Record.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Record.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Record.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Record.Builder newBuilder(com.richardpianka.chess.network.Contracts.Record prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Record.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Record.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Record.Builder builder = new com.richardpianka.chess.network.Contracts.Record.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.RecordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Record_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Record_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Record.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        wins_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        losses_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stalemates_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        disconnects_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Record.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Record getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Record.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Record build() {
        com.richardpianka.chess.network.Contracts.Record result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Record buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Record result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Record buildPartial() {
        com.richardpianka.chess.network.Contracts.Record result = new com.richardpianka.chess.network.Contracts.Record(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.wins_ = wins_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.losses_ = losses_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stalemates_ = stalemates_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.disconnects_ = disconnects_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Record.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Record) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Record)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Record.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Record other) {
        if (other == com.richardpianka.chess.network.Contracts.Record.getDefaultInstance()) return this;
        if (other.hasWins()) {
          setWins(other.getWins());
        }
        if (other.hasLosses()) {
          setLosses(other.getLosses());
        }
        if (other.hasStalemates()) {
          setStalemates(other.getStalemates());
        }
        if (other.hasDisconnects()) {
          setDisconnects(other.getDisconnects());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasWins()) {
          
          return false;
        }
        if (!hasLosses()) {
          
          return false;
        }
        if (!hasStalemates()) {
          
          return false;
        }
        if (!hasDisconnects()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              wins_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              losses_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stalemates_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              disconnects_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required uint32 Wins = 1;
      private int wins_ ;
      public boolean hasWins() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getWins() {
        return wins_;
      }
      public Builder setWins(int value) {
        bitField0_ |= 0x00000001;
        wins_ = value;
        onChanged();
        return this;
      }
      public Builder clearWins() {
        bitField0_ = (bitField0_ & ~0x00000001);
        wins_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 Losses = 2;
      private int losses_ ;
      public boolean hasLosses() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getLosses() {
        return losses_;
      }
      public Builder setLosses(int value) {
        bitField0_ |= 0x00000002;
        losses_ = value;
        onChanged();
        return this;
      }
      public Builder clearLosses() {
        bitField0_ = (bitField0_ & ~0x00000002);
        losses_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 Stalemates = 3;
      private int stalemates_ ;
      public boolean hasStalemates() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getStalemates() {
        return stalemates_;
      }
      public Builder setStalemates(int value) {
        bitField0_ |= 0x00000004;
        stalemates_ = value;
        onChanged();
        return this;
      }
      public Builder clearStalemates() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stalemates_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 Disconnects = 4;
      private int disconnects_ ;
      public boolean hasDisconnects() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getDisconnects() {
        return disconnects_;
      }
      public Builder setDisconnects(int value) {
        bitField0_ |= 0x00000008;
        disconnects_ = value;
        onChanged();
        return this;
      }
      public Builder clearDisconnects() {
        bitField0_ = (bitField0_ & ~0x00000008);
        disconnects_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Record)
    }
    
    static {
      defaultInstance = new Record(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Record)
  }
  
  public interface UserOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string Name = 1;
    boolean hasName();
    String getName();
    
    // required .com.richardpianka.chess.network.UserFlags Flags = 2;
    boolean hasFlags();
    com.richardpianka.chess.network.Contracts.UserFlags getFlags();
    
    // required .com.richardpianka.chess.network.Record Record = 3;
    boolean hasRecord();
    com.richardpianka.chess.network.Contracts.Record getRecord();
    com.richardpianka.chess.network.Contracts.RecordOrBuilder getRecordOrBuilder();
  }
  public static final class User extends
      com.google.protobuf.GeneratedMessage
      implements UserOrBuilder {
    // Use User.newBuilder() to construct.
    private User(User.Builder builder) {
      super(builder);
    }
    private User(boolean noInit) {}
    
    private static final User defaultInstance;
    public static User getDefaultInstance() {
      return defaultInstance;
    }
    
    public User getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_User_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_User_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string Name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required .com.richardpianka.chess.network.UserFlags Flags = 2;
    public static final int FLAGS_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.UserFlags flags_;
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.UserFlags getFlags() {
      return flags_;
    }
    
    // required .com.richardpianka.chess.network.Record Record = 3;
    public static final int RECORD_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.Record record_;
    public boolean hasRecord() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.Record getRecord() {
      return record_;
    }
    public com.richardpianka.chess.network.Contracts.RecordOrBuilder getRecordOrBuilder() {
      return record_;
    }
    
    private void initFields() {
      name_ = "";
      flags_ = com.richardpianka.chess.network.Contracts.UserFlags.Pedestrian;
      record_ = com.richardpianka.chess.network.Contracts.Record.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFlags()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRecord()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRecord().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, flags_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, record_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, flags_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, record_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.User parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.User parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.User.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.User.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.User.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.User.Builder newBuilder(com.richardpianka.chess.network.Contracts.User prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.User.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.User.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.User.Builder builder = new com.richardpianka.chess.network.Contracts.User.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.UserOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_User_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_User_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.User.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRecordFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = com.richardpianka.chess.network.Contracts.UserFlags.Pedestrian;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (recordBuilder_ == null) {
          record_ = com.richardpianka.chess.network.Contracts.Record.getDefaultInstance();
        } else {
          recordBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.User.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.User getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.User build() {
        com.richardpianka.chess.network.Contracts.User result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.User buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.User result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.User buildPartial() {
        com.richardpianka.chess.network.Contracts.User result = new com.richardpianka.chess.network.Contracts.User(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (recordBuilder_ == null) {
          result.record_ = record_;
        } else {
          result.record_ = recordBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.User.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.User) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.User)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.User.Builder mergeFrom(com.richardpianka.chess.network.Contracts.User other) {
        if (other == com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasRecord()) {
          mergeRecord(other.getRecord());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasFlags()) {
          
          return false;
        }
        if (!hasRecord()) {
          
          return false;
        }
        if (!getRecord().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.UserFlags value = com.richardpianka.chess.network.Contracts.UserFlags.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                flags_ = value;
              }
              break;
            }
            case 26: {
              com.richardpianka.chess.network.Contracts.Record.Builder subBuilder = com.richardpianka.chess.network.Contracts.Record.newBuilder();
              if (hasRecord()) {
                subBuilder.mergeFrom(getRecord());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRecord(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string Name = 1;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
      }
      
      // required .com.richardpianka.chess.network.UserFlags Flags = 2;
      private com.richardpianka.chess.network.Contracts.UserFlags flags_ = com.richardpianka.chess.network.Contracts.UserFlags.Pedestrian;
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.UserFlags getFlags() {
        return flags_;
      }
      public Builder setFlags(com.richardpianka.chess.network.Contracts.UserFlags value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        flags_ = value;
        onChanged();
        return this;
      }
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = com.richardpianka.chess.network.Contracts.UserFlags.Pedestrian;
        onChanged();
        return this;
      }
      
      // required .com.richardpianka.chess.network.Record Record = 3;
      private com.richardpianka.chess.network.Contracts.Record record_ = com.richardpianka.chess.network.Contracts.Record.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Record, com.richardpianka.chess.network.Contracts.Record.Builder, com.richardpianka.chess.network.Contracts.RecordOrBuilder> recordBuilder_;
      public boolean hasRecord() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.Record getRecord() {
        if (recordBuilder_ == null) {
          return record_;
        } else {
          return recordBuilder_.getMessage();
        }
      }
      public Builder setRecord(com.richardpianka.chess.network.Contracts.Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          record_ = value;
          onChanged();
        } else {
          recordBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setRecord(
          com.richardpianka.chess.network.Contracts.Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          record_ = builderForValue.build();
          onChanged();
        } else {
          recordBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeRecord(com.richardpianka.chess.network.Contracts.Record value) {
        if (recordBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              record_ != com.richardpianka.chess.network.Contracts.Record.getDefaultInstance()) {
            record_ =
              com.richardpianka.chess.network.Contracts.Record.newBuilder(record_).mergeFrom(value).buildPartial();
          } else {
            record_ = value;
          }
          onChanged();
        } else {
          recordBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearRecord() {
        if (recordBuilder_ == null) {
          record_ = com.richardpianka.chess.network.Contracts.Record.getDefaultInstance();
          onChanged();
        } else {
          recordBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Record.Builder getRecordBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRecordFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.RecordOrBuilder getRecordOrBuilder() {
        if (recordBuilder_ != null) {
          return recordBuilder_.getMessageOrBuilder();
        } else {
          return record_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Record, com.richardpianka.chess.network.Contracts.Record.Builder, com.richardpianka.chess.network.Contracts.RecordOrBuilder> 
          getRecordFieldBuilder() {
        if (recordBuilder_ == null) {
          recordBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Record, com.richardpianka.chess.network.Contracts.Record.Builder, com.richardpianka.chess.network.Contracts.RecordOrBuilder>(
                  record_,
                  getParentForChildren(),
                  isClean());
          record_ = null;
        }
        return recordBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.User)
    }
    
    static {
      defaultInstance = new User(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.User)
  }
  
  public interface GameOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string Name = 1;
    boolean hasName();
    String getName();
    
    // optional string Password = 2;
    boolean hasPassword();
    String getPassword();
    
    // required bool Private = 3;
    boolean hasPrivate();
    boolean getPrivate();
    
    // optional .com.richardpianka.chess.network.GameMetadata MetaData = 4;
    boolean hasMetaData();
    com.richardpianka.chess.network.Contracts.GameMetadata getMetaData();
    com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder getMetaDataOrBuilder();
  }
  public static final class Game extends
      com.google.protobuf.GeneratedMessage
      implements GameOrBuilder {
    // Use Game.newBuilder() to construct.
    private Game(Game.Builder builder) {
      super(builder);
    }
    private Game(boolean noInit) {}
    
    private static final Game defaultInstance;
    public static Game getDefaultInstance() {
      return defaultInstance;
    }
    
    public Game getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Game_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Game_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string Name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional string Password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required bool Private = 3;
    public static final int PRIVATE_FIELD_NUMBER = 3;
    private boolean private_;
    public boolean hasPrivate() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public boolean getPrivate() {
      return private_;
    }
    
    // optional .com.richardpianka.chess.network.GameMetadata MetaData = 4;
    public static final int METADATA_FIELD_NUMBER = 4;
    private com.richardpianka.chess.network.Contracts.GameMetadata metaData_;
    public boolean hasMetaData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public com.richardpianka.chess.network.Contracts.GameMetadata getMetaData() {
      return metaData_;
    }
    public com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder getMetaDataOrBuilder() {
      return metaData_;
    }
    
    private void initFields() {
      name_ = "";
      password_ = "";
      private_ = false;
      metaData_ = com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPrivate()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasMetaData()) {
        if (!getMetaData().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, private_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, metaData_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, private_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, metaData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Game parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.Game parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.Game.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.Game.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.Game.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.Game.Builder newBuilder(com.richardpianka.chess.network.Contracts.Game prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.Game.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.Game.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.Game.Builder builder = new com.richardpianka.chess.network.Contracts.Game.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Game_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_Game_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.Game.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMetaDataFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        private_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (metaDataBuilder_ == null) {
          metaData_ = com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance();
        } else {
          metaDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.Game.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.Game getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.Game build() {
        com.richardpianka.chess.network.Contracts.Game result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.Game buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.Game result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Game buildPartial() {
        com.richardpianka.chess.network.Contracts.Game result = new com.richardpianka.chess.network.Contracts.Game(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.private_ = private_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (metaDataBuilder_ == null) {
          result.metaData_ = metaData_;
        } else {
          result.metaData_ = metaDataBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.Game.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.Game) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.Game)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.Game.Builder mergeFrom(com.richardpianka.chess.network.Contracts.Game other) {
        if (other == com.richardpianka.chess.network.Contracts.Game.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        if (other.hasPrivate()) {
          setPrivate(other.getPrivate());
        }
        if (other.hasMetaData()) {
          mergeMetaData(other.getMetaData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasPrivate()) {
          
          return false;
        }
        if (hasMetaData()) {
          if (!getMetaData().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              private_ = input.readBool();
              break;
            }
            case 34: {
              com.richardpianka.chess.network.Contracts.GameMetadata.Builder subBuilder = com.richardpianka.chess.network.Contracts.GameMetadata.newBuilder();
              if (hasMetaData()) {
                subBuilder.mergeFrom(getMetaData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMetaData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string Name = 1;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
      }
      
      // optional string Password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // required bool Private = 3;
      private boolean private_ ;
      public boolean hasPrivate() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public boolean getPrivate() {
        return private_;
      }
      public Builder setPrivate(boolean value) {
        bitField0_ |= 0x00000004;
        private_ = value;
        onChanged();
        return this;
      }
      public Builder clearPrivate() {
        bitField0_ = (bitField0_ & ~0x00000004);
        private_ = false;
        onChanged();
        return this;
      }
      
      // optional .com.richardpianka.chess.network.GameMetadata MetaData = 4;
      private com.richardpianka.chess.network.Contracts.GameMetadata metaData_ = com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameMetadata, com.richardpianka.chess.network.Contracts.GameMetadata.Builder, com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder> metaDataBuilder_;
      public boolean hasMetaData() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public com.richardpianka.chess.network.Contracts.GameMetadata getMetaData() {
        if (metaDataBuilder_ == null) {
          return metaData_;
        } else {
          return metaDataBuilder_.getMessage();
        }
      }
      public Builder setMetaData(com.richardpianka.chess.network.Contracts.GameMetadata value) {
        if (metaDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metaData_ = value;
          onChanged();
        } else {
          metaDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setMetaData(
          com.richardpianka.chess.network.Contracts.GameMetadata.Builder builderForValue) {
        if (metaDataBuilder_ == null) {
          metaData_ = builderForValue.build();
          onChanged();
        } else {
          metaDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeMetaData(com.richardpianka.chess.network.Contracts.GameMetadata value) {
        if (metaDataBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              metaData_ != com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance()) {
            metaData_ =
              com.richardpianka.chess.network.Contracts.GameMetadata.newBuilder(metaData_).mergeFrom(value).buildPartial();
          } else {
            metaData_ = value;
          }
          onChanged();
        } else {
          metaDataBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearMetaData() {
        if (metaDataBuilder_ == null) {
          metaData_ = com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance();
          onChanged();
        } else {
          metaDataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.GameMetadata.Builder getMetaDataBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getMetaDataFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder getMetaDataOrBuilder() {
        if (metaDataBuilder_ != null) {
          return metaDataBuilder_.getMessageOrBuilder();
        } else {
          return metaData_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.GameMetadata, com.richardpianka.chess.network.Contracts.GameMetadata.Builder, com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder> 
          getMetaDataFieldBuilder() {
        if (metaDataBuilder_ == null) {
          metaDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.GameMetadata, com.richardpianka.chess.network.Contracts.GameMetadata.Builder, com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder>(
                  metaData_,
                  getParentForChildren(),
                  isClean());
          metaData_ = null;
        }
        return metaDataBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.Game)
    }
    
    static {
      defaultInstance = new Game(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.Game)
  }
  
  public interface GameMetadataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .com.richardpianka.chess.network.User Created = 1;
    boolean hasCreated();
    com.richardpianka.chess.network.Contracts.User getCreated();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getCreatedOrBuilder();
    
    // optional .com.richardpianka.chess.network.User Joined = 2;
    boolean hasJoined();
    com.richardpianka.chess.network.Contracts.User getJoined();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getJoinedOrBuilder();
    
    // optional .com.richardpianka.chess.network.UserTime UserTime = 3;
    boolean hasUserTime();
    com.richardpianka.chess.network.Contracts.UserTime getUserTime();
    com.richardpianka.chess.network.Contracts.UserTimeOrBuilder getUserTimeOrBuilder();
  }
  public static final class GameMetadata extends
      com.google.protobuf.GeneratedMessage
      implements GameMetadataOrBuilder {
    // Use GameMetadata.newBuilder() to construct.
    private GameMetadata(GameMetadata.Builder builder) {
      super(builder);
    }
    private GameMetadata(boolean noInit) {}
    
    private static final GameMetadata defaultInstance;
    public static GameMetadata getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameMetadata getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameMetadata_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameMetadata_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .com.richardpianka.chess.network.User Created = 1;
    public static final int CREATED_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.User created_;
    public boolean hasCreated() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.User getCreated() {
      return created_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getCreatedOrBuilder() {
      return created_;
    }
    
    // optional .com.richardpianka.chess.network.User Joined = 2;
    public static final int JOINED_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.User joined_;
    public boolean hasJoined() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.User getJoined() {
      return joined_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getJoinedOrBuilder() {
      return joined_;
    }
    
    // optional .com.richardpianka.chess.network.UserTime UserTime = 3;
    public static final int USERTIME_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.UserTime userTime_;
    public boolean hasUserTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.UserTime getUserTime() {
      return userTime_;
    }
    public com.richardpianka.chess.network.Contracts.UserTimeOrBuilder getUserTimeOrBuilder() {
      return userTime_;
    }
    
    private void initFields() {
      created_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      joined_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      userTime_ = com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasCreated()) {
        if (!getCreated().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasJoined()) {
        if (!getJoined().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasUserTime()) {
        if (!getUserTime().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, created_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, joined_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, userTime_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, created_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, joined_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, userTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameMetadata.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.GameMetadata.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.GameMetadata.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.GameMetadata.Builder newBuilder(com.richardpianka.chess.network.Contracts.GameMetadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.GameMetadata.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.GameMetadata.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.GameMetadata.Builder builder = new com.richardpianka.chess.network.Contracts.GameMetadata.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameMetadata_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameMetadata_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.GameMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCreatedFieldBuilder();
          getJoinedFieldBuilder();
          getUserTimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (createdBuilder_ == null) {
          created_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          createdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (joinedBuilder_ == null) {
          joined_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          joinedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (userTimeBuilder_ == null) {
          userTime_ = com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance();
        } else {
          userTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.GameMetadata.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.GameMetadata getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.GameMetadata build() {
        com.richardpianka.chess.network.Contracts.GameMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.GameMetadata buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.GameMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameMetadata buildPartial() {
        com.richardpianka.chess.network.Contracts.GameMetadata result = new com.richardpianka.chess.network.Contracts.GameMetadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (createdBuilder_ == null) {
          result.created_ = created_;
        } else {
          result.created_ = createdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (joinedBuilder_ == null) {
          result.joined_ = joined_;
        } else {
          result.joined_ = joinedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (userTimeBuilder_ == null) {
          result.userTime_ = userTime_;
        } else {
          result.userTime_ = userTimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameMetadata.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.GameMetadata) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.GameMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.GameMetadata.Builder mergeFrom(com.richardpianka.chess.network.Contracts.GameMetadata other) {
        if (other == com.richardpianka.chess.network.Contracts.GameMetadata.getDefaultInstance()) return this;
        if (other.hasCreated()) {
          mergeCreated(other.getCreated());
        }
        if (other.hasJoined()) {
          mergeJoined(other.getJoined());
        }
        if (other.hasUserTime()) {
          mergeUserTime(other.getUserTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasCreated()) {
          if (!getCreated().isInitialized()) {
            
            return false;
          }
        }
        if (hasJoined()) {
          if (!getJoined().isInitialized()) {
            
            return false;
          }
        }
        if (hasUserTime()) {
          if (!getUserTime().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasCreated()) {
                subBuilder.mergeFrom(getCreated());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCreated(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasJoined()) {
                subBuilder.mergeFrom(getJoined());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoined(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.richardpianka.chess.network.Contracts.UserTime.Builder subBuilder = com.richardpianka.chess.network.Contracts.UserTime.newBuilder();
              if (hasUserTime()) {
                subBuilder.mergeFrom(getUserTime());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUserTime(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .com.richardpianka.chess.network.User Created = 1;
      private com.richardpianka.chess.network.Contracts.User created_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> createdBuilder_;
      public boolean hasCreated() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.User getCreated() {
        if (createdBuilder_ == null) {
          return created_;
        } else {
          return createdBuilder_.getMessage();
        }
      }
      public Builder setCreated(com.richardpianka.chess.network.Contracts.User value) {
        if (createdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          created_ = value;
          onChanged();
        } else {
          createdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCreated(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (createdBuilder_ == null) {
          created_ = builderForValue.build();
          onChanged();
        } else {
          createdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCreated(com.richardpianka.chess.network.Contracts.User value) {
        if (createdBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              created_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            created_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(created_).mergeFrom(value).buildPartial();
          } else {
            created_ = value;
          }
          onChanged();
        } else {
          createdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCreated() {
        if (createdBuilder_ == null) {
          created_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          createdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getCreatedBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCreatedFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getCreatedOrBuilder() {
        if (createdBuilder_ != null) {
          return createdBuilder_.getMessageOrBuilder();
        } else {
          return created_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getCreatedFieldBuilder() {
        if (createdBuilder_ == null) {
          createdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  created_,
                  getParentForChildren(),
                  isClean());
          created_ = null;
        }
        return createdBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.User Joined = 2;
      private com.richardpianka.chess.network.Contracts.User joined_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> joinedBuilder_;
      public boolean hasJoined() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.User getJoined() {
        if (joinedBuilder_ == null) {
          return joined_;
        } else {
          return joinedBuilder_.getMessage();
        }
      }
      public Builder setJoined(com.richardpianka.chess.network.Contracts.User value) {
        if (joinedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joined_ = value;
          onChanged();
        } else {
          joinedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setJoined(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (joinedBuilder_ == null) {
          joined_ = builderForValue.build();
          onChanged();
        } else {
          joinedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeJoined(com.richardpianka.chess.network.Contracts.User value) {
        if (joinedBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              joined_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            joined_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(joined_).mergeFrom(value).buildPartial();
          } else {
            joined_ = value;
          }
          onChanged();
        } else {
          joinedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearJoined() {
        if (joinedBuilder_ == null) {
          joined_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          joinedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getJoinedBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getJoinedFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getJoinedOrBuilder() {
        if (joinedBuilder_ != null) {
          return joinedBuilder_.getMessageOrBuilder();
        } else {
          return joined_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getJoinedFieldBuilder() {
        if (joinedBuilder_ == null) {
          joinedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  joined_,
                  getParentForChildren(),
                  isClean());
          joined_ = null;
        }
        return joinedBuilder_;
      }
      
      // optional .com.richardpianka.chess.network.UserTime UserTime = 3;
      private com.richardpianka.chess.network.Contracts.UserTime userTime_ = com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.UserTime, com.richardpianka.chess.network.Contracts.UserTime.Builder, com.richardpianka.chess.network.Contracts.UserTimeOrBuilder> userTimeBuilder_;
      public boolean hasUserTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.UserTime getUserTime() {
        if (userTimeBuilder_ == null) {
          return userTime_;
        } else {
          return userTimeBuilder_.getMessage();
        }
      }
      public Builder setUserTime(com.richardpianka.chess.network.Contracts.UserTime value) {
        if (userTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userTime_ = value;
          onChanged();
        } else {
          userTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setUserTime(
          com.richardpianka.chess.network.Contracts.UserTime.Builder builderForValue) {
        if (userTimeBuilder_ == null) {
          userTime_ = builderForValue.build();
          onChanged();
        } else {
          userTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeUserTime(com.richardpianka.chess.network.Contracts.UserTime value) {
        if (userTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              userTime_ != com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance()) {
            userTime_ =
              com.richardpianka.chess.network.Contracts.UserTime.newBuilder(userTime_).mergeFrom(value).buildPartial();
          } else {
            userTime_ = value;
          }
          onChanged();
        } else {
          userTimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearUserTime() {
        if (userTimeBuilder_ == null) {
          userTime_ = com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance();
          onChanged();
        } else {
          userTimeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.UserTime.Builder getUserTimeBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getUserTimeFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserTimeOrBuilder getUserTimeOrBuilder() {
        if (userTimeBuilder_ != null) {
          return userTimeBuilder_.getMessageOrBuilder();
        } else {
          return userTime_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.UserTime, com.richardpianka.chess.network.Contracts.UserTime.Builder, com.richardpianka.chess.network.Contracts.UserTimeOrBuilder> 
          getUserTimeFieldBuilder() {
        if (userTimeBuilder_ == null) {
          userTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.UserTime, com.richardpianka.chess.network.Contracts.UserTime.Builder, com.richardpianka.chess.network.Contracts.UserTimeOrBuilder>(
                  userTime_,
                  getParentForChildren(),
                  isClean());
          userTime_ = null;
        }
        return userTimeBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.GameMetadata)
    }
    
    static {
      defaultInstance = new GameMetadata(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.GameMetadata)
  }
  
  public interface UserTimeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool Timed = 1;
    boolean hasTimed();
    boolean getTimed();
    
    // required uint32 SecondsPerUser = 2;
    boolean hasSecondsPerUser();
    int getSecondsPerUser();
  }
  public static final class UserTime extends
      com.google.protobuf.GeneratedMessage
      implements UserTimeOrBuilder {
    // Use UserTime.newBuilder() to construct.
    private UserTime(UserTime.Builder builder) {
      super(builder);
    }
    private UserTime(boolean noInit) {}
    
    private static final UserTime defaultInstance;
    public static UserTime getDefaultInstance() {
      return defaultInstance;
    }
    
    public UserTime getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_UserTime_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_UserTime_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool Timed = 1;
    public static final int TIMED_FIELD_NUMBER = 1;
    private boolean timed_;
    public boolean hasTimed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getTimed() {
      return timed_;
    }
    
    // required uint32 SecondsPerUser = 2;
    public static final int SECONDSPERUSER_FIELD_NUMBER = 2;
    private int secondsPerUser_;
    public boolean hasSecondsPerUser() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getSecondsPerUser() {
      return secondsPerUser_;
    }
    
    private void initFields() {
      timed_ = false;
      secondsPerUser_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasTimed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSecondsPerUser()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, timed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, secondsPerUser_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, timed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, secondsPerUser_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.UserTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.UserTime.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.UserTime.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.UserTime.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.UserTime.Builder newBuilder(com.richardpianka.chess.network.Contracts.UserTime prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.UserTime.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.UserTime.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.UserTime.Builder builder = new com.richardpianka.chess.network.Contracts.UserTime.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.UserTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_UserTime_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_UserTime_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.UserTime.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        timed_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        secondsPerUser_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.UserTime.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.UserTime getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.UserTime build() {
        com.richardpianka.chess.network.Contracts.UserTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.UserTime buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.UserTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.UserTime buildPartial() {
        com.richardpianka.chess.network.Contracts.UserTime result = new com.richardpianka.chess.network.Contracts.UserTime(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timed_ = timed_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.secondsPerUser_ = secondsPerUser_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.UserTime.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.UserTime) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.UserTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.UserTime.Builder mergeFrom(com.richardpianka.chess.network.Contracts.UserTime other) {
        if (other == com.richardpianka.chess.network.Contracts.UserTime.getDefaultInstance()) return this;
        if (other.hasTimed()) {
          setTimed(other.getTimed());
        }
        if (other.hasSecondsPerUser()) {
          setSecondsPerUser(other.getSecondsPerUser());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasTimed()) {
          
          return false;
        }
        if (!hasSecondsPerUser()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              timed_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              secondsPerUser_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool Timed = 1;
      private boolean timed_ ;
      public boolean hasTimed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getTimed() {
        return timed_;
      }
      public Builder setTimed(boolean value) {
        bitField0_ |= 0x00000001;
        timed_ = value;
        onChanged();
        return this;
      }
      public Builder clearTimed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timed_ = false;
        onChanged();
        return this;
      }
      
      // required uint32 SecondsPerUser = 2;
      private int secondsPerUser_ ;
      public boolean hasSecondsPerUser() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getSecondsPerUser() {
        return secondsPerUser_;
      }
      public Builder setSecondsPerUser(int value) {
        bitField0_ |= 0x00000002;
        secondsPerUser_ = value;
        onChanged();
        return this;
      }
      public Builder clearSecondsPerUser() {
        bitField0_ = (bitField0_ & ~0x00000002);
        secondsPerUser_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.UserTime)
    }
    
    static {
      defaultInstance = new UserTime(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.UserTime)
  }
  
  public interface HandshakeRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Version Version = 1;
    boolean hasVersion();
    com.richardpianka.chess.network.Contracts.Version getVersion();
    com.richardpianka.chess.network.Contracts.VersionOrBuilder getVersionOrBuilder();
  }
  public static final class HandshakeRequest extends
      com.google.protobuf.GeneratedMessage
      implements HandshakeRequestOrBuilder {
    // Use HandshakeRequest.newBuilder() to construct.
    private HandshakeRequest(HandshakeRequest.Builder builder) {
      super(builder);
    }
    private HandshakeRequest(boolean noInit) {}
    
    private static final HandshakeRequest defaultInstance;
    public static HandshakeRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public HandshakeRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Version Version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Version version_;
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Version getVersion() {
      return version_;
    }
    public com.richardpianka.chess.network.Contracts.VersionOrBuilder getVersionOrBuilder() {
      return version_;
    }
    
    private void initFields() {
      version_ = com.richardpianka.chess.network.Contracts.Version.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, version_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, version_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.HandshakeRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder builder = new com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.HandshakeRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.HandshakeRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getVersionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (versionBuilder_ == null) {
          version_ = com.richardpianka.chess.network.Contracts.Version.getDefaultInstance();
        } else {
          versionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.HandshakeRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeRequest build() {
        com.richardpianka.chess.network.Contracts.HandshakeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.HandshakeRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.HandshakeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.HandshakeRequest result = new com.richardpianka.chess.network.Contracts.HandshakeRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (versionBuilder_ == null) {
          result.version_ = version_;
        } else {
          result.version_ = versionBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.HandshakeRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.HandshakeRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.HandshakeRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.HandshakeRequest.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          mergeVersion(other.getVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Version.Builder subBuilder = com.richardpianka.chess.network.Contracts.Version.newBuilder();
              if (hasVersion()) {
                subBuilder.mergeFrom(getVersion());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVersion(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Version Version = 1;
      private com.richardpianka.chess.network.Contracts.Version version_ = com.richardpianka.chess.network.Contracts.Version.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Version, com.richardpianka.chess.network.Contracts.Version.Builder, com.richardpianka.chess.network.Contracts.VersionOrBuilder> versionBuilder_;
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Version getVersion() {
        if (versionBuilder_ == null) {
          return version_;
        } else {
          return versionBuilder_.getMessage();
        }
      }
      public Builder setVersion(com.richardpianka.chess.network.Contracts.Version value) {
        if (versionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          version_ = value;
          onChanged();
        } else {
          versionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setVersion(
          com.richardpianka.chess.network.Contracts.Version.Builder builderForValue) {
        if (versionBuilder_ == null) {
          version_ = builderForValue.build();
          onChanged();
        } else {
          versionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeVersion(com.richardpianka.chess.network.Contracts.Version value) {
        if (versionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              version_ != com.richardpianka.chess.network.Contracts.Version.getDefaultInstance()) {
            version_ =
              com.richardpianka.chess.network.Contracts.Version.newBuilder(version_).mergeFrom(value).buildPartial();
          } else {
            version_ = value;
          }
          onChanged();
        } else {
          versionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearVersion() {
        if (versionBuilder_ == null) {
          version_ = com.richardpianka.chess.network.Contracts.Version.getDefaultInstance();
          onChanged();
        } else {
          versionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Version.Builder getVersionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getVersionFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.VersionOrBuilder getVersionOrBuilder() {
        if (versionBuilder_ != null) {
          return versionBuilder_.getMessageOrBuilder();
        } else {
          return version_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Version, com.richardpianka.chess.network.Contracts.Version.Builder, com.richardpianka.chess.network.Contracts.VersionOrBuilder> 
          getVersionFieldBuilder() {
        if (versionBuilder_ == null) {
          versionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Version, com.richardpianka.chess.network.Contracts.Version.Builder, com.richardpianka.chess.network.Contracts.VersionOrBuilder>(
                  version_,
                  getParentForChildren(),
                  isClean());
          version_ = null;
        }
        return versionBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.HandshakeRequest)
    }
    
    static {
      defaultInstance = new HandshakeRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.HandshakeRequest)
  }
  
  public interface HandshakeResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class HandshakeResponse extends
      com.google.protobuf.GeneratedMessage
      implements HandshakeResponseOrBuilder {
    // Use HandshakeResponse.newBuilder() to construct.
    private HandshakeResponse(HandshakeResponse.Builder builder) {
      super(builder);
    }
    private HandshakeResponse(boolean noInit) {}
    
    private static final HandshakeResponse defaultInstance;
    public static HandshakeResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public HandshakeResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.HandshakeResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder builder = new com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.HandshakeResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_HandshakeResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.HandshakeResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.HandshakeResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeResponse build() {
        com.richardpianka.chess.network.Contracts.HandshakeResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.HandshakeResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.HandshakeResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.HandshakeResponse result = new com.richardpianka.chess.network.Contracts.HandshakeResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.HandshakeResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.HandshakeResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.HandshakeResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.HandshakeResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.HandshakeResponse)
    }
    
    static {
      defaultInstance = new HandshakeResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.HandshakeResponse)
  }
  
  public interface IdentifyRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string Username = 1;
    boolean hasUsername();
    String getUsername();
    
    // optional string Password = 2;
    boolean hasPassword();
    String getPassword();
  }
  public static final class IdentifyRequest extends
      com.google.protobuf.GeneratedMessage
      implements IdentifyRequestOrBuilder {
    // Use IdentifyRequest.newBuilder() to construct.
    private IdentifyRequest(IdentifyRequest.Builder builder) {
      super(builder);
    }
    private IdentifyRequest(boolean noInit) {}
    
    private static final IdentifyRequest defaultInstance;
    public static IdentifyRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public IdentifyRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string Username = 1;
    public static final int USERNAME_FIELD_NUMBER = 1;
    private java.lang.Object username_;
    public boolean hasUsername() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getUsername() {
      java.lang.Object ref = username_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          username_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getUsernameBytes() {
      java.lang.Object ref = username_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        username_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional string Password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      username_ = "";
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasUsername()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getUsernameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getUsernameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.IdentifyRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder builder = new com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.IdentifyRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.IdentifyRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        username_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.IdentifyRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyRequest build() {
        com.richardpianka.chess.network.Contracts.IdentifyRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.IdentifyRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.IdentifyRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.IdentifyRequest result = new com.richardpianka.chess.network.Contracts.IdentifyRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.username_ = username_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.IdentifyRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.IdentifyRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.IdentifyRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.IdentifyRequest.getDefaultInstance()) return this;
        if (other.hasUsername()) {
          setUsername(other.getUsername());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasUsername()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              username_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string Username = 1;
      private java.lang.Object username_ = "";
      public boolean hasUsername() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getUsername() {
        java.lang.Object ref = username_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          username_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setUsername(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        username_ = value;
        onChanged();
        return this;
      }
      public Builder clearUsername() {
        bitField0_ = (bitField0_ & ~0x00000001);
        username_ = getDefaultInstance().getUsername();
        onChanged();
        return this;
      }
      void setUsername(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        username_ = value;
        onChanged();
      }
      
      // optional string Password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.IdentifyRequest)
    }
    
    static {
      defaultInstance = new IdentifyRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.IdentifyRequest)
  }
  
  public interface IdentifyResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
    
    // optional string Message = 2;
    boolean hasMessage();
    String getMessage();
  }
  public static final class IdentifyResponse extends
      com.google.protobuf.GeneratedMessage
      implements IdentifyResponseOrBuilder {
    // Use IdentifyResponse.newBuilder() to construct.
    private IdentifyResponse(IdentifyResponse.Builder builder) {
      super(builder);
    }
    private IdentifyResponse(boolean noInit) {}
    
    private static final IdentifyResponse defaultInstance;
    public static IdentifyResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public IdentifyResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    // optional string Message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.IdentifyResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder builder = new com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.IdentifyResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_IdentifyResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.IdentifyResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.IdentifyResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyResponse build() {
        com.richardpianka.chess.network.Contracts.IdentifyResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.IdentifyResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.IdentifyResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.IdentifyResponse result = new com.richardpianka.chess.network.Contracts.IdentifyResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.IdentifyResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.IdentifyResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.IdentifyResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.IdentifyResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // optional string Message = 2;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.IdentifyResponse)
    }
    
    static {
      defaultInstance = new IdentifyResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.IdentifyResponse)
  }
  
  public interface JoinChatRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class JoinChatRequest extends
      com.google.protobuf.GeneratedMessage
      implements JoinChatRequestOrBuilder {
    // Use JoinChatRequest.newBuilder() to construct.
    private JoinChatRequest(JoinChatRequest.Builder builder) {
      super(builder);
    }
    private JoinChatRequest(boolean noInit) {}
    
    private static final JoinChatRequest defaultInstance;
    public static JoinChatRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinChatRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinChatRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder builder = new com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinChatRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinChatRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinChatRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatRequest build() {
        com.richardpianka.chess.network.Contracts.JoinChatRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinChatRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinChatRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinChatRequest result = new com.richardpianka.chess.network.Contracts.JoinChatRequest(this);
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinChatRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinChatRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinChatRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinChatRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinChatRequest)
    }
    
    static {
      defaultInstance = new JoinChatRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinChatRequest)
  }
  
  public interface JoinChatResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class JoinChatResponse extends
      com.google.protobuf.GeneratedMessage
      implements JoinChatResponseOrBuilder {
    // Use JoinChatResponse.newBuilder() to construct.
    private JoinChatResponse(JoinChatResponse.Builder builder) {
      super(builder);
    }
    private JoinChatResponse(boolean noInit) {}
    
    private static final JoinChatResponse defaultInstance;
    public static JoinChatResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinChatResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinChatResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder builder = new com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinChatResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinChatResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinChatResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinChatResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatResponse build() {
        com.richardpianka.chess.network.Contracts.JoinChatResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinChatResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinChatResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinChatResponse result = new com.richardpianka.chess.network.Contracts.JoinChatResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinChatResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinChatResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinChatResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinChatResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinChatResponse)
    }
    
    static {
      defaultInstance = new JoinChatResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinChatResponse)
  }
  
  public interface RoomListRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class RoomListRequest extends
      com.google.protobuf.GeneratedMessage
      implements RoomListRequestOrBuilder {
    // Use RoomListRequest.newBuilder() to construct.
    private RoomListRequest(RoomListRequest.Builder builder) {
      super(builder);
    }
    private RoomListRequest(boolean noInit) {}
    
    private static final RoomListRequest defaultInstance;
    public static RoomListRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoomListRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.RoomListRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.RoomListRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.RoomListRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.RoomListRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.RoomListRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.RoomListRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.RoomListRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.RoomListRequest.Builder builder = new com.richardpianka.chess.network.Contracts.RoomListRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.RoomListRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.RoomListRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.RoomListRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListRequest build() {
        com.richardpianka.chess.network.Contracts.RoomListRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.RoomListRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.RoomListRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.RoomListRequest result = new com.richardpianka.chess.network.Contracts.RoomListRequest(this);
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.RoomListRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.RoomListRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.RoomListRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.RoomListRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.RoomListRequest)
    }
    
    static {
      defaultInstance = new RoomListRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.RoomListRequest)
  }
  
  public interface RoomListResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .com.richardpianka.chess.network.Room Rooms = 1;
    java.util.List<com.richardpianka.chess.network.Contracts.Room> 
        getRoomsList();
    com.richardpianka.chess.network.Contracts.Room getRooms(int index);
    int getRoomsCount();
    java.util.List<? extends com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
        getRoomsOrBuilderList();
    com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomsOrBuilder(
        int index);
  }
  public static final class RoomListResponse extends
      com.google.protobuf.GeneratedMessage
      implements RoomListResponseOrBuilder {
    // Use RoomListResponse.newBuilder() to construct.
    private RoomListResponse(RoomListResponse.Builder builder) {
      super(builder);
    }
    private RoomListResponse(boolean noInit) {}
    
    private static final RoomListResponse defaultInstance;
    public static RoomListResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public RoomListResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListResponse_fieldAccessorTable;
    }
    
    // repeated .com.richardpianka.chess.network.Room Rooms = 1;
    public static final int ROOMS_FIELD_NUMBER = 1;
    private java.util.List<com.richardpianka.chess.network.Contracts.Room> rooms_;
    public java.util.List<com.richardpianka.chess.network.Contracts.Room> getRoomsList() {
      return rooms_;
    }
    public java.util.List<? extends com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
        getRoomsOrBuilderList() {
      return rooms_;
    }
    public int getRoomsCount() {
      return rooms_.size();
    }
    public com.richardpianka.chess.network.Contracts.Room getRooms(int index) {
      return rooms_.get(index);
    }
    public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomsOrBuilder(
        int index) {
      return rooms_.get(index);
    }
    
    private void initFields() {
      rooms_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getRoomsCount(); i++) {
        if (!getRooms(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < rooms_.size(); i++) {
        output.writeMessage(1, rooms_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < rooms_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rooms_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.RoomListResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.RoomListResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.RoomListResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.RoomListResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.RoomListResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.RoomListResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.RoomListResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.RoomListResponse.Builder builder = new com.richardpianka.chess.network.Contracts.RoomListResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.RoomListResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_RoomListResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.RoomListResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (roomsBuilder_ == null) {
          rooms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          roomsBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.RoomListResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListResponse build() {
        com.richardpianka.chess.network.Contracts.RoomListResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.RoomListResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.RoomListResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.RoomListResponse result = new com.richardpianka.chess.network.Contracts.RoomListResponse(this);
        int from_bitField0_ = bitField0_;
        if (roomsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            rooms_ = java.util.Collections.unmodifiableList(rooms_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.rooms_ = rooms_;
        } else {
          result.rooms_ = roomsBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.RoomListResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.RoomListResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.RoomListResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.RoomListResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.RoomListResponse.getDefaultInstance()) return this;
        if (roomsBuilder_ == null) {
          if (!other.rooms_.isEmpty()) {
            if (rooms_.isEmpty()) {
              rooms_ = other.rooms_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRoomsIsMutable();
              rooms_.addAll(other.rooms_);
            }
            onChanged();
          }
        } else {
          if (!other.rooms_.isEmpty()) {
            if (roomsBuilder_.isEmpty()) {
              roomsBuilder_.dispose();
              roomsBuilder_ = null;
              rooms_ = other.rooms_;
              bitField0_ = (bitField0_ & ~0x00000001);
              roomsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRoomsFieldBuilder() : null;
            } else {
              roomsBuilder_.addAllMessages(other.rooms_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getRoomsCount(); i++) {
          if (!getRooms(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Room.Builder subBuilder = com.richardpianka.chess.network.Contracts.Room.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRooms(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .com.richardpianka.chess.network.Room Rooms = 1;
      private java.util.List<com.richardpianka.chess.network.Contracts.Room> rooms_ =
        java.util.Collections.emptyList();
      private void ensureRoomsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          rooms_ = new java.util.ArrayList<com.richardpianka.chess.network.Contracts.Room>(rooms_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> roomsBuilder_;
      
      public java.util.List<com.richardpianka.chess.network.Contracts.Room> getRoomsList() {
        if (roomsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rooms_);
        } else {
          return roomsBuilder_.getMessageList();
        }
      }
      public int getRoomsCount() {
        if (roomsBuilder_ == null) {
          return rooms_.size();
        } else {
          return roomsBuilder_.getCount();
        }
      }
      public com.richardpianka.chess.network.Contracts.Room getRooms(int index) {
        if (roomsBuilder_ == null) {
          return rooms_.get(index);
        } else {
          return roomsBuilder_.getMessage(index);
        }
      }
      public Builder setRooms(
          int index, com.richardpianka.chess.network.Contracts.Room value) {
        if (roomsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomsIsMutable();
          rooms_.set(index, value);
          onChanged();
        } else {
          roomsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setRooms(
          int index, com.richardpianka.chess.network.Contracts.Room.Builder builderForValue) {
        if (roomsBuilder_ == null) {
          ensureRoomsIsMutable();
          rooms_.set(index, builderForValue.build());
          onChanged();
        } else {
          roomsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addRooms(com.richardpianka.chess.network.Contracts.Room value) {
        if (roomsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomsIsMutable();
          rooms_.add(value);
          onChanged();
        } else {
          roomsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addRooms(
          int index, com.richardpianka.chess.network.Contracts.Room value) {
        if (roomsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomsIsMutable();
          rooms_.add(index, value);
          onChanged();
        } else {
          roomsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addRooms(
          com.richardpianka.chess.network.Contracts.Room.Builder builderForValue) {
        if (roomsBuilder_ == null) {
          ensureRoomsIsMutable();
          rooms_.add(builderForValue.build());
          onChanged();
        } else {
          roomsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addRooms(
          int index, com.richardpianka.chess.network.Contracts.Room.Builder builderForValue) {
        if (roomsBuilder_ == null) {
          ensureRoomsIsMutable();
          rooms_.add(index, builderForValue.build());
          onChanged();
        } else {
          roomsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllRooms(
          java.lang.Iterable<? extends com.richardpianka.chess.network.Contracts.Room> values) {
        if (roomsBuilder_ == null) {
          ensureRoomsIsMutable();
          super.addAll(values, rooms_);
          onChanged();
        } else {
          roomsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearRooms() {
        if (roomsBuilder_ == null) {
          rooms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          roomsBuilder_.clear();
        }
        return this;
      }
      public Builder removeRooms(int index) {
        if (roomsBuilder_ == null) {
          ensureRoomsIsMutable();
          rooms_.remove(index);
          onChanged();
        } else {
          roomsBuilder_.remove(index);
        }
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Room.Builder getRoomsBuilder(
          int index) {
        return getRoomsFieldBuilder().getBuilder(index);
      }
      public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomsOrBuilder(
          int index) {
        if (roomsBuilder_ == null) {
          return rooms_.get(index);  } else {
          return roomsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
           getRoomsOrBuilderList() {
        if (roomsBuilder_ != null) {
          return roomsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rooms_);
        }
      }
      public com.richardpianka.chess.network.Contracts.Room.Builder addRoomsBuilder() {
        return getRoomsFieldBuilder().addBuilder(
            com.richardpianka.chess.network.Contracts.Room.getDefaultInstance());
      }
      public com.richardpianka.chess.network.Contracts.Room.Builder addRoomsBuilder(
          int index) {
        return getRoomsFieldBuilder().addBuilder(
            index, com.richardpianka.chess.network.Contracts.Room.getDefaultInstance());
      }
      public java.util.List<com.richardpianka.chess.network.Contracts.Room.Builder> 
           getRoomsBuilderList() {
        return getRoomsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
          getRoomsFieldBuilder() {
        if (roomsBuilder_ == null) {
          roomsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder>(
                  rooms_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          rooms_ = null;
        }
        return roomsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.RoomListResponse)
    }
    
    static {
      defaultInstance = new RoomListResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.RoomListResponse)
  }
  
  public interface JoinRoomRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Room Room = 1;
    boolean hasRoom();
    com.richardpianka.chess.network.Contracts.Room getRoom();
    com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder();
  }
  public static final class JoinRoomRequest extends
      com.google.protobuf.GeneratedMessage
      implements JoinRoomRequestOrBuilder {
    // Use JoinRoomRequest.newBuilder() to construct.
    private JoinRoomRequest(JoinRoomRequest.Builder builder) {
      super(builder);
    }
    private JoinRoomRequest(boolean noInit) {}
    
    private static final JoinRoomRequest defaultInstance;
    public static JoinRoomRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinRoomRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Room Room = 1;
    public static final int ROOM_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Room room_;
    public boolean hasRoom() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Room getRoom() {
      return room_;
    }
    public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder() {
      return room_;
    }
    
    private void initFields() {
      room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasRoom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRoom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, room_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, room_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinRoomRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder builder = new com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinRoomRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinRoomRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (roomBuilder_ == null) {
          room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
        } else {
          roomBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest build() {
        com.richardpianka.chess.network.Contracts.JoinRoomRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinRoomRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinRoomRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinRoomRequest result = new com.richardpianka.chess.network.Contracts.JoinRoomRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomBuilder_ == null) {
          result.room_ = room_;
        } else {
          result.room_ = roomBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinRoomRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinRoomRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinRoomRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinRoomRequest.getDefaultInstance()) return this;
        if (other.hasRoom()) {
          mergeRoom(other.getRoom());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasRoom()) {
          
          return false;
        }
        if (!getRoom().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Room.Builder subBuilder = com.richardpianka.chess.network.Contracts.Room.newBuilder();
              if (hasRoom()) {
                subBuilder.mergeFrom(getRoom());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoom(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Room Room = 1;
      private com.richardpianka.chess.network.Contracts.Room room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> roomBuilder_;
      public boolean hasRoom() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Room getRoom() {
        if (roomBuilder_ == null) {
          return room_;
        } else {
          return roomBuilder_.getMessage();
        }
      }
      public Builder setRoom(com.richardpianka.chess.network.Contracts.Room value) {
        if (roomBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          room_ = value;
          onChanged();
        } else {
          roomBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setRoom(
          com.richardpianka.chess.network.Contracts.Room.Builder builderForValue) {
        if (roomBuilder_ == null) {
          room_ = builderForValue.build();
          onChanged();
        } else {
          roomBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeRoom(com.richardpianka.chess.network.Contracts.Room value) {
        if (roomBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              room_ != com.richardpianka.chess.network.Contracts.Room.getDefaultInstance()) {
            room_ =
              com.richardpianka.chess.network.Contracts.Room.newBuilder(room_).mergeFrom(value).buildPartial();
          } else {
            room_ = value;
          }
          onChanged();
        } else {
          roomBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearRoom() {
        if (roomBuilder_ == null) {
          room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
          onChanged();
        } else {
          roomBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Room.Builder getRoomBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder() {
        if (roomBuilder_ != null) {
          return roomBuilder_.getMessageOrBuilder();
        } else {
          return room_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
          getRoomFieldBuilder() {
        if (roomBuilder_ == null) {
          roomBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder>(
                  room_,
                  getParentForChildren(),
                  isClean());
          room_ = null;
        }
        return roomBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinRoomRequest)
    }
    
    static {
      defaultInstance = new JoinRoomRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinRoomRequest)
  }
  
  public interface JoinRoomResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class JoinRoomResponse extends
      com.google.protobuf.GeneratedMessage
      implements JoinRoomResponseOrBuilder {
    // Use JoinRoomResponse.newBuilder() to construct.
    private JoinRoomResponse(JoinRoomResponse.Builder builder) {
      super(builder);
    }
    private JoinRoomResponse(boolean noInit) {}
    
    private static final JoinRoomResponse defaultInstance;
    public static JoinRoomResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinRoomResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinRoomResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder builder = new com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinRoomResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinRoomResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinRoomResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse build() {
        com.richardpianka.chess.network.Contracts.JoinRoomResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinRoomResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinRoomResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinRoomResponse result = new com.richardpianka.chess.network.Contracts.JoinRoomResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinRoomResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinRoomResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinRoomResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinRoomResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinRoomResponse)
    }
    
    static {
      defaultInstance = new JoinRoomResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinRoomResponse)
  }
  
  public interface SpeakRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.SpeakMode Mode = 1;
    boolean hasMode();
    com.richardpianka.chess.network.Contracts.SpeakMode getMode();
    
    // required string Message = 2;
    boolean hasMessage();
    String getMessage();
    
    // optional .com.richardpianka.chess.network.User Recipient = 3;
    boolean hasRecipient();
    com.richardpianka.chess.network.Contracts.User getRecipient();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getRecipientOrBuilder();
  }
  public static final class SpeakRequest extends
      com.google.protobuf.GeneratedMessage
      implements SpeakRequestOrBuilder {
    // Use SpeakRequest.newBuilder() to construct.
    private SpeakRequest(SpeakRequest.Builder builder) {
      super(builder);
    }
    private SpeakRequest(boolean noInit) {}
    
    private static final SpeakRequest defaultInstance;
    public static SpeakRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public SpeakRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpeakRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpeakRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.SpeakMode Mode = 1;
    public static final int MODE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.SpeakMode mode_;
    public boolean hasMode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.SpeakMode getMode() {
      return mode_;
    }
    
    // required string Message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional .com.richardpianka.chess.network.User Recipient = 3;
    public static final int RECIPIENT_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.User recipient_;
    public boolean hasRecipient() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.User getRecipient() {
      return recipient_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getRecipientOrBuilder() {
      return recipient_;
    }
    
    private void initFields() {
      mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
      message_ = "";
      recipient_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRecipient()) {
        if (!getRecipient().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, recipient_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, recipient_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpeakRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.SpeakRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.SpeakRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.SpeakRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.SpeakRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.SpeakRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.SpeakRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.SpeakRequest.Builder builder = new com.richardpianka.chess.network.Contracts.SpeakRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.SpeakRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpeakRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpeakRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.SpeakRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRecipientFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (recipientBuilder_ == null) {
          recipient_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          recipientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.SpeakRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.SpeakRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.SpeakRequest build() {
        com.richardpianka.chess.network.Contracts.SpeakRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.SpeakRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.SpeakRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpeakRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.SpeakRequest result = new com.richardpianka.chess.network.Contracts.SpeakRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mode_ = mode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (recipientBuilder_ == null) {
          result.recipient_ = recipient_;
        } else {
          result.recipient_ = recipientBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpeakRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.SpeakRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.SpeakRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.SpeakRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.SpeakRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.SpeakRequest.getDefaultInstance()) return this;
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasRecipient()) {
          mergeRecipient(other.getRecipient());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMode()) {
          
          return false;
        }
        if (!hasMessage()) {
          
          return false;
        }
        if (hasRecipient()) {
          if (!getRecipient().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.SpeakMode value = com.richardpianka.chess.network.Contracts.SpeakMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                mode_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
            case 26: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasRecipient()) {
                subBuilder.mergeFrom(getRecipient());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRecipient(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.SpeakMode Mode = 1;
      private com.richardpianka.chess.network.Contracts.SpeakMode mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
      public boolean hasMode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.SpeakMode getMode() {
        return mode_;
      }
      public Builder setMode(com.richardpianka.chess.network.Contracts.SpeakMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        mode_ = value;
        onChanged();
        return this;
      }
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
        onChanged();
        return this;
      }
      
      // required string Message = 2;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
      }
      
      // optional .com.richardpianka.chess.network.User Recipient = 3;
      private com.richardpianka.chess.network.Contracts.User recipient_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> recipientBuilder_;
      public boolean hasRecipient() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.User getRecipient() {
        if (recipientBuilder_ == null) {
          return recipient_;
        } else {
          return recipientBuilder_.getMessage();
        }
      }
      public Builder setRecipient(com.richardpianka.chess.network.Contracts.User value) {
        if (recipientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          recipient_ = value;
          onChanged();
        } else {
          recipientBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setRecipient(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (recipientBuilder_ == null) {
          recipient_ = builderForValue.build();
          onChanged();
        } else {
          recipientBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeRecipient(com.richardpianka.chess.network.Contracts.User value) {
        if (recipientBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              recipient_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            recipient_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(recipient_).mergeFrom(value).buildPartial();
          } else {
            recipient_ = value;
          }
          onChanged();
        } else {
          recipientBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearRecipient() {
        if (recipientBuilder_ == null) {
          recipient_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          recipientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getRecipientBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRecipientFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getRecipientOrBuilder() {
        if (recipientBuilder_ != null) {
          return recipientBuilder_.getMessageOrBuilder();
        } else {
          return recipient_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getRecipientFieldBuilder() {
        if (recipientBuilder_ == null) {
          recipientBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  recipient_,
                  getParentForChildren(),
                  isClean());
          recipient_ = null;
        }
        return recipientBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.SpeakRequest)
    }
    
    static {
      defaultInstance = new SpeakRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.SpeakRequest)
  }
  
  public interface OperatorRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.OperatorAction Action = 1;
    boolean hasAction();
    com.richardpianka.chess.network.Contracts.OperatorAction getAction();
    
    // optional .com.richardpianka.chess.network.User User = 2;
    boolean hasUser();
    com.richardpianka.chess.network.Contracts.User getUser();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder();
  }
  public static final class OperatorRequest extends
      com.google.protobuf.GeneratedMessage
      implements OperatorRequestOrBuilder {
    // Use OperatorRequest.newBuilder() to construct.
    private OperatorRequest(OperatorRequest.Builder builder) {
      super(builder);
    }
    private OperatorRequest(boolean noInit) {}
    
    private static final OperatorRequest defaultInstance;
    public static OperatorRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public OperatorRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.OperatorAction Action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.OperatorAction action_;
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.OperatorAction getAction() {
      return action_;
    }
    
    // optional .com.richardpianka.chess.network.User User = 2;
    public static final int USER_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.User user_;
    public boolean hasUser() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.User getUser() {
      return user_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
      return user_;
    }
    
    private void initFields() {
      action_ = com.richardpianka.chess.network.Contracts.OperatorAction.Designate;
      user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasUser()) {
        if (!getUser().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, action_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, user_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, action_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, user_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.OperatorRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.OperatorRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.OperatorRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.OperatorRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.OperatorRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.OperatorRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.OperatorRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.OperatorRequest.Builder builder = new com.richardpianka.chess.network.Contracts.OperatorRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.OperatorRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.OperatorRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        action_ = com.richardpianka.chess.network.Contracts.OperatorAction.Designate;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.OperatorRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorRequest build() {
        com.richardpianka.chess.network.Contracts.OperatorRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.OperatorRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.OperatorRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.OperatorRequest result = new com.richardpianka.chess.network.Contracts.OperatorRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (userBuilder_ == null) {
          result.user_ = user_;
        } else {
          result.user_ = userBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.OperatorRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.OperatorRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.OperatorRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.OperatorRequest.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasAction()) {
          
          return false;
        }
        if (hasUser()) {
          if (!getUser().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.OperatorAction value = com.richardpianka.chess.network.Contracts.OperatorAction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                action_ = value;
              }
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasUser()) {
                subBuilder.mergeFrom(getUser());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUser(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.OperatorAction Action = 1;
      private com.richardpianka.chess.network.Contracts.OperatorAction action_ = com.richardpianka.chess.network.Contracts.OperatorAction.Designate;
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.OperatorAction getAction() {
        return action_;
      }
      public Builder setAction(com.richardpianka.chess.network.Contracts.OperatorAction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        action_ = value;
        onChanged();
        return this;
      }
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = com.richardpianka.chess.network.Contracts.OperatorAction.Designate;
        onChanged();
        return this;
      }
      
      // optional .com.richardpianka.chess.network.User User = 2;
      private com.richardpianka.chess.network.Contracts.User user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> userBuilder_;
      public boolean hasUser() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.User getUser() {
        if (userBuilder_ == null) {
          return user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      public Builder setUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
          onChanged();
        } else {
          userBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setUser(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
          onChanged();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              user_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            user_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(user_).mergeFrom(value).buildPartial();
          } else {
            user_ = value;
          }
          onChanged();
        } else {
          userBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearUser() {
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getUserBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  user_,
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.OperatorRequest)
    }
    
    static {
      defaultInstance = new OperatorRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.OperatorRequest)
  }
  
  public interface OperatorResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class OperatorResponse extends
      com.google.protobuf.GeneratedMessage
      implements OperatorResponseOrBuilder {
    // Use OperatorResponse.newBuilder() to construct.
    private OperatorResponse(OperatorResponse.Builder builder) {
      super(builder);
    }
    private OperatorResponse(boolean noInit) {}
    
    private static final OperatorResponse defaultInstance;
    public static OperatorResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public OperatorResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.OperatorResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.OperatorResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.OperatorResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.OperatorResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.OperatorResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.OperatorResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.OperatorResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.OperatorResponse.Builder builder = new com.richardpianka.chess.network.Contracts.OperatorResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.OperatorResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_OperatorResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.OperatorResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.OperatorResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorResponse build() {
        com.richardpianka.chess.network.Contracts.OperatorResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.OperatorResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.OperatorResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.OperatorResponse result = new com.richardpianka.chess.network.Contracts.OperatorResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.OperatorResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.OperatorResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.OperatorResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.OperatorResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.OperatorResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.OperatorResponse)
    }
    
    static {
      defaultInstance = new OperatorResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.OperatorResponse)
  }
  
  public interface ChatRoomEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Room Room = 1;
    boolean hasRoom();
    com.richardpianka.chess.network.Contracts.Room getRoom();
    com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder();
    
    // repeated .com.richardpianka.chess.network.User Users = 2;
    java.util.List<com.richardpianka.chess.network.Contracts.User> 
        getUsersList();
    com.richardpianka.chess.network.Contracts.User getUsers(int index);
    int getUsersCount();
    java.util.List<? extends com.richardpianka.chess.network.Contracts.UserOrBuilder> 
        getUsersOrBuilderList();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getUsersOrBuilder(
        int index);
  }
  public static final class ChatRoomEvent extends
      com.google.protobuf.GeneratedMessage
      implements ChatRoomEventOrBuilder {
    // Use ChatRoomEvent.newBuilder() to construct.
    private ChatRoomEvent(ChatRoomEvent.Builder builder) {
      super(builder);
    }
    private ChatRoomEvent(boolean noInit) {}
    
    private static final ChatRoomEvent defaultInstance;
    public static ChatRoomEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChatRoomEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatRoomEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatRoomEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Room Room = 1;
    public static final int ROOM_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Room room_;
    public boolean hasRoom() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Room getRoom() {
      return room_;
    }
    public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder() {
      return room_;
    }
    
    // repeated .com.richardpianka.chess.network.User Users = 2;
    public static final int USERS_FIELD_NUMBER = 2;
    private java.util.List<com.richardpianka.chess.network.Contracts.User> users_;
    public java.util.List<com.richardpianka.chess.network.Contracts.User> getUsersList() {
      return users_;
    }
    public java.util.List<? extends com.richardpianka.chess.network.Contracts.UserOrBuilder> 
        getUsersOrBuilderList() {
      return users_;
    }
    public int getUsersCount() {
      return users_.size();
    }
    public com.richardpianka.chess.network.Contracts.User getUsers(int index) {
      return users_.get(index);
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getUsersOrBuilder(
        int index) {
      return users_.get(index);
    }
    
    private void initFields() {
      room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
      users_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasRoom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRoom().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getUsersCount(); i++) {
        if (!getUsers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, room_);
      }
      for (int i = 0; i < users_.size(); i++) {
        output.writeMessage(2, users_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, room_);
      }
      for (int i = 0; i < users_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, users_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.ChatRoomEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder builder = new com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.ChatRoomEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatRoomEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatRoomEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.ChatRoomEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomFieldBuilder();
          getUsersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (roomBuilder_ == null) {
          room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
        } else {
          roomBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (usersBuilder_ == null) {
          users_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          usersBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent build() {
        com.richardpianka.chess.network.Contracts.ChatRoomEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.ChatRoomEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.ChatRoomEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.ChatRoomEvent result = new com.richardpianka.chess.network.Contracts.ChatRoomEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (roomBuilder_ == null) {
          result.room_ = room_;
        } else {
          result.room_ = roomBuilder_.build();
        }
        if (usersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            users_ = java.util.Collections.unmodifiableList(users_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.users_ = users_;
        } else {
          result.users_ = usersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.ChatRoomEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.ChatRoomEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.ChatRoomEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.ChatRoomEvent.getDefaultInstance()) return this;
        if (other.hasRoom()) {
          mergeRoom(other.getRoom());
        }
        if (usersBuilder_ == null) {
          if (!other.users_.isEmpty()) {
            if (users_.isEmpty()) {
              users_ = other.users_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureUsersIsMutable();
              users_.addAll(other.users_);
            }
            onChanged();
          }
        } else {
          if (!other.users_.isEmpty()) {
            if (usersBuilder_.isEmpty()) {
              usersBuilder_.dispose();
              usersBuilder_ = null;
              users_ = other.users_;
              bitField0_ = (bitField0_ & ~0x00000002);
              usersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUsersFieldBuilder() : null;
            } else {
              usersBuilder_.addAllMessages(other.users_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasRoom()) {
          
          return false;
        }
        if (!getRoom().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getUsersCount(); i++) {
          if (!getUsers(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Room.Builder subBuilder = com.richardpianka.chess.network.Contracts.Room.newBuilder();
              if (hasRoom()) {
                subBuilder.mergeFrom(getRoom());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoom(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addUsers(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Room Room = 1;
      private com.richardpianka.chess.network.Contracts.Room room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> roomBuilder_;
      public boolean hasRoom() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Room getRoom() {
        if (roomBuilder_ == null) {
          return room_;
        } else {
          return roomBuilder_.getMessage();
        }
      }
      public Builder setRoom(com.richardpianka.chess.network.Contracts.Room value) {
        if (roomBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          room_ = value;
          onChanged();
        } else {
          roomBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setRoom(
          com.richardpianka.chess.network.Contracts.Room.Builder builderForValue) {
        if (roomBuilder_ == null) {
          room_ = builderForValue.build();
          onChanged();
        } else {
          roomBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeRoom(com.richardpianka.chess.network.Contracts.Room value) {
        if (roomBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              room_ != com.richardpianka.chess.network.Contracts.Room.getDefaultInstance()) {
            room_ =
              com.richardpianka.chess.network.Contracts.Room.newBuilder(room_).mergeFrom(value).buildPartial();
          } else {
            room_ = value;
          }
          onChanged();
        } else {
          roomBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearRoom() {
        if (roomBuilder_ == null) {
          room_ = com.richardpianka.chess.network.Contracts.Room.getDefaultInstance();
          onChanged();
        } else {
          roomBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Room.Builder getRoomBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getRoomFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.RoomOrBuilder getRoomOrBuilder() {
        if (roomBuilder_ != null) {
          return roomBuilder_.getMessageOrBuilder();
        } else {
          return room_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder> 
          getRoomFieldBuilder() {
        if (roomBuilder_ == null) {
          roomBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Room, com.richardpianka.chess.network.Contracts.Room.Builder, com.richardpianka.chess.network.Contracts.RoomOrBuilder>(
                  room_,
                  getParentForChildren(),
                  isClean());
          room_ = null;
        }
        return roomBuilder_;
      }
      
      // repeated .com.richardpianka.chess.network.User Users = 2;
      private java.util.List<com.richardpianka.chess.network.Contracts.User> users_ =
        java.util.Collections.emptyList();
      private void ensureUsersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          users_ = new java.util.ArrayList<com.richardpianka.chess.network.Contracts.User>(users_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> usersBuilder_;
      
      public java.util.List<com.richardpianka.chess.network.Contracts.User> getUsersList() {
        if (usersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(users_);
        } else {
          return usersBuilder_.getMessageList();
        }
      }
      public int getUsersCount() {
        if (usersBuilder_ == null) {
          return users_.size();
        } else {
          return usersBuilder_.getCount();
        }
      }
      public com.richardpianka.chess.network.Contracts.User getUsers(int index) {
        if (usersBuilder_ == null) {
          return users_.get(index);
        } else {
          return usersBuilder_.getMessage(index);
        }
      }
      public Builder setUsers(
          int index, com.richardpianka.chess.network.Contracts.User value) {
        if (usersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUsersIsMutable();
          users_.set(index, value);
          onChanged();
        } else {
          usersBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setUsers(
          int index, com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (usersBuilder_ == null) {
          ensureUsersIsMutable();
          users_.set(index, builderForValue.build());
          onChanged();
        } else {
          usersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addUsers(com.richardpianka.chess.network.Contracts.User value) {
        if (usersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUsersIsMutable();
          users_.add(value);
          onChanged();
        } else {
          usersBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addUsers(
          int index, com.richardpianka.chess.network.Contracts.User value) {
        if (usersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUsersIsMutable();
          users_.add(index, value);
          onChanged();
        } else {
          usersBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addUsers(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (usersBuilder_ == null) {
          ensureUsersIsMutable();
          users_.add(builderForValue.build());
          onChanged();
        } else {
          usersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addUsers(
          int index, com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (usersBuilder_ == null) {
          ensureUsersIsMutable();
          users_.add(index, builderForValue.build());
          onChanged();
        } else {
          usersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllUsers(
          java.lang.Iterable<? extends com.richardpianka.chess.network.Contracts.User> values) {
        if (usersBuilder_ == null) {
          ensureUsersIsMutable();
          super.addAll(values, users_);
          onChanged();
        } else {
          usersBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearUsers() {
        if (usersBuilder_ == null) {
          users_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          usersBuilder_.clear();
        }
        return this;
      }
      public Builder removeUsers(int index) {
        if (usersBuilder_ == null) {
          ensureUsersIsMutable();
          users_.remove(index);
          onChanged();
        } else {
          usersBuilder_.remove(index);
        }
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getUsersBuilder(
          int index) {
        return getUsersFieldBuilder().getBuilder(index);
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getUsersOrBuilder(
          int index) {
        if (usersBuilder_ == null) {
          return users_.get(index);  } else {
          return usersBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends com.richardpianka.chess.network.Contracts.UserOrBuilder> 
           getUsersOrBuilderList() {
        if (usersBuilder_ != null) {
          return usersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(users_);
        }
      }
      public com.richardpianka.chess.network.Contracts.User.Builder addUsersBuilder() {
        return getUsersFieldBuilder().addBuilder(
            com.richardpianka.chess.network.Contracts.User.getDefaultInstance());
      }
      public com.richardpianka.chess.network.Contracts.User.Builder addUsersBuilder(
          int index) {
        return getUsersFieldBuilder().addBuilder(
            index, com.richardpianka.chess.network.Contracts.User.getDefaultInstance());
      }
      public java.util.List<com.richardpianka.chess.network.Contracts.User.Builder> 
           getUsersBuilderList() {
        return getUsersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getUsersFieldBuilder() {
        if (usersBuilder_ == null) {
          usersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  users_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          users_ = null;
        }
        return usersBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.ChatRoomEvent)
    }
    
    static {
      defaultInstance = new ChatRoomEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.ChatRoomEvent)
  }
  
  public interface ChatUserEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.User User = 1;
    boolean hasUser();
    com.richardpianka.chess.network.Contracts.User getUser();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder();
    
    // required .com.richardpianka.chess.network.ChatUserEvent.UserStatus Status = 2;
    boolean hasStatus();
    com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus getStatus();
    
    // optional string Message = 3;
    boolean hasMessage();
    String getMessage();
  }
  public static final class ChatUserEvent extends
      com.google.protobuf.GeneratedMessage
      implements ChatUserEventOrBuilder {
    // Use ChatUserEvent.newBuilder() to construct.
    private ChatUserEvent(ChatUserEvent.Builder builder) {
      super(builder);
    }
    private ChatUserEvent(boolean noInit) {}
    
    private static final ChatUserEvent defaultInstance;
    public static ChatUserEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChatUserEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatUserEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatUserEvent_fieldAccessorTable;
    }
    
    public enum UserStatus
        implements com.google.protobuf.ProtocolMessageEnum {
      Joined(0, 0),
      Left(1, 1),
      Update(2, 2),
      ;
      
      public static final int Joined_VALUE = 0;
      public static final int Left_VALUE = 1;
      public static final int Update_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static UserStatus valueOf(int value) {
        switch (value) {
          case 0: return Joined;
          case 1: return Left;
          case 2: return Update;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<UserStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UserStatus>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UserStatus>() {
              public UserStatus findValueByNumber(int number) {
                return UserStatus.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.ChatUserEvent.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final UserStatus[] VALUES = {
        Joined, Left, Update, 
      };
      
      public static UserStatus valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private UserStatus(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:com.richardpianka.chess.network.ChatUserEvent.UserStatus)
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.User User = 1;
    public static final int USER_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.User user_;
    public boolean hasUser() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.User getUser() {
      return user_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
      return user_;
    }
    
    // required .com.richardpianka.chess.network.ChatUserEvent.UserStatus Status = 2;
    public static final int STATUS_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus status_;
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus getStatus() {
      return status_;
    }
    
    // optional string Message = 3;
    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      status_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus.Joined;
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasUser()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStatus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getUser().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, user_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, status_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, user_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, status_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.ChatUserEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder builder = new com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.ChatUserEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatUserEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatUserEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.ChatUserEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus.Joined;
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.ChatUserEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatUserEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatUserEvent build() {
        com.richardpianka.chess.network.Contracts.ChatUserEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.ChatUserEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.ChatUserEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatUserEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.ChatUserEvent result = new com.richardpianka.chess.network.Contracts.ChatUserEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (userBuilder_ == null) {
          result.user_ = user_;
        } else {
          result.user_ = userBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.ChatUserEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.ChatUserEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.ChatUserEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.ChatUserEvent.getDefaultInstance()) return this;
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasUser()) {
          
          return false;
        }
        if (!hasStatus()) {
          
          return false;
        }
        if (!getUser().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasUser()) {
                subBuilder.mergeFrom(getUser());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUser(subBuilder.buildPartial());
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus value = com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                status_ = value;
              }
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              message_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.User User = 1;
      private com.richardpianka.chess.network.Contracts.User user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> userBuilder_;
      public boolean hasUser() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.User getUser() {
        if (userBuilder_ == null) {
          return user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      public Builder setUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
          onChanged();
        } else {
          userBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setUser(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
          onChanged();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              user_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            user_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(user_).mergeFrom(value).buildPartial();
          } else {
            user_ = value;
          }
          onChanged();
        } else {
          userBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearUser() {
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getUserBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  user_,
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }
      
      // required .com.richardpianka.chess.network.ChatUserEvent.UserStatus Status = 2;
      private com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus status_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus.Joined;
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus getStatus() {
        return status_;
      }
      public Builder setStatus(com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        status_ = value;
        onChanged();
        return this;
      }
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = com.richardpianka.chess.network.Contracts.ChatUserEvent.UserStatus.Joined;
        onChanged();
        return this;
      }
      
      // optional string Message = 3;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.ChatUserEvent)
    }
    
    static {
      defaultInstance = new ChatUserEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.ChatUserEvent)
  }
  
  public interface ChatSpeakEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.User User = 1;
    boolean hasUser();
    com.richardpianka.chess.network.Contracts.User getUser();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder();
    
    // required string Message = 2;
    boolean hasMessage();
    String getMessage();
    
    // required .com.richardpianka.chess.network.SpeakMode Mode = 3;
    boolean hasMode();
    com.richardpianka.chess.network.Contracts.SpeakMode getMode();
  }
  public static final class ChatSpeakEvent extends
      com.google.protobuf.GeneratedMessage
      implements ChatSpeakEventOrBuilder {
    // Use ChatSpeakEvent.newBuilder() to construct.
    private ChatSpeakEvent(ChatSpeakEvent.Builder builder) {
      super(builder);
    }
    private ChatSpeakEvent(boolean noInit) {}
    
    private static final ChatSpeakEvent defaultInstance;
    public static ChatSpeakEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChatSpeakEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatSpeakEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatSpeakEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.User User = 1;
    public static final int USER_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.User user_;
    public boolean hasUser() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.User getUser() {
      return user_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
      return user_;
    }
    
    // required string Message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required .com.richardpianka.chess.network.SpeakMode Mode = 3;
    public static final int MODE_FIELD_NUMBER = 3;
    private com.richardpianka.chess.network.Contracts.SpeakMode mode_;
    public boolean hasMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public com.richardpianka.chess.network.Contracts.SpeakMode getMode() {
      return mode_;
    }
    
    private void initFields() {
      user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      message_ = "";
      mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasUser()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getUser().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, user_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, mode_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, user_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, mode_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.ChatSpeakEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder builder = new com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.ChatSpeakEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatSpeakEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_ChatSpeakEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.ChatSpeakEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent build() {
        com.richardpianka.chess.network.Contracts.ChatSpeakEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.ChatSpeakEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.ChatSpeakEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.ChatSpeakEvent result = new com.richardpianka.chess.network.Contracts.ChatSpeakEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (userBuilder_ == null) {
          result.user_ = user_;
        } else {
          result.user_ = userBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mode_ = mode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.ChatSpeakEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.ChatSpeakEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.ChatSpeakEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.ChatSpeakEvent.getDefaultInstance()) return this;
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasUser()) {
          
          return false;
        }
        if (!hasMessage()) {
          
          return false;
        }
        if (!hasMode()) {
          
          return false;
        }
        if (!getUser().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasUser()) {
                subBuilder.mergeFrom(getUser());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUser(subBuilder.buildPartial());
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.SpeakMode value = com.richardpianka.chess.network.Contracts.SpeakMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                mode_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.User User = 1;
      private com.richardpianka.chess.network.Contracts.User user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> userBuilder_;
      public boolean hasUser() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.User getUser() {
        if (userBuilder_ == null) {
          return user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      public Builder setUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
          onChanged();
        } else {
          userBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setUser(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
          onChanged();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              user_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            user_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(user_).mergeFrom(value).buildPartial();
          } else {
            user_ = value;
          }
          onChanged();
        } else {
          userBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearUser() {
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getUserBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  user_,
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }
      
      // required string Message = 2;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        message_ = value;
        onChanged();
      }
      
      // required .com.richardpianka.chess.network.SpeakMode Mode = 3;
      private com.richardpianka.chess.network.Contracts.SpeakMode mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
      public boolean hasMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public com.richardpianka.chess.network.Contracts.SpeakMode getMode() {
        return mode_;
      }
      public Builder setMode(com.richardpianka.chess.network.Contracts.SpeakMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        mode_ = value;
        onChanged();
        return this;
      }
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mode_ = com.richardpianka.chess.network.Contracts.SpeakMode.Normal;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.ChatSpeakEvent)
    }
    
    static {
      defaultInstance = new ChatSpeakEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.ChatSpeakEvent)
  }
  
  public interface GameListRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class GameListRequest extends
      com.google.protobuf.GeneratedMessage
      implements GameListRequestOrBuilder {
    // Use GameListRequest.newBuilder() to construct.
    private GameListRequest(GameListRequest.Builder builder) {
      super(builder);
    }
    private GameListRequest(boolean noInit) {}
    
    private static final GameListRequest defaultInstance;
    public static GameListRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameListRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameListRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.GameListRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.GameListRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.GameListRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.GameListRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.GameListRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.GameListRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.GameListRequest.Builder builder = new com.richardpianka.chess.network.Contracts.GameListRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameListRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.GameListRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.GameListRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.GameListRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.GameListRequest build() {
        com.richardpianka.chess.network.Contracts.GameListRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.GameListRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.GameListRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameListRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.GameListRequest result = new com.richardpianka.chess.network.Contracts.GameListRequest(this);
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameListRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.GameListRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.GameListRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.GameListRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.GameListRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.GameListRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.GameListRequest)
    }
    
    static {
      defaultInstance = new GameListRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.GameListRequest)
  }
  
  public interface GameListResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .com.richardpianka.chess.network.Game Games = 1;
    java.util.List<com.richardpianka.chess.network.Contracts.Game> 
        getGamesList();
    com.richardpianka.chess.network.Contracts.Game getGames(int index);
    int getGamesCount();
    java.util.List<? extends com.richardpianka.chess.network.Contracts.GameOrBuilder> 
        getGamesOrBuilderList();
    com.richardpianka.chess.network.Contracts.GameOrBuilder getGamesOrBuilder(
        int index);
  }
  public static final class GameListResponse extends
      com.google.protobuf.GeneratedMessage
      implements GameListResponseOrBuilder {
    // Use GameListResponse.newBuilder() to construct.
    private GameListResponse(GameListResponse.Builder builder) {
      super(builder);
    }
    private GameListResponse(boolean noInit) {}
    
    private static final GameListResponse defaultInstance;
    public static GameListResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameListResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListResponse_fieldAccessorTable;
    }
    
    // repeated .com.richardpianka.chess.network.Game Games = 1;
    public static final int GAMES_FIELD_NUMBER = 1;
    private java.util.List<com.richardpianka.chess.network.Contracts.Game> games_;
    public java.util.List<com.richardpianka.chess.network.Contracts.Game> getGamesList() {
      return games_;
    }
    public java.util.List<? extends com.richardpianka.chess.network.Contracts.GameOrBuilder> 
        getGamesOrBuilderList() {
      return games_;
    }
    public int getGamesCount() {
      return games_.size();
    }
    public com.richardpianka.chess.network.Contracts.Game getGames(int index) {
      return games_.get(index);
    }
    public com.richardpianka.chess.network.Contracts.GameOrBuilder getGamesOrBuilder(
        int index) {
      return games_.get(index);
    }
    
    private void initFields() {
      games_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getGamesCount(); i++) {
        if (!getGames(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < games_.size(); i++) {
        output.writeMessage(1, games_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < games_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, games_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameListResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameListResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.GameListResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.GameListResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.GameListResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.GameListResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.GameListResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.GameListResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.GameListResponse.Builder builder = new com.richardpianka.chess.network.Contracts.GameListResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameListResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameListResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.GameListResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGamesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (gamesBuilder_ == null) {
          games_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          gamesBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.GameListResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.GameListResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.GameListResponse build() {
        com.richardpianka.chess.network.Contracts.GameListResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.GameListResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.GameListResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameListResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.GameListResponse result = new com.richardpianka.chess.network.Contracts.GameListResponse(this);
        int from_bitField0_ = bitField0_;
        if (gamesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            games_ = java.util.Collections.unmodifiableList(games_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.games_ = games_;
        } else {
          result.games_ = gamesBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameListResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.GameListResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.GameListResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.GameListResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.GameListResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.GameListResponse.getDefaultInstance()) return this;
        if (gamesBuilder_ == null) {
          if (!other.games_.isEmpty()) {
            if (games_.isEmpty()) {
              games_ = other.games_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureGamesIsMutable();
              games_.addAll(other.games_);
            }
            onChanged();
          }
        } else {
          if (!other.games_.isEmpty()) {
            if (gamesBuilder_.isEmpty()) {
              gamesBuilder_.dispose();
              gamesBuilder_ = null;
              games_ = other.games_;
              bitField0_ = (bitField0_ & ~0x00000001);
              gamesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGamesFieldBuilder() : null;
            } else {
              gamesBuilder_.addAllMessages(other.games_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getGamesCount(); i++) {
          if (!getGames(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Game.Builder subBuilder = com.richardpianka.chess.network.Contracts.Game.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addGames(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .com.richardpianka.chess.network.Game Games = 1;
      private java.util.List<com.richardpianka.chess.network.Contracts.Game> games_ =
        java.util.Collections.emptyList();
      private void ensureGamesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          games_ = new java.util.ArrayList<com.richardpianka.chess.network.Contracts.Game>(games_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> gamesBuilder_;
      
      public java.util.List<com.richardpianka.chess.network.Contracts.Game> getGamesList() {
        if (gamesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(games_);
        } else {
          return gamesBuilder_.getMessageList();
        }
      }
      public int getGamesCount() {
        if (gamesBuilder_ == null) {
          return games_.size();
        } else {
          return gamesBuilder_.getCount();
        }
      }
      public com.richardpianka.chess.network.Contracts.Game getGames(int index) {
        if (gamesBuilder_ == null) {
          return games_.get(index);
        } else {
          return gamesBuilder_.getMessage(index);
        }
      }
      public Builder setGames(
          int index, com.richardpianka.chess.network.Contracts.Game value) {
        if (gamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGamesIsMutable();
          games_.set(index, value);
          onChanged();
        } else {
          gamesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setGames(
          int index, com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gamesBuilder_ == null) {
          ensureGamesIsMutable();
          games_.set(index, builderForValue.build());
          onChanged();
        } else {
          gamesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addGames(com.richardpianka.chess.network.Contracts.Game value) {
        if (gamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGamesIsMutable();
          games_.add(value);
          onChanged();
        } else {
          gamesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addGames(
          int index, com.richardpianka.chess.network.Contracts.Game value) {
        if (gamesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGamesIsMutable();
          games_.add(index, value);
          onChanged();
        } else {
          gamesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addGames(
          com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gamesBuilder_ == null) {
          ensureGamesIsMutable();
          games_.add(builderForValue.build());
          onChanged();
        } else {
          gamesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addGames(
          int index, com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gamesBuilder_ == null) {
          ensureGamesIsMutable();
          games_.add(index, builderForValue.build());
          onChanged();
        } else {
          gamesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllGames(
          java.lang.Iterable<? extends com.richardpianka.chess.network.Contracts.Game> values) {
        if (gamesBuilder_ == null) {
          ensureGamesIsMutable();
          super.addAll(values, games_);
          onChanged();
        } else {
          gamesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearGames() {
        if (gamesBuilder_ == null) {
          games_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          gamesBuilder_.clear();
        }
        return this;
      }
      public Builder removeGames(int index) {
        if (gamesBuilder_ == null) {
          ensureGamesIsMutable();
          games_.remove(index);
          onChanged();
        } else {
          gamesBuilder_.remove(index);
        }
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder getGamesBuilder(
          int index) {
        return getGamesFieldBuilder().getBuilder(index);
      }
      public com.richardpianka.chess.network.Contracts.GameOrBuilder getGamesOrBuilder(
          int index) {
        if (gamesBuilder_ == null) {
          return games_.get(index);  } else {
          return gamesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends com.richardpianka.chess.network.Contracts.GameOrBuilder> 
           getGamesOrBuilderList() {
        if (gamesBuilder_ != null) {
          return gamesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(games_);
        }
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder addGamesBuilder() {
        return getGamesFieldBuilder().addBuilder(
            com.richardpianka.chess.network.Contracts.Game.getDefaultInstance());
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder addGamesBuilder(
          int index) {
        return getGamesFieldBuilder().addBuilder(
            index, com.richardpianka.chess.network.Contracts.Game.getDefaultInstance());
      }
      public java.util.List<com.richardpianka.chess.network.Contracts.Game.Builder> 
           getGamesBuilderList() {
        return getGamesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> 
          getGamesFieldBuilder() {
        if (gamesBuilder_ == null) {
          gamesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder>(
                  games_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          games_ = null;
        }
        return gamesBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.GameListResponse)
    }
    
    static {
      defaultInstance = new GameListResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.GameListResponse)
  }
  
  public interface CreateGameRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string Name = 1;
    boolean hasName();
    String getName();
    
    // optional string Password = 2;
    boolean hasPassword();
    String getPassword();
  }
  public static final class CreateGameRequest extends
      com.google.protobuf.GeneratedMessage
      implements CreateGameRequestOrBuilder {
    // Use CreateGameRequest.newBuilder() to construct.
    private CreateGameRequest(CreateGameRequest.Builder builder) {
      super(builder);
    }
    private CreateGameRequest(boolean noInit) {}
    
    private static final CreateGameRequest defaultInstance;
    public static CreateGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public CreateGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string Name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional string Password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      name_ = "";
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.CreateGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder builder = new com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.CreateGameRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.CreateGameRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.CreateGameRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameRequest build() {
        com.richardpianka.chess.network.Contracts.CreateGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.CreateGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.CreateGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.CreateGameRequest result = new com.richardpianka.chess.network.Contracts.CreateGameRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.CreateGameRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.CreateGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.CreateGameRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.CreateGameRequest.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string Name = 1;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
      }
      
      // optional string Password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.CreateGameRequest)
    }
    
    static {
      defaultInstance = new CreateGameRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.CreateGameRequest)
  }
  
  public interface CreateGameResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
    
    // optional .com.richardpianka.chess.network.Game Game = 2;
    boolean hasGame();
    com.richardpianka.chess.network.Contracts.Game getGame();
    com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder();
    
    // optional string Message = 3;
    boolean hasMessage();
    String getMessage();
  }
  public static final class CreateGameResponse extends
      com.google.protobuf.GeneratedMessage
      implements CreateGameResponseOrBuilder {
    // Use CreateGameResponse.newBuilder() to construct.
    private CreateGameResponse(CreateGameResponse.Builder builder) {
      super(builder);
    }
    private CreateGameResponse(boolean noInit) {}
    
    private static final CreateGameResponse defaultInstance;
    public static CreateGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public CreateGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    // optional .com.richardpianka.chess.network.Game Game = 2;
    public static final int GAME_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Game game_;
    public boolean hasGame() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Game getGame() {
      return game_;
    }
    public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
      return game_;
    }
    
    // optional string Message = 3;
    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasGame()) {
        if (!getGame().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, game_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, game_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.CreateGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder builder = new com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.CreateGameResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_CreateGameResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.CreateGameResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGameFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.CreateGameResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameResponse build() {
        com.richardpianka.chess.network.Contracts.CreateGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.CreateGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.CreateGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.CreateGameResponse result = new com.richardpianka.chess.network.Contracts.CreateGameResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (gameBuilder_ == null) {
          result.game_ = game_;
        } else {
          result.game_ = gameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.CreateGameResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.CreateGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.CreateGameResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.CreateGameResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasGame()) {
          mergeGame(other.getGame());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        if (hasGame()) {
          if (!getGame().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.Game.Builder subBuilder = com.richardpianka.chess.network.Contracts.Game.newBuilder();
              if (hasGame()) {
                subBuilder.mergeFrom(getGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGame(subBuilder.buildPartial());
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              message_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // optional .com.richardpianka.chess.network.Game Game = 2;
      private com.richardpianka.chess.network.Contracts.Game game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> gameBuilder_;
      public boolean hasGame() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Game getGame() {
        if (gameBuilder_ == null) {
          return game_;
        } else {
          return gameBuilder_.getMessage();
        }
      }
      public Builder setGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          game_ = value;
          onChanged();
        } else {
          gameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setGame(
          com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gameBuilder_ == null) {
          game_ = builderForValue.build();
          onChanged();
        } else {
          gameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              game_ != com.richardpianka.chess.network.Contracts.Game.getDefaultInstance()) {
            game_ =
              com.richardpianka.chess.network.Contracts.Game.newBuilder(game_).mergeFrom(value).buildPartial();
          } else {
            game_ = value;
          }
          onChanged();
        } else {
          gameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearGame() {
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
          onChanged();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder getGameBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getGameFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
        if (gameBuilder_ != null) {
          return gameBuilder_.getMessageOrBuilder();
        } else {
          return game_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> 
          getGameFieldBuilder() {
        if (gameBuilder_ == null) {
          gameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder>(
                  game_,
                  getParentForChildren(),
                  isClean());
          game_ = null;
        }
        return gameBuilder_;
      }
      
      // optional string Message = 3;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.CreateGameResponse)
    }
    
    static {
      defaultInstance = new CreateGameResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.CreateGameResponse)
  }
  
  public interface JoinGameRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Game Game = 1;
    boolean hasGame();
    com.richardpianka.chess.network.Contracts.Game getGame();
    com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder();
    
    // optional string Password = 2;
    boolean hasPassword();
    String getPassword();
  }
  public static final class JoinGameRequest extends
      com.google.protobuf.GeneratedMessage
      implements JoinGameRequestOrBuilder {
    // Use JoinGameRequest.newBuilder() to construct.
    private JoinGameRequest(JoinGameRequest.Builder builder) {
      super(builder);
    }
    private JoinGameRequest(boolean noInit) {}
    
    private static final JoinGameRequest defaultInstance;
    public static JoinGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Game Game = 1;
    public static final int GAME_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Game game_;
    public boolean hasGame() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Game getGame() {
      return game_;
    }
    public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
      return game_;
    }
    
    // optional string Password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasGame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getGame().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, game_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, game_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder builder = new com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinGameRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinGameRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGameFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinGameRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameRequest build() {
        com.richardpianka.chess.network.Contracts.JoinGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinGameRequest result = new com.richardpianka.chess.network.Contracts.JoinGameRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (gameBuilder_ == null) {
          result.game_ = game_;
        } else {
          result.game_ = gameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinGameRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinGameRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinGameRequest.getDefaultInstance()) return this;
        if (other.hasGame()) {
          mergeGame(other.getGame());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasGame()) {
          
          return false;
        }
        if (!getGame().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Game.Builder subBuilder = com.richardpianka.chess.network.Contracts.Game.newBuilder();
              if (hasGame()) {
                subBuilder.mergeFrom(getGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGame(subBuilder.buildPartial());
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Game Game = 1;
      private com.richardpianka.chess.network.Contracts.Game game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> gameBuilder_;
      public boolean hasGame() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Game getGame() {
        if (gameBuilder_ == null) {
          return game_;
        } else {
          return gameBuilder_.getMessage();
        }
      }
      public Builder setGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          game_ = value;
          onChanged();
        } else {
          gameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setGame(
          com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gameBuilder_ == null) {
          game_ = builderForValue.build();
          onChanged();
        } else {
          gameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              game_ != com.richardpianka.chess.network.Contracts.Game.getDefaultInstance()) {
            game_ =
              com.richardpianka.chess.network.Contracts.Game.newBuilder(game_).mergeFrom(value).buildPartial();
          } else {
            game_ = value;
          }
          onChanged();
        } else {
          gameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearGame() {
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
          onChanged();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder getGameBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getGameFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
        if (gameBuilder_ != null) {
          return gameBuilder_.getMessageOrBuilder();
        } else {
          return game_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> 
          getGameFieldBuilder() {
        if (gameBuilder_ == null) {
          gameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder>(
                  game_,
                  getParentForChildren(),
                  isClean());
          game_ = null;
        }
        return gameBuilder_;
      }
      
      // optional string Password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinGameRequest)
    }
    
    static {
      defaultInstance = new JoinGameRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinGameRequest)
  }
  
  public interface JoinGameResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Game Game = 1;
    boolean hasGame();
    com.richardpianka.chess.network.Contracts.Game getGame();
    com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder();
    
    // required .com.richardpianka.chess.network.Result Result = 2;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class JoinGameResponse extends
      com.google.protobuf.GeneratedMessage
      implements JoinGameResponseOrBuilder {
    // Use JoinGameResponse.newBuilder() to construct.
    private JoinGameResponse(JoinGameResponse.Builder builder) {
      super(builder);
    }
    private JoinGameResponse(boolean noInit) {}
    
    private static final JoinGameResponse defaultInstance;
    public static JoinGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public JoinGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Game Game = 1;
    public static final int GAME_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Game game_;
    public boolean hasGame() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Game getGame() {
      return game_;
    }
    public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
      return game_;
    }
    
    // required .com.richardpianka.chess.network.Result Result = 2;
    public static final int RESULT_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasGame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getGame().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, game_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, game_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.JoinGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder builder = new com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.JoinGameResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_JoinGameResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.JoinGameResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGameFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.JoinGameResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameResponse build() {
        com.richardpianka.chess.network.Contracts.JoinGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.JoinGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.JoinGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.JoinGameResponse result = new com.richardpianka.chess.network.Contracts.JoinGameResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (gameBuilder_ == null) {
          result.game_ = game_;
        } else {
          result.game_ = gameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.JoinGameResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.JoinGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.JoinGameResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.JoinGameResponse.getDefaultInstance()) return this;
        if (other.hasGame()) {
          mergeGame(other.getGame());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasGame()) {
          
          return false;
        }
        if (!hasResult()) {
          
          return false;
        }
        if (!getGame().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Game.Builder subBuilder = com.richardpianka.chess.network.Contracts.Game.newBuilder();
              if (hasGame()) {
                subBuilder.mergeFrom(getGame());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGame(subBuilder.buildPartial());
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Game Game = 1;
      private com.richardpianka.chess.network.Contracts.Game game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> gameBuilder_;
      public boolean hasGame() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Game getGame() {
        if (gameBuilder_ == null) {
          return game_;
        } else {
          return gameBuilder_.getMessage();
        }
      }
      public Builder setGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          game_ = value;
          onChanged();
        } else {
          gameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setGame(
          com.richardpianka.chess.network.Contracts.Game.Builder builderForValue) {
        if (gameBuilder_ == null) {
          game_ = builderForValue.build();
          onChanged();
        } else {
          gameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeGame(com.richardpianka.chess.network.Contracts.Game value) {
        if (gameBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              game_ != com.richardpianka.chess.network.Contracts.Game.getDefaultInstance()) {
            game_ =
              com.richardpianka.chess.network.Contracts.Game.newBuilder(game_).mergeFrom(value).buildPartial();
          } else {
            game_ = value;
          }
          onChanged();
        } else {
          gameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearGame() {
        if (gameBuilder_ == null) {
          game_ = com.richardpianka.chess.network.Contracts.Game.getDefaultInstance();
          onChanged();
        } else {
          gameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Game.Builder getGameBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getGameFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.GameOrBuilder getGameOrBuilder() {
        if (gameBuilder_ != null) {
          return gameBuilder_.getMessageOrBuilder();
        } else {
          return game_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder> 
          getGameFieldBuilder() {
        if (gameBuilder_ == null) {
          gameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Game, com.richardpianka.chess.network.Contracts.Game.Builder, com.richardpianka.chess.network.Contracts.GameOrBuilder>(
                  game_,
                  getParentForChildren(),
                  isClean());
          game_ = null;
        }
        return gameBuilder_;
      }
      
      // required .com.richardpianka.chess.network.Result Result = 2;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000002);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.JoinGameResponse)
    }
    
    static {
      defaultInstance = new JoinGameResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.JoinGameResponse)
  }
  
  public interface LeaveGameRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class LeaveGameRequest extends
      com.google.protobuf.GeneratedMessage
      implements LeaveGameRequestOrBuilder {
    // Use LeaveGameRequest.newBuilder() to construct.
    private LeaveGameRequest(LeaveGameRequest.Builder builder) {
      super(builder);
    }
    private LeaveGameRequest(boolean noInit) {}
    
    private static final LeaveGameRequest defaultInstance;
    public static LeaveGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public LeaveGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_LeaveGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_LeaveGameRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.LeaveGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder builder = new com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.LeaveGameRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_LeaveGameRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_LeaveGameRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.LeaveGameRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest build() {
        com.richardpianka.chess.network.Contracts.LeaveGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.LeaveGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.LeaveGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.LeaveGameRequest result = new com.richardpianka.chess.network.Contracts.LeaveGameRequest(this);
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.LeaveGameRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.LeaveGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.LeaveGameRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.LeaveGameRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.LeaveGameRequest)
    }
    
    static {
      defaultInstance = new LeaveGameRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.LeaveGameRequest)
  }
  
  public interface StartGameRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class StartGameRequest extends
      com.google.protobuf.GeneratedMessage
      implements StartGameRequestOrBuilder {
    // Use StartGameRequest.newBuilder() to construct.
    private StartGameRequest(StartGameRequest.Builder builder) {
      super(builder);
    }
    private StartGameRequest(boolean noInit) {}
    
    private static final StartGameRequest defaultInstance;
    public static StartGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public StartGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.StartGameRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.StartGameRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.StartGameRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.StartGameRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.StartGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.StartGameRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.StartGameRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.StartGameRequest.Builder builder = new com.richardpianka.chess.network.Contracts.StartGameRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.StartGameRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.StartGameRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.StartGameRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameRequest build() {
        com.richardpianka.chess.network.Contracts.StartGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.StartGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.StartGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.StartGameRequest result = new com.richardpianka.chess.network.Contracts.StartGameRequest(this);
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.StartGameRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.StartGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.StartGameRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.StartGameRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.StartGameRequest)
    }
    
    static {
      defaultInstance = new StartGameRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.StartGameRequest)
  }
  
  public interface StartGameResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class StartGameResponse extends
      com.google.protobuf.GeneratedMessage
      implements StartGameResponseOrBuilder {
    // Use StartGameResponse.newBuilder() to construct.
    private StartGameResponse(StartGameResponse.Builder builder) {
      super(builder);
    }
    private StartGameResponse(boolean noInit) {}
    
    private static final StartGameResponse defaultInstance;
    public static StartGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public StartGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.StartGameResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.StartGameResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.StartGameResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.StartGameResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.StartGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.StartGameResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.StartGameResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.StartGameResponse.Builder builder = new com.richardpianka.chess.network.Contracts.StartGameResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.StartGameResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_StartGameResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.StartGameResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.StartGameResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameResponse build() {
        com.richardpianka.chess.network.Contracts.StartGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.StartGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.StartGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.StartGameResponse result = new com.richardpianka.chess.network.Contracts.StartGameResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.StartGameResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.StartGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.StartGameResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.StartGameResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.StartGameResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.StartGameResponse)
    }
    
    static {
      defaultInstance = new StartGameResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.StartGameResponse)
  }
  
  public interface GameStartedEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Color Color = 1;
    boolean hasColor();
    com.richardpianka.chess.network.Contracts.Color getColor();
  }
  public static final class GameStartedEvent extends
      com.google.protobuf.GeneratedMessage
      implements GameStartedEventOrBuilder {
    // Use GameStartedEvent.newBuilder() to construct.
    private GameStartedEvent(GameStartedEvent.Builder builder) {
      super(builder);
    }
    private GameStartedEvent(boolean noInit) {}
    
    private static final GameStartedEvent defaultInstance;
    public static GameStartedEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameStartedEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStartedEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStartedEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Color Color = 1;
    public static final int COLOR_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Color color_;
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Color getColor() {
      return color_;
    }
    
    private void initFields() {
      color_ = com.richardpianka.chess.network.Contracts.Color.White;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasColor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, color_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, color_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.GameStartedEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder builder = new com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameStartedEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStartedEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStartedEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.GameStartedEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        color_ = com.richardpianka.chess.network.Contracts.Color.White;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.GameStartedEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.GameStartedEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.GameStartedEvent build() {
        com.richardpianka.chess.network.Contracts.GameStartedEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.GameStartedEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.GameStartedEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameStartedEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.GameStartedEvent result = new com.richardpianka.chess.network.Contracts.GameStartedEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.color_ = color_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.GameStartedEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.GameStartedEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.GameStartedEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.GameStartedEvent.getDefaultInstance()) return this;
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasColor()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Color value = com.richardpianka.chess.network.Contracts.Color.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                color_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Color Color = 1;
      private com.richardpianka.chess.network.Contracts.Color color_ = com.richardpianka.chess.network.Contracts.Color.White;
      public boolean hasColor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Color getColor() {
        return color_;
      }
      public Builder setColor(com.richardpianka.chess.network.Contracts.Color value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        color_ = value;
        onChanged();
        return this;
      }
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = com.richardpianka.chess.network.Contracts.Color.White;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.GameStartedEvent)
    }
    
    static {
      defaultInstance = new GameStartedEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.GameStartedEvent)
  }
  
  public interface MovePieceRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Move Move = 1;
    boolean hasMove();
    com.richardpianka.chess.network.Contracts.Move getMove();
    com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder();
  }
  public static final class MovePieceRequest extends
      com.google.protobuf.GeneratedMessage
      implements MovePieceRequestOrBuilder {
    // Use MovePieceRequest.newBuilder() to construct.
    private MovePieceRequest(MovePieceRequest.Builder builder) {
      super(builder);
    }
    private MovePieceRequest(boolean noInit) {}
    
    private static final MovePieceRequest defaultInstance;
    public static MovePieceRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public MovePieceRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Move Move = 1;
    public static final int MOVE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Move move_;
    public boolean hasMove() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Move getMove() {
      return move_;
    }
    public com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder() {
      return move_;
    }
    
    private void initFields() {
      move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMove()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMove().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, move_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, move_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.MovePieceRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder builder = new com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.MovePieceRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.MovePieceRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMoveFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceRequest build() {
        com.richardpianka.chess.network.Contracts.MovePieceRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.MovePieceRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.MovePieceRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.MovePieceRequest result = new com.richardpianka.chess.network.Contracts.MovePieceRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (moveBuilder_ == null) {
          result.move_ = move_;
        } else {
          result.move_ = moveBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.MovePieceRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.MovePieceRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.MovePieceRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.MovePieceRequest.getDefaultInstance()) return this;
        if (other.hasMove()) {
          mergeMove(other.getMove());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMove()) {
          
          return false;
        }
        if (!getMove().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Move.Builder subBuilder = com.richardpianka.chess.network.Contracts.Move.newBuilder();
              if (hasMove()) {
                subBuilder.mergeFrom(getMove());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMove(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Move Move = 1;
      private com.richardpianka.chess.network.Contracts.Move move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder> moveBuilder_;
      public boolean hasMove() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Move getMove() {
        if (moveBuilder_ == null) {
          return move_;
        } else {
          return moveBuilder_.getMessage();
        }
      }
      public Builder setMove(com.richardpianka.chess.network.Contracts.Move value) {
        if (moveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          move_ = value;
          onChanged();
        } else {
          moveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setMove(
          com.richardpianka.chess.network.Contracts.Move.Builder builderForValue) {
        if (moveBuilder_ == null) {
          move_ = builderForValue.build();
          onChanged();
        } else {
          moveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeMove(com.richardpianka.chess.network.Contracts.Move value) {
        if (moveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              move_ != com.richardpianka.chess.network.Contracts.Move.getDefaultInstance()) {
            move_ =
              com.richardpianka.chess.network.Contracts.Move.newBuilder(move_).mergeFrom(value).buildPartial();
          } else {
            move_ = value;
          }
          onChanged();
        } else {
          moveBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearMove() {
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
          onChanged();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Move.Builder getMoveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMoveFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder() {
        if (moveBuilder_ != null) {
          return moveBuilder_.getMessageOrBuilder();
        } else {
          return move_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder> 
          getMoveFieldBuilder() {
        if (moveBuilder_ == null) {
          moveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder>(
                  move_,
                  getParentForChildren(),
                  isClean());
          move_ = null;
        }
        return moveBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.MovePieceRequest)
    }
    
    static {
      defaultInstance = new MovePieceRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.MovePieceRequest)
  }
  
  public interface MovePieceResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class MovePieceResponse extends
      com.google.protobuf.GeneratedMessage
      implements MovePieceResponseOrBuilder {
    // Use MovePieceResponse.newBuilder() to construct.
    private MovePieceResponse(MovePieceResponse.Builder builder) {
      super(builder);
    }
    private MovePieceResponse(boolean noInit) {}
    
    private static final MovePieceResponse defaultInstance;
    public static MovePieceResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public MovePieceResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.MovePieceResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder builder = new com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.MovePieceResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.MovePieceResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceResponse build() {
        com.richardpianka.chess.network.Contracts.MovePieceResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.MovePieceResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.MovePieceResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.MovePieceResponse result = new com.richardpianka.chess.network.Contracts.MovePieceResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.MovePieceResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.MovePieceResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.MovePieceResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.MovePieceResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.MovePieceResponse)
    }
    
    static {
      defaultInstance = new MovePieceResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.MovePieceResponse)
  }
  
  public interface MovePieceEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Move Move = 1;
    boolean hasMove();
    com.richardpianka.chess.network.Contracts.Move getMove();
    com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder();
  }
  public static final class MovePieceEvent extends
      com.google.protobuf.GeneratedMessage
      implements MovePieceEventOrBuilder {
    // Use MovePieceEvent.newBuilder() to construct.
    private MovePieceEvent(MovePieceEvent.Builder builder) {
      super(builder);
    }
    private MovePieceEvent(boolean noInit) {}
    
    private static final MovePieceEvent defaultInstance;
    public static MovePieceEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public MovePieceEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Move Move = 1;
    public static final int MOVE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Move move_;
    public boolean hasMove() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Move getMove() {
      return move_;
    }
    public com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder() {
      return move_;
    }
    
    private void initFields() {
      move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMove()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMove().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, move_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, move_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.MovePieceEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder builder = new com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.MovePieceEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_MovePieceEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.MovePieceEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMoveFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceEvent build() {
        com.richardpianka.chess.network.Contracts.MovePieceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.MovePieceEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.MovePieceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.MovePieceEvent result = new com.richardpianka.chess.network.Contracts.MovePieceEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (moveBuilder_ == null) {
          result.move_ = move_;
        } else {
          result.move_ = moveBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.MovePieceEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.MovePieceEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.MovePieceEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.MovePieceEvent.getDefaultInstance()) return this;
        if (other.hasMove()) {
          mergeMove(other.getMove());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMove()) {
          
          return false;
        }
        if (!getMove().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.Move.Builder subBuilder = com.richardpianka.chess.network.Contracts.Move.newBuilder();
              if (hasMove()) {
                subBuilder.mergeFrom(getMove());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMove(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Move Move = 1;
      private com.richardpianka.chess.network.Contracts.Move move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder> moveBuilder_;
      public boolean hasMove() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Move getMove() {
        if (moveBuilder_ == null) {
          return move_;
        } else {
          return moveBuilder_.getMessage();
        }
      }
      public Builder setMove(com.richardpianka.chess.network.Contracts.Move value) {
        if (moveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          move_ = value;
          onChanged();
        } else {
          moveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setMove(
          com.richardpianka.chess.network.Contracts.Move.Builder builderForValue) {
        if (moveBuilder_ == null) {
          move_ = builderForValue.build();
          onChanged();
        } else {
          moveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeMove(com.richardpianka.chess.network.Contracts.Move value) {
        if (moveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              move_ != com.richardpianka.chess.network.Contracts.Move.getDefaultInstance()) {
            move_ =
              com.richardpianka.chess.network.Contracts.Move.newBuilder(move_).mergeFrom(value).buildPartial();
          } else {
            move_ = value;
          }
          onChanged();
        } else {
          moveBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearMove() {
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.Move.getDefaultInstance();
          onChanged();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.Move.Builder getMoveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMoveFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.MoveOrBuilder getMoveOrBuilder() {
        if (moveBuilder_ != null) {
          return moveBuilder_.getMessageOrBuilder();
        } else {
          return move_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder> 
          getMoveFieldBuilder() {
        if (moveBuilder_ == null) {
          moveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.Move, com.richardpianka.chess.network.Contracts.Move.Builder, com.richardpianka.chess.network.Contracts.MoveOrBuilder>(
                  move_,
                  getParentForChildren(),
                  isClean());
          move_ = null;
        }
        return moveBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.MovePieceEvent)
    }
    
    static {
      defaultInstance = new MovePieceEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.MovePieceEvent)
  }
  
  public interface SpecialMovePieceRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.SpecialMove Move = 1;
    boolean hasMove();
    com.richardpianka.chess.network.Contracts.SpecialMove getMove();
    com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder();
  }
  public static final class SpecialMovePieceRequest extends
      com.google.protobuf.GeneratedMessage
      implements SpecialMovePieceRequestOrBuilder {
    // Use SpecialMovePieceRequest.newBuilder() to construct.
    private SpecialMovePieceRequest(SpecialMovePieceRequest.Builder builder) {
      super(builder);
    }
    private SpecialMovePieceRequest(boolean noInit) {}
    
    private static final SpecialMovePieceRequest defaultInstance;
    public static SpecialMovePieceRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public SpecialMovePieceRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.SpecialMove Move = 1;
    public static final int MOVE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.SpecialMove move_;
    public boolean hasMove() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMove getMove() {
      return move_;
    }
    public com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder() {
      return move_;
    }
    
    private void initFields() {
      move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMove()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMove().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, move_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, move_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder newBuilder(com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder builder = new com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.SpecialMovePieceRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMoveFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest build() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest buildPartial() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest result = new com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (moveBuilder_ == null) {
          result.move_ = move_;
        } else {
          result.move_ = moveBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder mergeFrom(com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest other) {
        if (other == com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.getDefaultInstance()) return this;
        if (other.hasMove()) {
          mergeMove(other.getMove());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMove()) {
          
          return false;
        }
        if (!getMove().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.SpecialMove.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpecialMove.newBuilder();
              if (hasMove()) {
                subBuilder.mergeFrom(getMove());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMove(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.SpecialMove Move = 1;
      private com.richardpianka.chess.network.Contracts.SpecialMove move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder> moveBuilder_;
      public boolean hasMove() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.SpecialMove getMove() {
        if (moveBuilder_ == null) {
          return move_;
        } else {
          return moveBuilder_.getMessage();
        }
      }
      public Builder setMove(com.richardpianka.chess.network.Contracts.SpecialMove value) {
        if (moveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          move_ = value;
          onChanged();
        } else {
          moveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setMove(
          com.richardpianka.chess.network.Contracts.SpecialMove.Builder builderForValue) {
        if (moveBuilder_ == null) {
          move_ = builderForValue.build();
          onChanged();
        } else {
          moveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeMove(com.richardpianka.chess.network.Contracts.SpecialMove value) {
        if (moveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              move_ != com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance()) {
            move_ =
              com.richardpianka.chess.network.Contracts.SpecialMove.newBuilder(move_).mergeFrom(value).buildPartial();
          } else {
            move_ = value;
          }
          onChanged();
        } else {
          moveBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearMove() {
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
          onChanged();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpecialMove.Builder getMoveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMoveFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder() {
        if (moveBuilder_ != null) {
          return moveBuilder_.getMessageOrBuilder();
        } else {
          return move_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder> 
          getMoveFieldBuilder() {
        if (moveBuilder_ == null) {
          moveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder>(
                  move_,
                  getParentForChildren(),
                  isClean());
          move_ = null;
        }
        return moveBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.SpecialMovePieceRequest)
    }
    
    static {
      defaultInstance = new SpecialMovePieceRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.SpecialMovePieceRequest)
  }
  
  public interface SpecialMovePieceResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.Result Result = 1;
    boolean hasResult();
    com.richardpianka.chess.network.Contracts.Result getResult();
  }
  public static final class SpecialMovePieceResponse extends
      com.google.protobuf.GeneratedMessage
      implements SpecialMovePieceResponseOrBuilder {
    // Use SpecialMovePieceResponse.newBuilder() to construct.
    private SpecialMovePieceResponse(SpecialMovePieceResponse.Builder builder) {
      super(builder);
    }
    private SpecialMovePieceResponse(boolean noInit) {}
    
    private static final SpecialMovePieceResponse defaultInstance;
    public static SpecialMovePieceResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public SpecialMovePieceResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.Result Result = 1;
    public static final int RESULT_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.Result result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.Result getResult() {
      return result_;
    }
    
    private void initFields() {
      result_ = com.richardpianka.chess.network.Contracts.Result.Success;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResult()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, result_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, result_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder newBuilder(com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder builder = new com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.SpecialMovePieceResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse build() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse buildPartial() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse result = new com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.result_ = result_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder mergeFrom(com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse other) {
        if (other == com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.getDefaultInstance()) return this;
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResult()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.Result value = com.richardpianka.chess.network.Contracts.Result.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                result_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.Result Result = 1;
      private com.richardpianka.chess.network.Contracts.Result result_ = com.richardpianka.chess.network.Contracts.Result.Success;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.Result getResult() {
        return result_;
      }
      public Builder setResult(com.richardpianka.chess.network.Contracts.Result value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = com.richardpianka.chess.network.Contracts.Result.Success;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.SpecialMovePieceResponse)
    }
    
    static {
      defaultInstance = new SpecialMovePieceResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.SpecialMovePieceResponse)
  }
  
  public interface SpecialMovePieceEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .com.richardpianka.chess.network.SpecialMove Move = 1;
    boolean hasMove();
    com.richardpianka.chess.network.Contracts.SpecialMove getMove();
    com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder();
  }
  public static final class SpecialMovePieceEvent extends
      com.google.protobuf.GeneratedMessage
      implements SpecialMovePieceEventOrBuilder {
    // Use SpecialMovePieceEvent.newBuilder() to construct.
    private SpecialMovePieceEvent(SpecialMovePieceEvent.Builder builder) {
      super(builder);
    }
    private SpecialMovePieceEvent(boolean noInit) {}
    
    private static final SpecialMovePieceEvent defaultInstance;
    public static SpecialMovePieceEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public SpecialMovePieceEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .com.richardpianka.chess.network.SpecialMove Move = 1;
    public static final int MOVE_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.SpecialMove move_;
    public boolean hasMove() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMove getMove() {
      return move_;
    }
    public com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder() {
      return move_;
    }
    
    private void initFields() {
      move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMove()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMove().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, move_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, move_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder builder = new com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.SpecialMovePieceEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMoveFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent build() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent result = new com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (moveBuilder_ == null) {
          result.move_ = move_;
        } else {
          result.move_ = moveBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.getDefaultInstance()) return this;
        if (other.hasMove()) {
          mergeMove(other.getMove());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMove()) {
          
          return false;
        }
        if (!getMove().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.richardpianka.chess.network.Contracts.SpecialMove.Builder subBuilder = com.richardpianka.chess.network.Contracts.SpecialMove.newBuilder();
              if (hasMove()) {
                subBuilder.mergeFrom(getMove());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMove(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .com.richardpianka.chess.network.SpecialMove Move = 1;
      private com.richardpianka.chess.network.Contracts.SpecialMove move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder> moveBuilder_;
      public boolean hasMove() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.SpecialMove getMove() {
        if (moveBuilder_ == null) {
          return move_;
        } else {
          return moveBuilder_.getMessage();
        }
      }
      public Builder setMove(com.richardpianka.chess.network.Contracts.SpecialMove value) {
        if (moveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          move_ = value;
          onChanged();
        } else {
          moveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setMove(
          com.richardpianka.chess.network.Contracts.SpecialMove.Builder builderForValue) {
        if (moveBuilder_ == null) {
          move_ = builderForValue.build();
          onChanged();
        } else {
          moveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeMove(com.richardpianka.chess.network.Contracts.SpecialMove value) {
        if (moveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              move_ != com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance()) {
            move_ =
              com.richardpianka.chess.network.Contracts.SpecialMove.newBuilder(move_).mergeFrom(value).buildPartial();
          } else {
            move_ = value;
          }
          onChanged();
        } else {
          moveBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearMove() {
        if (moveBuilder_ == null) {
          move_ = com.richardpianka.chess.network.Contracts.SpecialMove.getDefaultInstance();
          onChanged();
        } else {
          moveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.SpecialMove.Builder getMoveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMoveFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder getMoveOrBuilder() {
        if (moveBuilder_ != null) {
          return moveBuilder_.getMessageOrBuilder();
        } else {
          return move_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder> 
          getMoveFieldBuilder() {
        if (moveBuilder_ == null) {
          moveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.SpecialMove, com.richardpianka.chess.network.Contracts.SpecialMove.Builder, com.richardpianka.chess.network.Contracts.SpecialMoveOrBuilder>(
                  move_,
                  getParentForChildren(),
                  isClean());
          move_ = null;
        }
        return moveBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.SpecialMovePieceEvent)
    }
    
    static {
      defaultInstance = new SpecialMovePieceEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.SpecialMovePieceEvent)
  }
  
  public interface GameStatusEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .com.richardpianka.chess.network.GameStatus Status = 1;
    boolean hasStatus();
    com.richardpianka.chess.network.Contracts.GameStatus getStatus();
    
    // optional .com.richardpianka.chess.network.User User = 2;
    boolean hasUser();
    com.richardpianka.chess.network.Contracts.User getUser();
    com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder();
  }
  public static final class GameStatusEvent extends
      com.google.protobuf.GeneratedMessage
      implements GameStatusEventOrBuilder {
    // Use GameStatusEvent.newBuilder() to construct.
    private GameStatusEvent(GameStatusEvent.Builder builder) {
      super(builder);
    }
    private GameStatusEvent(boolean noInit) {}
    
    private static final GameStatusEvent defaultInstance;
    public static GameStatusEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameStatusEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStatusEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStatusEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .com.richardpianka.chess.network.GameStatus Status = 1;
    public static final int STATUS_FIELD_NUMBER = 1;
    private com.richardpianka.chess.network.Contracts.GameStatus status_;
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public com.richardpianka.chess.network.Contracts.GameStatus getStatus() {
      return status_;
    }
    
    // optional .com.richardpianka.chess.network.User User = 2;
    public static final int USER_FIELD_NUMBER = 2;
    private com.richardpianka.chess.network.Contracts.User user_;
    public boolean hasUser() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.richardpianka.chess.network.Contracts.User getUser() {
      return user_;
    }
    public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
      return user_;
    }
    
    private void initFields() {
      status_ = com.richardpianka.chess.network.Contracts.GameStatus.Play;
      user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasUser()) {
        if (!getUser().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, status_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, user_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, status_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, user_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.GameStatusEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder builder = new com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.GameStatusEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStatusEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_GameStatusEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.GameStatusEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUserFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        status_ = com.richardpianka.chess.network.Contracts.GameStatus.Play;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.GameStatusEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.GameStatusEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.GameStatusEvent build() {
        com.richardpianka.chess.network.Contracts.GameStatusEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.GameStatusEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.GameStatusEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameStatusEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.GameStatusEvent result = new com.richardpianka.chess.network.Contracts.GameStatusEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (userBuilder_ == null) {
          result.user_ = user_;
        } else {
          result.user_ = userBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.GameStatusEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.GameStatusEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.GameStatusEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.GameStatusEvent.getDefaultInstance()) return this;
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasUser()) {
          if (!getUser().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.richardpianka.chess.network.Contracts.GameStatus value = com.richardpianka.chess.network.Contracts.GameStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                status_ = value;
              }
              break;
            }
            case 18: {
              com.richardpianka.chess.network.Contracts.User.Builder subBuilder = com.richardpianka.chess.network.Contracts.User.newBuilder();
              if (hasUser()) {
                subBuilder.mergeFrom(getUser());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUser(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .com.richardpianka.chess.network.GameStatus Status = 1;
      private com.richardpianka.chess.network.Contracts.GameStatus status_ = com.richardpianka.chess.network.Contracts.GameStatus.Play;
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public com.richardpianka.chess.network.Contracts.GameStatus getStatus() {
        return status_;
      }
      public Builder setStatus(com.richardpianka.chess.network.Contracts.GameStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        status_ = value;
        onChanged();
        return this;
      }
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = com.richardpianka.chess.network.Contracts.GameStatus.Play;
        onChanged();
        return this;
      }
      
      // optional .com.richardpianka.chess.network.User User = 2;
      private com.richardpianka.chess.network.Contracts.User user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> userBuilder_;
      public boolean hasUser() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.richardpianka.chess.network.Contracts.User getUser() {
        if (userBuilder_ == null) {
          return user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      public Builder setUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
          onChanged();
        } else {
          userBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setUser(
          com.richardpianka.chess.network.Contracts.User.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
          onChanged();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeUser(com.richardpianka.chess.network.Contracts.User value) {
        if (userBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              user_ != com.richardpianka.chess.network.Contracts.User.getDefaultInstance()) {
            user_ =
              com.richardpianka.chess.network.Contracts.User.newBuilder(user_).mergeFrom(value).buildPartial();
          } else {
            user_ = value;
          }
          onChanged();
        } else {
          userBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearUser() {
        if (userBuilder_ == null) {
          user_ = com.richardpianka.chess.network.Contracts.User.getDefaultInstance();
          onChanged();
        } else {
          userBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public com.richardpianka.chess.network.Contracts.User.Builder getUserBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      public com.richardpianka.chess.network.Contracts.UserOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.richardpianka.chess.network.Contracts.User, com.richardpianka.chess.network.Contracts.User.Builder, com.richardpianka.chess.network.Contracts.UserOrBuilder>(
                  user_,
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.GameStatusEvent)
    }
    
    static {
      defaultInstance = new GameStatusEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.GameStatusEvent)
  }
  
  public interface TimeLeftEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required uint32 WhiteSeconds = 1;
    boolean hasWhiteSeconds();
    int getWhiteSeconds();
    
    // required uint32 BlackSeconds = 2;
    boolean hasBlackSeconds();
    int getBlackSeconds();
  }
  public static final class TimeLeftEvent extends
      com.google.protobuf.GeneratedMessage
      implements TimeLeftEventOrBuilder {
    // Use TimeLeftEvent.newBuilder() to construct.
    private TimeLeftEvent(TimeLeftEvent.Builder builder) {
      super(builder);
    }
    private TimeLeftEvent(boolean noInit) {}
    
    private static final TimeLeftEvent defaultInstance;
    public static TimeLeftEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public TimeLeftEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_TimeLeftEvent_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_TimeLeftEvent_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required uint32 WhiteSeconds = 1;
    public static final int WHITESECONDS_FIELD_NUMBER = 1;
    private int whiteSeconds_;
    public boolean hasWhiteSeconds() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getWhiteSeconds() {
      return whiteSeconds_;
    }
    
    // required uint32 BlackSeconds = 2;
    public static final int BLACKSECONDS_FIELD_NUMBER = 2;
    private int blackSeconds_;
    public boolean hasBlackSeconds() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getBlackSeconds() {
      return blackSeconds_;
    }
    
    private void initFields() {
      whiteSeconds_ = 0;
      blackSeconds_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasWhiteSeconds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlackSeconds()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, whiteSeconds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, blackSeconds_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, whiteSeconds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, blackSeconds_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder newBuilder() { return com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder.create(); }
    public com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder newBuilderForType() { return newBuilder(); }
    public static com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder newBuilder(com.richardpianka.chess.network.Contracts.TimeLeftEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder builder = new com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.richardpianka.chess.network.Contracts.TimeLeftEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_TimeLeftEvent_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.richardpianka.chess.network.Contracts.internal_static_com_richardpianka_chess_network_TimeLeftEvent_fieldAccessorTable;
      }
      
      // Construct using com.richardpianka.chess.network.Contracts.TimeLeftEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        whiteSeconds_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        blackSeconds_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDescriptor();
      }
      
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent getDefaultInstanceForType() {
        return com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance();
      }
      
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent build() {
        com.richardpianka.chess.network.Contracts.TimeLeftEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.richardpianka.chess.network.Contracts.TimeLeftEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.richardpianka.chess.network.Contracts.TimeLeftEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent buildPartial() {
        com.richardpianka.chess.network.Contracts.TimeLeftEvent result = new com.richardpianka.chess.network.Contracts.TimeLeftEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.whiteSeconds_ = whiteSeconds_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.blackSeconds_ = blackSeconds_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.richardpianka.chess.network.Contracts.TimeLeftEvent) {
          return mergeFrom((com.richardpianka.chess.network.Contracts.TimeLeftEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder mergeFrom(com.richardpianka.chess.network.Contracts.TimeLeftEvent other) {
        if (other == com.richardpianka.chess.network.Contracts.TimeLeftEvent.getDefaultInstance()) return this;
        if (other.hasWhiteSeconds()) {
          setWhiteSeconds(other.getWhiteSeconds());
        }
        if (other.hasBlackSeconds()) {
          setBlackSeconds(other.getBlackSeconds());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasWhiteSeconds()) {
          
          return false;
        }
        if (!hasBlackSeconds()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              whiteSeconds_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              blackSeconds_ = input.readUInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required uint32 WhiteSeconds = 1;
      private int whiteSeconds_ ;
      public boolean hasWhiteSeconds() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getWhiteSeconds() {
        return whiteSeconds_;
      }
      public Builder setWhiteSeconds(int value) {
        bitField0_ |= 0x00000001;
        whiteSeconds_ = value;
        onChanged();
        return this;
      }
      public Builder clearWhiteSeconds() {
        bitField0_ = (bitField0_ & ~0x00000001);
        whiteSeconds_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 BlackSeconds = 2;
      private int blackSeconds_ ;
      public boolean hasBlackSeconds() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getBlackSeconds() {
        return blackSeconds_;
      }
      public Builder setBlackSeconds(int value) {
        bitField0_ |= 0x00000002;
        blackSeconds_ = value;
        onChanged();
        return this;
      }
      public Builder clearBlackSeconds() {
        bitField0_ = (bitField0_ & ~0x00000002);
        blackSeconds_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.richardpianka.chess.network.TimeLeftEvent)
    }
    
    static {
      defaultInstance = new TimeLeftEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.richardpianka.chess.network.TimeLeftEvent)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Envelope_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Envelope_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Coordinate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Coordinate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Piece_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Piece_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Move_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Move_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_SpecialMove_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_SpecialMove_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Castle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Castle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Version_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Version_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Room_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Room_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Record_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Record_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_User_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_User_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_Game_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_Game_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_GameMetadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_GameMetadata_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_UserTime_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_UserTime_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_HandshakeRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_HandshakeRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_HandshakeResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_HandshakeResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_IdentifyRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_IdentifyRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_IdentifyResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_IdentifyResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinChatRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinChatRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinChatResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinChatResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_RoomListRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_RoomListRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_RoomListResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_RoomListResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinRoomRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinRoomRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinRoomResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinRoomResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_SpeakRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_SpeakRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_OperatorRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_OperatorRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_OperatorResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_OperatorResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_ChatRoomEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_ChatRoomEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_ChatUserEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_ChatUserEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_ChatSpeakEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_ChatSpeakEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_GameListRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_GameListRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_GameListResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_GameListResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_CreateGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_CreateGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_CreateGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_CreateGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_JoinGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_JoinGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_LeaveGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_LeaveGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_StartGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_StartGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_StartGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_StartGameResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_GameStartedEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_GameStartedEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_MovePieceRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_MovePieceRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_MovePieceResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_MovePieceResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_MovePieceEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_MovePieceEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_GameStatusEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_GameStatusEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_richardpianka_chess_network_TimeLeftEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_richardpianka_chess_network_TimeLeftEvent_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036protobuf/chess/contracts.proto\022\037com.ri" +
      "chardpianka.chess.network\"\306\024\n\010Envelope\022K" +
      "\n\020HandshakeRequest\030\001 \001(\01321.com.richardpi" +
      "anka.chess.network.HandshakeRequest\022M\n\021H" +
      "andshakeResponse\030\002 \001(\01322.com.richardpian" +
      "ka.chess.network.HandshakeResponse\022I\n\017Id" +
      "entifyRequest\030\003 \001(\01320.com.richardpianka." +
      "chess.network.IdentifyRequest\022K\n\020Identif" +
      "yResponse\030\004 \001(\01321.com.richardpianka.ches" +
      "s.network.IdentifyResponse\022I\n\017JoinChatRe",
      "quest\030\005 \001(\01320.com.richardpianka.chess.ne" +
      "twork.JoinChatRequest\022K\n\020JoinChatRespons" +
      "e\030\006 \001(\01321.com.richardpianka.chess.networ" +
      "k.JoinChatResponse\022I\n\017RoomListRequest\030\007 " +
      "\001(\01320.com.richardpianka.chess.network.Ro" +
      "omListRequest\022K\n\020RoomListResponse\030\010 \001(\0132" +
      "1.com.richardpianka.chess.network.RoomLi" +
      "stResponse\022I\n\017JoinRoomRequest\030\t \001(\01320.co" +
      "m.richardpianka.chess.network.JoinRoomRe" +
      "quest\022K\n\020JoinRoomResponse\030\n \001(\01321.com.ri",
      "chardpianka.chess.network.JoinRoomRespon" +
      "se\022C\n\014SpeakRequest\030\013 \001(\0132-.com.richardpi" +
      "anka.chess.network.SpeakRequest\022I\n\017Opera" +
      "torRequest\030\014 \001(\01320.com.richardpianka.che" +
      "ss.network.OperatorRequest\022K\n\020OperatorRe" +
      "sponse\030\r \001(\01321.com.richardpianka.chess.n" +
      "etwork.OperatorResponse\022E\n\rChatRoomEvent" +
      "\030\016 \001(\0132..com.richardpianka.chess.network" +
      ".ChatRoomEvent\022E\n\rChatUserEvent\030\017 \001(\0132.." +
      "com.richardpianka.chess.network.ChatUser",
      "Event\022G\n\016ChatSpeakEvent\030\020 \001(\0132/.com.rich" +
      "ardpianka.chess.network.ChatSpeakEvent\022I" +
      "\n\017GameListRequest\030\021 \001(\01320.com.richardpia" +
      "nka.chess.network.GameListRequest\022K\n\020Gam" +
      "eListResponse\030\022 \001(\01321.com.richardpianka." +
      "chess.network.GameListResponse\022M\n\021Create" +
      "GameRequest\030\023 \001(\01322.com.richardpianka.ch" +
      "ess.network.CreateGameRequest\022O\n\022CreateG" +
      "ameResponse\030\024 \001(\01323.com.richardpianka.ch" +
      "ess.network.CreateGameResponse\022I\n\017JoinGa",
      "meRequest\030\025 \001(\01320.com.richardpianka.ches" +
      "s.network.JoinGameRequest\022K\n\020JoinGameRes" +
      "ponse\030\026 \001(\01321.com.richardpianka.chess.ne" +
      "twork.JoinGameResponse\022K\n\020LeaveGameReque" +
      "st\030\027 \001(\01321.com.richardpianka.chess.netwo" +
      "rk.LeaveGameRequest\022K\n\020StartGameRequest\030" +
      "\030 \001(\01321.com.richardpianka.chess.network." +
      "StartGameRequest\022M\n\021StartGameResponse\030\031 " +
      "\001(\01322.com.richardpianka.chess.network.St" +
      "artGameResponse\022K\n\020GameStartedEvent\030\032 \001(",
      "\01321.com.richardpianka.chess.network.Game" +
      "StartedEvent\022K\n\020MovePieceRequest\030\033 \001(\01321" +
      ".com.richardpianka.chess.network.MovePie" +
      "ceRequest\022M\n\021MovePieceResponse\030\034 \001(\01322.c" +
      "om.richardpianka.chess.network.MovePiece" +
      "Response\022G\n\016MovePieceEvent\030\035 \001(\0132/.com.r" +
      "ichardpianka.chess.network.MovePieceEven" +
      "t\022Y\n\027SpecialMovePieceRequest\030\036 \001(\01328.com" +
      ".richardpianka.chess.network.SpecialMove" +
      "PieceRequest\022[\n\030SpecialMovePieceResponse",
      "\030\037 \001(\01329.com.richardpianka.chess.network" +
      ".SpecialMovePieceResponse\022U\n\025SpecialMove" +
      "PieceEvent\030  \001(\01326.com.richardpianka.che" +
      "ss.network.SpecialMovePieceEvent\022I\n\017Game" +
      "StatusEvent\030\" \001(\01320.com.richardpianka.ch" +
      "ess.network.GameStatusEvent\022E\n\rTimeLeftE" +
      "vent\030# \001(\0132..com.richardpianka.chess.net" +
      "work.TimeLeftEvent\"v\n\nCoordinate\0223\n\004File" +
      "\030\001 \002(\0162%.com.richardpianka.chess.network" +
      ".File\0223\n\004Rank\030\002 \002(\0162%.com.richardpianka.",
      "chess.network.Rank\"\213\001\n\005Piece\0225\n\005Color\030\001 " +
      "\002(\0162&.com.richardpianka.chess.network.Co" +
      "lor\022;\n\010Figurine\030\002 \002(\0162).com.richardpiank" +
      "a.chess.network.Figurine\022\016\n\006Number\030\003 \002(\r" +
      "\"\263\001\n\004Move\0225\n\005Piece\030\001 \002(\0132&.com.richardpi" +
      "anka.chess.network.Piece\022:\n\005Start\030\002 \002(\0132" +
      "+.com.richardpianka.chess.network.Coordi" +
      "nate\0228\n\003End\030\003 \002(\0132+.com.richardpianka.ch" +
      "ess.network.Coordinate\"F\n\013SpecialMove\0227\n" +
      "\006Castle\030\001 \001(\0132\'.com.richardpianka.chess.",
      "network.Castle\"t\n\006Castle\0224\n\004Rook\030\001 \002(\0132&" +
      ".com.richardpianka.chess.network.Piece\0224" +
      "\n\004King\030\002 \002(\0132&.com.richardpianka.chess.n" +
      "etwork.Piece\"W\n\007Version\022\027\n\014VersionMajor\030" +
      "\001 \001(\r:\0011\022\027\n\014VersionMinor\030\002 \001(\r:\0010\022\032\n\017Ver" +
      "sionRevision\030\003 \001(\r:\0010\"O\n\004Room\022\014\n\004Name\030\001 " +
      "\002(\t\0229\n\005Flags\030\002 \002(\0162*.com.richardpianka.c" +
      "hess.network.RoomFlags\"O\n\006Record\022\014\n\004Wins" +
      "\030\001 \002(\r\022\016\n\006Losses\030\002 \002(\r\022\022\n\nStalemates\030\003 \002" +
      "(\r\022\023\n\013Disconnects\030\004 \002(\r\"\210\001\n\004User\022\014\n\004Name",
      "\030\001 \002(\t\0229\n\005Flags\030\002 \002(\0162*.com.richardpiank" +
      "a.chess.network.UserFlags\0227\n\006Record\030\003 \002(" +
      "\0132\'.com.richardpianka.chess.network.Reco" +
      "rd\"x\n\004Game\022\014\n\004Name\030\001 \002(\t\022\020\n\010Password\030\002 \001" +
      "(\t\022\017\n\007Private\030\003 \002(\010\022?\n\010MetaData\030\004 \001(\0132-." +
      "com.richardpianka.chess.network.GameMeta" +
      "data\"\272\001\n\014GameMetadata\0226\n\007Created\030\001 \001(\0132%" +
      ".com.richardpianka.chess.network.User\0225\n" +
      "\006Joined\030\002 \001(\0132%.com.richardpianka.chess." +
      "network.User\022;\n\010UserTime\030\003 \001(\0132).com.ric",
      "hardpianka.chess.network.UserTime\"1\n\010Use" +
      "rTime\022\r\n\005Timed\030\001 \002(\010\022\026\n\016SecondsPerUser\030\002" +
      " \002(\r\"M\n\020HandshakeRequest\0229\n\007Version\030\001 \002(" +
      "\0132(.com.richardpianka.chess.network.Vers" +
      "ion\"L\n\021HandshakeResponse\0227\n\006Result\030\001 \002(\016" +
      "2\'.com.richardpianka.chess.network.Resul" +
      "t\"5\n\017IdentifyRequest\022\020\n\010Username\030\001 \002(\t\022\020" +
      "\n\010Password\030\002 \001(\t\"\\\n\020IdentifyResponse\0227\n\006" +
      "Result\030\001 \002(\0162\'.com.richardpianka.chess.n" +
      "etwork.Result\022\017\n\007Message\030\002 \001(\t\"\021\n\017JoinCh",
      "atRequest\"K\n\020JoinChatResponse\0227\n\006Result\030" +
      "\001 \002(\0162\'.com.richardpianka.chess.network." +
      "Result\"\021\n\017RoomListRequest\"H\n\020RoomListRes" +
      "ponse\0224\n\005Rooms\030\001 \003(\0132%.com.richardpianka" +
      ".chess.network.Room\"F\n\017JoinRoomRequest\0223" +
      "\n\004Room\030\001 \002(\0132%.com.richardpianka.chess.n" +
      "etwork.Room\"K\n\020JoinRoomResponse\0227\n\006Resul" +
      "t\030\001 \002(\0162\'.com.richardpianka.chess.networ" +
      "k.Result\"\223\001\n\014SpeakRequest\0228\n\004Mode\030\001 \002(\0162" +
      "*.com.richardpianka.chess.network.SpeakM",
      "ode\022\017\n\007Message\030\002 \002(\t\0228\n\tRecipient\030\003 \001(\0132" +
      "%.com.richardpianka.chess.network.User\"\207" +
      "\001\n\017OperatorRequest\022?\n\006Action\030\001 \002(\0162/.com" +
      ".richardpianka.chess.network.OperatorAct" +
      "ion\0223\n\004User\030\002 \001(\0132%.com.richardpianka.ch" +
      "ess.network.User\"K\n\020OperatorResponse\0227\n\006" +
      "Result\030\001 \002(\0162\'.com.richardpianka.chess.n" +
      "etwork.Result\"z\n\rChatRoomEvent\0223\n\004Room\030\001" +
      " \002(\0132%.com.richardpianka.chess.network.R" +
      "oom\0224\n\005Users\030\002 \003(\0132%.com.richardpianka.c",
      "hess.network.User\"\320\001\n\rChatUserEvent\0223\n\004U" +
      "ser\030\001 \002(\0132%.com.richardpianka.chess.netw" +
      "ork.User\022I\n\006Status\030\002 \002(\01629.com.richardpi" +
      "anka.chess.network.ChatUserEvent.UserSta" +
      "tus\022\017\n\007Message\030\003 \001(\t\".\n\nUserStatus\022\n\n\006Jo" +
      "ined\020\000\022\010\n\004Left\020\001\022\n\n\006Update\020\002\"\220\001\n\016ChatSpe" +
      "akEvent\0223\n\004User\030\001 \002(\0132%.com.richardpiank" +
      "a.chess.network.User\022\017\n\007Message\030\002 \002(\t\0228\n" +
      "\004Mode\030\003 \002(\0162*.com.richardpianka.chess.ne" +
      "twork.SpeakMode\"\021\n\017GameListRequest\"H\n\020Ga",
      "meListResponse\0224\n\005Games\030\001 \003(\0132%.com.rich" +
      "ardpianka.chess.network.Game\"3\n\021CreateGa" +
      "meRequest\022\014\n\004Name\030\001 \002(\t\022\020\n\010Password\030\002 \001(" +
      "\t\"\223\001\n\022CreateGameResponse\0227\n\006Result\030\001 \002(\016" +
      "2\'.com.richardpianka.chess.network.Resul" +
      "t\0223\n\004Game\030\002 \001(\0132%.com.richardpianka.ches" +
      "s.network.Game\022\017\n\007Message\030\003 \001(\t\"X\n\017JoinG" +
      "ameRequest\0223\n\004Game\030\001 \002(\0132%.com.richardpi" +
      "anka.chess.network.Game\022\020\n\010Password\030\002 \001(" +
      "\t\"\200\001\n\020JoinGameResponse\0223\n\004Game\030\001 \002(\0132%.c",
      "om.richardpianka.chess.network.Game\0227\n\006R" +
      "esult\030\002 \002(\0162\'.com.richardpianka.chess.ne" +
      "twork.Result\"\022\n\020LeaveGameRequest\"\022\n\020Star" +
      "tGameRequest\"L\n\021StartGameResponse\0227\n\006Res" +
      "ult\030\001 \002(\0162\'.com.richardpianka.chess.netw" +
      "ork.Result\"I\n\020GameStartedEvent\0225\n\005Color\030" +
      "\001 \002(\0162&.com.richardpianka.chess.network." +
      "Color\"G\n\020MovePieceRequest\0223\n\004Move\030\001 \002(\0132" +
      "%.com.richardpianka.chess.network.Move\"L" +
      "\n\021MovePieceResponse\0227\n\006Result\030\001 \002(\0162\'.co",
      "m.richardpianka.chess.network.Result\"E\n\016" +
      "MovePieceEvent\0223\n\004Move\030\001 \002(\0132%.com.richa" +
      "rdpianka.chess.network.Move\"U\n\027SpecialMo" +
      "vePieceRequest\022:\n\004Move\030\001 \002(\0132,.com.richa" +
      "rdpianka.chess.network.SpecialMove\"S\n\030Sp" +
      "ecialMovePieceResponse\0227\n\006Result\030\001 \002(\0162\'" +
      ".com.richardpianka.chess.network.Result\"" +
      "S\n\025SpecialMovePieceEvent\022:\n\004Move\030\001 \002(\0132," +
      ".com.richardpianka.chess.network.Special" +
      "Move\"\203\001\n\017GameStatusEvent\022;\n\006Status\030\001 \001(\016",
      "2+.com.richardpianka.chess.network.GameS" +
      "tatus\0223\n\004User\030\002 \001(\0132%.com.richardpianka." +
      "chess.network.User\";\n\rTimeLeftEvent\022\024\n\014W" +
      "hiteSeconds\030\001 \002(\r\022\024\n\014BlackSeconds\030\002 \002(\r*" +
      "\035\n\005Color\022\t\n\005White\020\000\022\t\n\005Black\020\001*K\n\010Figuri" +
      "ne\022\010\n\004King\020\000\022\t\n\005Queen\020\001\022\n\n\006Bishop\020\002\022\n\n\006K" +
      "night\020\003\022\010\n\004Rook\020\004\022\010\n\004Pawn\020\005*F\n\004Rank\022\006\n\002_" +
      "1\020\000\022\006\n\002_2\020\001\022\006\n\002_3\020\002\022\006\n\002_4\020\003\022\006\n\002_5\020\004\022\006\n\002_" +
      "6\020\005\022\006\n\002_7\020\006\022\006\n\002_8\020\007*F\n\004File\022\006\n\002_A\020\000\022\006\n\002_" +
      "B\020\001\022\006\n\002_C\020\002\022\006\n\002_D\020\003\022\006\n\002_E\020\004\022\006\n\002_F\020\005\022\006\n\002_",
      "G\020\006\022\006\n\002_H\020\007*\"\n\006Result\022\013\n\007Success\020\000\022\013\n\007Fa" +
      "ilure\020\001*4\n\tRoomFlags\022\n\n\006Public\020\000\022\013\n\007Priv" +
      "ate\020\001\022\016\n\nRestricted\020\002*4\n\tUserFlags\022\016\n\nPe" +
      "destrian\020\000\022\014\n\010Operator\020\001\022\t\n\005Admin\020\002*/\n\tS" +
      "peakMode\022\n\n\006Normal\020\000\022\013\n\007Whisper\020\001\022\t\n\005Emo" +
      "te\020\002*>\n\016OperatorAction\022\r\n\tDesignate\020\000\022\n\n" +
      "\006Resign\020\001\022\010\n\004Kick\020\002\022\007\n\003Ban\020\003*K\n\nGameStat" +
      "us\022\010\n\004Play\020\000\022\n\n\006Paused\020\001\022\013\n\007Victory\020\002\022\013\n" +
      "\007Forfeit\020\003\022\r\n\tStalemate\020\004B,\n\037com.richard" +
      "pianka.chess.networkB\tContracts"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_richardpianka_chess_network_Envelope_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_richardpianka_chess_network_Envelope_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Envelope_descriptor,
              new java.lang.String[] { "HandshakeRequest", "HandshakeResponse", "IdentifyRequest", "IdentifyResponse", "JoinChatRequest", "JoinChatResponse", "RoomListRequest", "RoomListResponse", "JoinRoomRequest", "JoinRoomResponse", "SpeakRequest", "OperatorRequest", "OperatorResponse", "ChatRoomEvent", "ChatUserEvent", "ChatSpeakEvent", "GameListRequest", "GameListResponse", "CreateGameRequest", "CreateGameResponse", "JoinGameRequest", "JoinGameResponse", "LeaveGameRequest", "StartGameRequest", "StartGameResponse", "GameStartedEvent", "MovePieceRequest", "MovePieceResponse", "MovePieceEvent", "SpecialMovePieceRequest", "SpecialMovePieceResponse", "SpecialMovePieceEvent", "GameStatusEvent", "TimeLeftEvent", },
              com.richardpianka.chess.network.Contracts.Envelope.class,
              com.richardpianka.chess.network.Contracts.Envelope.Builder.class);
          internal_static_com_richardpianka_chess_network_Coordinate_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_richardpianka_chess_network_Coordinate_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Coordinate_descriptor,
              new java.lang.String[] { "File", "Rank", },
              com.richardpianka.chess.network.Contracts.Coordinate.class,
              com.richardpianka.chess.network.Contracts.Coordinate.Builder.class);
          internal_static_com_richardpianka_chess_network_Piece_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_richardpianka_chess_network_Piece_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Piece_descriptor,
              new java.lang.String[] { "Color", "Figurine", "Number", },
              com.richardpianka.chess.network.Contracts.Piece.class,
              com.richardpianka.chess.network.Contracts.Piece.Builder.class);
          internal_static_com_richardpianka_chess_network_Move_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_richardpianka_chess_network_Move_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Move_descriptor,
              new java.lang.String[] { "Piece", "Start", "End", },
              com.richardpianka.chess.network.Contracts.Move.class,
              com.richardpianka.chess.network.Contracts.Move.Builder.class);
          internal_static_com_richardpianka_chess_network_SpecialMove_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_richardpianka_chess_network_SpecialMove_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_SpecialMove_descriptor,
              new java.lang.String[] { "Castle", },
              com.richardpianka.chess.network.Contracts.SpecialMove.class,
              com.richardpianka.chess.network.Contracts.SpecialMove.Builder.class);
          internal_static_com_richardpianka_chess_network_Castle_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_richardpianka_chess_network_Castle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Castle_descriptor,
              new java.lang.String[] { "Rook", "King", },
              com.richardpianka.chess.network.Contracts.Castle.class,
              com.richardpianka.chess.network.Contracts.Castle.Builder.class);
          internal_static_com_richardpianka_chess_network_Version_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_richardpianka_chess_network_Version_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Version_descriptor,
              new java.lang.String[] { "VersionMajor", "VersionMinor", "VersionRevision", },
              com.richardpianka.chess.network.Contracts.Version.class,
              com.richardpianka.chess.network.Contracts.Version.Builder.class);
          internal_static_com_richardpianka_chess_network_Room_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_richardpianka_chess_network_Room_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Room_descriptor,
              new java.lang.String[] { "Name", "Flags", },
              com.richardpianka.chess.network.Contracts.Room.class,
              com.richardpianka.chess.network.Contracts.Room.Builder.class);
          internal_static_com_richardpianka_chess_network_Record_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_richardpianka_chess_network_Record_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Record_descriptor,
              new java.lang.String[] { "Wins", "Losses", "Stalemates", "Disconnects", },
              com.richardpianka.chess.network.Contracts.Record.class,
              com.richardpianka.chess.network.Contracts.Record.Builder.class);
          internal_static_com_richardpianka_chess_network_User_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_richardpianka_chess_network_User_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_User_descriptor,
              new java.lang.String[] { "Name", "Flags", "Record", },
              com.richardpianka.chess.network.Contracts.User.class,
              com.richardpianka.chess.network.Contracts.User.Builder.class);
          internal_static_com_richardpianka_chess_network_Game_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_com_richardpianka_chess_network_Game_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_Game_descriptor,
              new java.lang.String[] { "Name", "Password", "Private", "MetaData", },
              com.richardpianka.chess.network.Contracts.Game.class,
              com.richardpianka.chess.network.Contracts.Game.Builder.class);
          internal_static_com_richardpianka_chess_network_GameMetadata_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_com_richardpianka_chess_network_GameMetadata_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_GameMetadata_descriptor,
              new java.lang.String[] { "Created", "Joined", "UserTime", },
              com.richardpianka.chess.network.Contracts.GameMetadata.class,
              com.richardpianka.chess.network.Contracts.GameMetadata.Builder.class);
          internal_static_com_richardpianka_chess_network_UserTime_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_com_richardpianka_chess_network_UserTime_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_UserTime_descriptor,
              new java.lang.String[] { "Timed", "SecondsPerUser", },
              com.richardpianka.chess.network.Contracts.UserTime.class,
              com.richardpianka.chess.network.Contracts.UserTime.Builder.class);
          internal_static_com_richardpianka_chess_network_HandshakeRequest_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_com_richardpianka_chess_network_HandshakeRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_HandshakeRequest_descriptor,
              new java.lang.String[] { "Version", },
              com.richardpianka.chess.network.Contracts.HandshakeRequest.class,
              com.richardpianka.chess.network.Contracts.HandshakeRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_HandshakeResponse_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_com_richardpianka_chess_network_HandshakeResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_HandshakeResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.HandshakeResponse.class,
              com.richardpianka.chess.network.Contracts.HandshakeResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_IdentifyRequest_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_com_richardpianka_chess_network_IdentifyRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_IdentifyRequest_descriptor,
              new java.lang.String[] { "Username", "Password", },
              com.richardpianka.chess.network.Contracts.IdentifyRequest.class,
              com.richardpianka.chess.network.Contracts.IdentifyRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_IdentifyResponse_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_com_richardpianka_chess_network_IdentifyResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_IdentifyResponse_descriptor,
              new java.lang.String[] { "Result", "Message", },
              com.richardpianka.chess.network.Contracts.IdentifyResponse.class,
              com.richardpianka.chess.network.Contracts.IdentifyResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinChatRequest_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_com_richardpianka_chess_network_JoinChatRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinChatRequest_descriptor,
              new java.lang.String[] { },
              com.richardpianka.chess.network.Contracts.JoinChatRequest.class,
              com.richardpianka.chess.network.Contracts.JoinChatRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinChatResponse_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_com_richardpianka_chess_network_JoinChatResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinChatResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.JoinChatResponse.class,
              com.richardpianka.chess.network.Contracts.JoinChatResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_RoomListRequest_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_com_richardpianka_chess_network_RoomListRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_RoomListRequest_descriptor,
              new java.lang.String[] { },
              com.richardpianka.chess.network.Contracts.RoomListRequest.class,
              com.richardpianka.chess.network.Contracts.RoomListRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_RoomListResponse_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_com_richardpianka_chess_network_RoomListResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_RoomListResponse_descriptor,
              new java.lang.String[] { "Rooms", },
              com.richardpianka.chess.network.Contracts.RoomListResponse.class,
              com.richardpianka.chess.network.Contracts.RoomListResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinRoomRequest_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_com_richardpianka_chess_network_JoinRoomRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinRoomRequest_descriptor,
              new java.lang.String[] { "Room", },
              com.richardpianka.chess.network.Contracts.JoinRoomRequest.class,
              com.richardpianka.chess.network.Contracts.JoinRoomRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinRoomResponse_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_com_richardpianka_chess_network_JoinRoomResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinRoomResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.JoinRoomResponse.class,
              com.richardpianka.chess.network.Contracts.JoinRoomResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_SpeakRequest_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_com_richardpianka_chess_network_SpeakRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_SpeakRequest_descriptor,
              new java.lang.String[] { "Mode", "Message", "Recipient", },
              com.richardpianka.chess.network.Contracts.SpeakRequest.class,
              com.richardpianka.chess.network.Contracts.SpeakRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_OperatorRequest_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_com_richardpianka_chess_network_OperatorRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_OperatorRequest_descriptor,
              new java.lang.String[] { "Action", "User", },
              com.richardpianka.chess.network.Contracts.OperatorRequest.class,
              com.richardpianka.chess.network.Contracts.OperatorRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_OperatorResponse_descriptor =
            getDescriptor().getMessageTypes().get(25);
          internal_static_com_richardpianka_chess_network_OperatorResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_OperatorResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.OperatorResponse.class,
              com.richardpianka.chess.network.Contracts.OperatorResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_ChatRoomEvent_descriptor =
            getDescriptor().getMessageTypes().get(26);
          internal_static_com_richardpianka_chess_network_ChatRoomEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_ChatRoomEvent_descriptor,
              new java.lang.String[] { "Room", "Users", },
              com.richardpianka.chess.network.Contracts.ChatRoomEvent.class,
              com.richardpianka.chess.network.Contracts.ChatRoomEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_ChatUserEvent_descriptor =
            getDescriptor().getMessageTypes().get(27);
          internal_static_com_richardpianka_chess_network_ChatUserEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_ChatUserEvent_descriptor,
              new java.lang.String[] { "User", "Status", "Message", },
              com.richardpianka.chess.network.Contracts.ChatUserEvent.class,
              com.richardpianka.chess.network.Contracts.ChatUserEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_ChatSpeakEvent_descriptor =
            getDescriptor().getMessageTypes().get(28);
          internal_static_com_richardpianka_chess_network_ChatSpeakEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_ChatSpeakEvent_descriptor,
              new java.lang.String[] { "User", "Message", "Mode", },
              com.richardpianka.chess.network.Contracts.ChatSpeakEvent.class,
              com.richardpianka.chess.network.Contracts.ChatSpeakEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_GameListRequest_descriptor =
            getDescriptor().getMessageTypes().get(29);
          internal_static_com_richardpianka_chess_network_GameListRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_GameListRequest_descriptor,
              new java.lang.String[] { },
              com.richardpianka.chess.network.Contracts.GameListRequest.class,
              com.richardpianka.chess.network.Contracts.GameListRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_GameListResponse_descriptor =
            getDescriptor().getMessageTypes().get(30);
          internal_static_com_richardpianka_chess_network_GameListResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_GameListResponse_descriptor,
              new java.lang.String[] { "Games", },
              com.richardpianka.chess.network.Contracts.GameListResponse.class,
              com.richardpianka.chess.network.Contracts.GameListResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_CreateGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(31);
          internal_static_com_richardpianka_chess_network_CreateGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_CreateGameRequest_descriptor,
              new java.lang.String[] { "Name", "Password", },
              com.richardpianka.chess.network.Contracts.CreateGameRequest.class,
              com.richardpianka.chess.network.Contracts.CreateGameRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_CreateGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(32);
          internal_static_com_richardpianka_chess_network_CreateGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_CreateGameResponse_descriptor,
              new java.lang.String[] { "Result", "Game", "Message", },
              com.richardpianka.chess.network.Contracts.CreateGameResponse.class,
              com.richardpianka.chess.network.Contracts.CreateGameResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(33);
          internal_static_com_richardpianka_chess_network_JoinGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinGameRequest_descriptor,
              new java.lang.String[] { "Game", "Password", },
              com.richardpianka.chess.network.Contracts.JoinGameRequest.class,
              com.richardpianka.chess.network.Contracts.JoinGameRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_JoinGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(34);
          internal_static_com_richardpianka_chess_network_JoinGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_JoinGameResponse_descriptor,
              new java.lang.String[] { "Game", "Result", },
              com.richardpianka.chess.network.Contracts.JoinGameResponse.class,
              com.richardpianka.chess.network.Contracts.JoinGameResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_LeaveGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(35);
          internal_static_com_richardpianka_chess_network_LeaveGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_LeaveGameRequest_descriptor,
              new java.lang.String[] { },
              com.richardpianka.chess.network.Contracts.LeaveGameRequest.class,
              com.richardpianka.chess.network.Contracts.LeaveGameRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_StartGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(36);
          internal_static_com_richardpianka_chess_network_StartGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_StartGameRequest_descriptor,
              new java.lang.String[] { },
              com.richardpianka.chess.network.Contracts.StartGameRequest.class,
              com.richardpianka.chess.network.Contracts.StartGameRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_StartGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(37);
          internal_static_com_richardpianka_chess_network_StartGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_StartGameResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.StartGameResponse.class,
              com.richardpianka.chess.network.Contracts.StartGameResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_GameStartedEvent_descriptor =
            getDescriptor().getMessageTypes().get(38);
          internal_static_com_richardpianka_chess_network_GameStartedEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_GameStartedEvent_descriptor,
              new java.lang.String[] { "Color", },
              com.richardpianka.chess.network.Contracts.GameStartedEvent.class,
              com.richardpianka.chess.network.Contracts.GameStartedEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_MovePieceRequest_descriptor =
            getDescriptor().getMessageTypes().get(39);
          internal_static_com_richardpianka_chess_network_MovePieceRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_MovePieceRequest_descriptor,
              new java.lang.String[] { "Move", },
              com.richardpianka.chess.network.Contracts.MovePieceRequest.class,
              com.richardpianka.chess.network.Contracts.MovePieceRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_MovePieceResponse_descriptor =
            getDescriptor().getMessageTypes().get(40);
          internal_static_com_richardpianka_chess_network_MovePieceResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_MovePieceResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.MovePieceResponse.class,
              com.richardpianka.chess.network.Contracts.MovePieceResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_MovePieceEvent_descriptor =
            getDescriptor().getMessageTypes().get(41);
          internal_static_com_richardpianka_chess_network_MovePieceEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_MovePieceEvent_descriptor,
              new java.lang.String[] { "Move", },
              com.richardpianka.chess.network.Contracts.MovePieceEvent.class,
              com.richardpianka.chess.network.Contracts.MovePieceEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_descriptor =
            getDescriptor().getMessageTypes().get(42);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_SpecialMovePieceRequest_descriptor,
              new java.lang.String[] { "Move", },
              com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.class,
              com.richardpianka.chess.network.Contracts.SpecialMovePieceRequest.Builder.class);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_descriptor =
            getDescriptor().getMessageTypes().get(43);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_SpecialMovePieceResponse_descriptor,
              new java.lang.String[] { "Result", },
              com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.class,
              com.richardpianka.chess.network.Contracts.SpecialMovePieceResponse.Builder.class);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_descriptor =
            getDescriptor().getMessageTypes().get(44);
          internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_SpecialMovePieceEvent_descriptor,
              new java.lang.String[] { "Move", },
              com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.class,
              com.richardpianka.chess.network.Contracts.SpecialMovePieceEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_GameStatusEvent_descriptor =
            getDescriptor().getMessageTypes().get(45);
          internal_static_com_richardpianka_chess_network_GameStatusEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_GameStatusEvent_descriptor,
              new java.lang.String[] { "Status", "User", },
              com.richardpianka.chess.network.Contracts.GameStatusEvent.class,
              com.richardpianka.chess.network.Contracts.GameStatusEvent.Builder.class);
          internal_static_com_richardpianka_chess_network_TimeLeftEvent_descriptor =
            getDescriptor().getMessageTypes().get(46);
          internal_static_com_richardpianka_chess_network_TimeLeftEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_richardpianka_chess_network_TimeLeftEvent_descriptor,
              new java.lang.String[] { "WhiteSeconds", "BlackSeconds", },
              com.richardpianka.chess.network.Contracts.TimeLeftEvent.class,
              com.richardpianka.chess.network.Contracts.TimeLeftEvent.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
